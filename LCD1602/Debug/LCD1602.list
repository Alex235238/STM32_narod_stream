
LCD1602.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002628  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002800  08002800  00012800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002820  08002820  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08002820  08002820  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002820  08002820  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002820  08002820  00012820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002824  08002824  00012824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002828  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  20000010  08002838  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000084  08002838  00020084  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   000098c7  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b74  00000000  00000000  0002994a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009d8  00000000  00000000  0002b4c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000774  00000000  00000000  0002be98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024899  00000000  00000000  0002c60c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c130  00000000  00000000  00050ea5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e5b23  00000000  00000000  0005cfd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000026fc  00000000  00000000  00142af8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  001451f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080027e8 	.word	0x080027e8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	080027e8 	.word	0x080027e8

08000218 <strlen>:
 8000218:	4603      	mov	r3, r0
 800021a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021e:	2a00      	cmp	r2, #0
 8000220:	d1fb      	bne.n	800021a <strlen+0x2>
 8000222:	1a18      	subs	r0, r3, r0
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr

08000228 <lcd1602_Send_init_Data>:

/*============================Вспомогательные функции============================*/
/*-------------Функция для отправки данных при инициализации дисплея-------------*/
/// Функция предназначена для отправки байта данных по шине i2c. Содержит в себе Delay. Без него инициализация дисплея не проходит.
/// \param *init_Data - байт, например 0x25, где 2 (0010) это DB7-DB4 или DB3-DB0, а 5(0101) это сигналы LED, E, RW, RS соответственно
static void lcd1602_Send_init_Data(uint8_t *init_Data) {
 8000228:	b580      	push	{r7, lr}
 800022a:	b084      	sub	sp, #16
 800022c:	af02      	add	r7, sp, #8
 800022e:	6078      	str	r0, [r7, #4]
	if (backlight) {
 8000230:	4b1d      	ldr	r3, [pc, #116]	; (80002a8 <lcd1602_Send_init_Data+0x80>)
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	2b00      	cmp	r3, #0
 8000236:	d007      	beq.n	8000248 <lcd1602_Send_init_Data+0x20>
		*init_Data |= 0x08; //Включить подсветку
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	f043 0308 	orr.w	r3, r3, #8
 8000240:	b2da      	uxtb	r2, r3
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	701a      	strb	r2, [r3, #0]
 8000246:	e006      	b.n	8000256 <lcd1602_Send_init_Data+0x2e>
	} else {
		*init_Data &= ~0x08; //Выключить подсветку
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	781b      	ldrb	r3, [r3, #0]
 800024c:	f023 0308 	bic.w	r3, r3, #8
 8000250:	b2da      	uxtb	r2, r3
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	701a      	strb	r2, [r3, #0]
	}
	*init_Data |= 0x04; // Устанавливаем стробирующий сигнал E в 1
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	781b      	ldrb	r3, [r3, #0]
 800025a:	f043 0304 	orr.w	r3, r3, #4
 800025e:	b2da      	uxtb	r2, r3
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c2, Adress, init_Data, 1, 10);
 8000264:	230a      	movs	r3, #10
 8000266:	9300      	str	r3, [sp, #0]
 8000268:	2301      	movs	r3, #1
 800026a:	687a      	ldr	r2, [r7, #4]
 800026c:	214e      	movs	r1, #78	; 0x4e
 800026e:	480f      	ldr	r0, [pc, #60]	; (80002ac <lcd1602_Send_init_Data+0x84>)
 8000270:	f000 fecc 	bl	800100c <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000274:	2005      	movs	r0, #5
 8000276:	f000 fba5 	bl	80009c4 <HAL_Delay>
	*init_Data &= ~0x04; // Устанавливаем стробирующий сигнал E в 0
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	781b      	ldrb	r3, [r3, #0]
 800027e:	f023 0304 	bic.w	r3, r3, #4
 8000282:	b2da      	uxtb	r2, r3
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c2, Adress, init_Data, 1, 10);
 8000288:	230a      	movs	r3, #10
 800028a:	9300      	str	r3, [sp, #0]
 800028c:	2301      	movs	r3, #1
 800028e:	687a      	ldr	r2, [r7, #4]
 8000290:	214e      	movs	r1, #78	; 0x4e
 8000292:	4806      	ldr	r0, [pc, #24]	; (80002ac <lcd1602_Send_init_Data+0x84>)
 8000294:	f000 feba 	bl	800100c <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000298:	2005      	movs	r0, #5
 800029a:	f000 fb93 	bl	80009c4 <HAL_Delay>
}
 800029e:	bf00      	nop
 80002a0:	3708      	adds	r7, #8
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	20000000 	.word	0x20000000
 80002ac:	2000002c 	.word	0x2000002c

080002b0 <lcd1602_Send_data>:
/*----------------------Функция отправки байта данных----------------------------*/

/*----------------------Основная функция для отправки данных---------------------*/
/// Функция предназначена для отправки байта данных по шине i2c
/// \param *init_Data - байт, например 0x25, где 2 (0010) это DB7-DB4 или DB3-DB0, а 5(0101) это сигналы LED, E, RW, RS соответственно
static void lcd1602_Send_data(uint8_t *Data) {
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b084      	sub	sp, #16
 80002b4:	af02      	add	r7, sp, #8
 80002b6:	6078      	str	r0, [r7, #4]

	if (backlight) {
 80002b8:	4b1a      	ldr	r3, [pc, #104]	; (8000324 <lcd1602_Send_data+0x74>)
 80002ba:	781b      	ldrb	r3, [r3, #0]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d007      	beq.n	80002d0 <lcd1602_Send_data+0x20>
		*Data |= 0x08;
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	781b      	ldrb	r3, [r3, #0]
 80002c4:	f043 0308 	orr.w	r3, r3, #8
 80002c8:	b2da      	uxtb	r2, r3
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	701a      	strb	r2, [r3, #0]
 80002ce:	e006      	b.n	80002de <lcd1602_Send_data+0x2e>
	} else {
		*Data &= ~0x08;
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	781b      	ldrb	r3, [r3, #0]
 80002d4:	f023 0308 	bic.w	r3, r3, #8
 80002d8:	b2da      	uxtb	r2, r3
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	701a      	strb	r2, [r3, #0]
	}
	*Data |= 0x04; // устанавливаем стробирующий сигнал E в 1
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	781b      	ldrb	r3, [r3, #0]
 80002e2:	f043 0304 	orr.w	r3, r3, #4
 80002e6:	b2da      	uxtb	r2, r3
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c2, Adress, Data, 1, 10);
 80002ec:	230a      	movs	r3, #10
 80002ee:	9300      	str	r3, [sp, #0]
 80002f0:	2301      	movs	r3, #1
 80002f2:	687a      	ldr	r2, [r7, #4]
 80002f4:	214e      	movs	r1, #78	; 0x4e
 80002f6:	480c      	ldr	r0, [pc, #48]	; (8000328 <lcd1602_Send_data+0x78>)
 80002f8:	f000 fe88 	bl	800100c <HAL_I2C_Master_Transmit>
	*Data &= ~0x04; // устанавливаем стробирующий сигнал E в 0
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	f023 0304 	bic.w	r3, r3, #4
 8000304:	b2da      	uxtb	r2, r3
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c2, Adress, Data, 1, 10);
 800030a:	230a      	movs	r3, #10
 800030c:	9300      	str	r3, [sp, #0]
 800030e:	2301      	movs	r3, #1
 8000310:	687a      	ldr	r2, [r7, #4]
 8000312:	214e      	movs	r1, #78	; 0x4e
 8000314:	4804      	ldr	r0, [pc, #16]	; (8000328 <lcd1602_Send_data+0x78>)
 8000316:	f000 fe79 	bl	800100c <HAL_I2C_Master_Transmit>
}
 800031a:	bf00      	nop
 800031c:	3708      	adds	r7, #8
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	20000000 	.word	0x20000000
 8000328:	2000002c 	.word	0x2000002c

0800032c <lcd1602_Init>:
/*----------------------Основная функция для отправки данных---------------------*/
/*============================Вспомогательные функции============================*/

/*-------------------------Функция инициализации дисплея-------------------------*/
/// Функция инициализации дисплея
void lcd1602_Init(void) {
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
	/*========Power on========*/
	uint8_t tx_buffer = 0x30;
 8000332:	2330      	movs	r3, #48	; 0x30
 8000334:	71fb      	strb	r3, [r7, #7]
	/*========Wait for more than 15 ms after Vcc rises to 4.5V========*/
	HAL_Delay(15);
 8000336:	200f      	movs	r0, #15
 8000338:	f000 fb44 	bl	80009c4 <HAL_Delay>
	/*========BF can not be checked before this instruction.========*/
	/*========Function set ( Interface is 8 bits long.========*/
	lcd1602_Send_init_Data(&tx_buffer);
 800033c:	1dfb      	adds	r3, r7, #7
 800033e:	4618      	mov	r0, r3
 8000340:	f7ff ff72 	bl	8000228 <lcd1602_Send_init_Data>
	/*========Wait for more 4.1 ms========*/
	HAL_Delay(5);
 8000344:	2005      	movs	r0, #5
 8000346:	f000 fb3d 	bl	80009c4 <HAL_Delay>
	/*========BF can not be checked before this instruction.========*/
	/*========Function set ( Interface is 8 bits long.========*/
	lcd1602_Send_init_Data(&tx_buffer);
 800034a:	1dfb      	adds	r3, r7, #7
 800034c:	4618      	mov	r0, r3
 800034e:	f7ff ff6b 	bl	8000228 <lcd1602_Send_init_Data>
	/*========Wait for more 100 microsec========*/
	HAL_Delay(1);
 8000352:	2001      	movs	r0, #1
 8000354:	f000 fb36 	bl	80009c4 <HAL_Delay>
	/*========BF can not be checked before this instruction.========*/
	/*========Function set ( Interface is 8 bits long.========*/
	lcd1602_Send_init_Data(&tx_buffer);
 8000358:	1dfb      	adds	r3, r7, #7
 800035a:	4618      	mov	r0, r3
 800035c:	f7ff ff64 	bl	8000228 <lcd1602_Send_init_Data>

	/*========Включаем 4х-битный интерфейс========*/
	tx_buffer = 0x20;
 8000360:	2320      	movs	r3, #32
 8000362:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8000364:	1dfb      	adds	r3, r7, #7
 8000366:	4618      	mov	r0, r3
 8000368:	f7ff ff5e 	bl	8000228 <lcd1602_Send_init_Data>
	/*========Включаем 4х-битный интерфейс========*/

	/*======2 строки, шрифт 5х8======*/
	tx_buffer = 0x20;
 800036c:	2320      	movs	r3, #32
 800036e:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8000370:	1dfb      	adds	r3, r7, #7
 8000372:	4618      	mov	r0, r3
 8000374:	f7ff ff58 	bl	8000228 <lcd1602_Send_init_Data>
	tx_buffer = 0x80;
 8000378:	2380      	movs	r3, #128	; 0x80
 800037a:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 800037c:	1dfb      	adds	r3, r7, #7
 800037e:	4618      	mov	r0, r3
 8000380:	f7ff ff52 	bl	8000228 <lcd1602_Send_init_Data>
	/*======2 строки, шрифт 5х8======*/

	/*========Выключить дисплей========*/
	tx_buffer = 0x00;
 8000384:	2300      	movs	r3, #0
 8000386:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8000388:	1dfb      	adds	r3, r7, #7
 800038a:	4618      	mov	r0, r3
 800038c:	f7ff ff4c 	bl	8000228 <lcd1602_Send_init_Data>
	tx_buffer = 0x80;
 8000390:	2380      	movs	r3, #128	; 0x80
 8000392:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8000394:	1dfb      	adds	r3, r7, #7
 8000396:	4618      	mov	r0, r3
 8000398:	f7ff ff46 	bl	8000228 <lcd1602_Send_init_Data>
	/*========Выключить дисплей========*/

	/*========Очистить дисплей========*/
	tx_buffer = 0x00;
 800039c:	2300      	movs	r3, #0
 800039e:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 80003a0:	1dfb      	adds	r3, r7, #7
 80003a2:	4618      	mov	r0, r3
 80003a4:	f7ff ff40 	bl	8000228 <lcd1602_Send_init_Data>
	tx_buffer = 0x10;
 80003a8:	2310      	movs	r3, #16
 80003aa:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 80003ac:	1dfb      	adds	r3, r7, #7
 80003ae:	4618      	mov	r0, r3
 80003b0:	f7ff ff3a 	bl	8000228 <lcd1602_Send_init_Data>
	/*========Очистить дисплей========*/

	/*========Режим сдвига курсора========*/
	tx_buffer = 0x00;
 80003b4:	2300      	movs	r3, #0
 80003b6:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 80003b8:	1dfb      	adds	r3, r7, #7
 80003ba:	4618      	mov	r0, r3
 80003bc:	f7ff ff34 	bl	8000228 <lcd1602_Send_init_Data>
	tx_buffer = 0x30;
 80003c0:	2330      	movs	r3, #48	; 0x30
 80003c2:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 80003c4:	1dfb      	adds	r3, r7, #7
 80003c6:	4618      	mov	r0, r3
 80003c8:	f7ff ff2e 	bl	8000228 <lcd1602_Send_init_Data>
	/*========Режим сдвига курсора========*/

	/*========Инициализация завершена. Включить дисплей========*/
	tx_buffer = 0x00;
 80003cc:	2300      	movs	r3, #0
 80003ce:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 80003d0:	1dfb      	adds	r3, r7, #7
 80003d2:	4618      	mov	r0, r3
 80003d4:	f7ff ff28 	bl	8000228 <lcd1602_Send_init_Data>
	tx_buffer = 0xC0;
 80003d8:	23c0      	movs	r3, #192	; 0xc0
 80003da:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 80003dc:	1dfb      	adds	r3, r7, #7
 80003de:	4618      	mov	r0, r3
 80003e0:	f7ff ff22 	bl	8000228 <lcd1602_Send_init_Data>
	/*========Инициализация завершена. Включить дисплей========*/
}
 80003e4:	bf00      	nop
 80003e6:	3708      	adds	r7, #8
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bd80      	pop	{r7, pc}

080003ec <lcd1602_Print_symbol>:
/*-------------------------Функция инициализации дисплея-------------------------*/

/*-------------------------Функция вывода символа на дисплей---------------------*/
/// Функция вывода символа на дисплей
/// \param* symbol - символ в кодировке utf-8
void lcd1602_Print_symbol(uint8_t symbol) {
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b084      	sub	sp, #16
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	4603      	mov	r3, r0
 80003f4:	71fb      	strb	r3, [r7, #7]
	uint8_t command;
	command = ((symbol & 0xf0) | 0x09); //Формирование верхнего полубайта в команду для дисплея
 80003f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003fa:	f023 030f 	bic.w	r3, r3, #15
 80003fe:	b25b      	sxtb	r3, r3
 8000400:	f043 0309 	orr.w	r3, r3, #9
 8000404:	b25b      	sxtb	r3, r3
 8000406:	b2db      	uxtb	r3, r3
 8000408:	73fb      	strb	r3, [r7, #15]
	lcd1602_Send_data(&command);
 800040a:	f107 030f 	add.w	r3, r7, #15
 800040e:	4618      	mov	r0, r3
 8000410:	f7ff ff4e 	bl	80002b0 <lcd1602_Send_data>
	command = ((symbol & 0x0f) << 4) | 0x09; //Формирование нижнего полубайта в команду для дисплея
 8000414:	79fb      	ldrb	r3, [r7, #7]
 8000416:	011b      	lsls	r3, r3, #4
 8000418:	b25b      	sxtb	r3, r3
 800041a:	f043 0309 	orr.w	r3, r3, #9
 800041e:	b25b      	sxtb	r3, r3
 8000420:	b2db      	uxtb	r3, r3
 8000422:	73fb      	strb	r3, [r7, #15]
	lcd1602_Send_data(&command);
 8000424:	f107 030f 	add.w	r3, r7, #15
 8000428:	4618      	mov	r0, r3
 800042a:	f7ff ff41 	bl	80002b0 <lcd1602_Send_data>
}
 800042e:	bf00      	nop
 8000430:	3710      	adds	r7, #16
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}

08000436 <lcd1602_Print_text>:

/*-------------------------Функция вывода текста на дисплей----------------------*/
/// Функция вывода символа на дисплей
/// \param *message - массив, который отправляем на дисплей.
/// Максимальная длина сообщения - 40 символов.
void lcd1602_Print_text(char *message) {
 8000436:	b580      	push	{r7, lr}
 8000438:	b084      	sub	sp, #16
 800043a:	af00      	add	r7, sp, #0
 800043c:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < strlen(message); i++) {
 800043e:	2300      	movs	r3, #0
 8000440:	60fb      	str	r3, [r7, #12]
 8000442:	e009      	b.n	8000458 <lcd1602_Print_text+0x22>
		lcd1602_Print_symbol(message[i]);
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	687a      	ldr	r2, [r7, #4]
 8000448:	4413      	add	r3, r2
 800044a:	781b      	ldrb	r3, [r3, #0]
 800044c:	4618      	mov	r0, r3
 800044e:	f7ff ffcd 	bl	80003ec <lcd1602_Print_symbol>
	for (int i = 0; i < strlen(message); i++) {
 8000452:	68fb      	ldr	r3, [r7, #12]
 8000454:	3301      	adds	r3, #1
 8000456:	60fb      	str	r3, [r7, #12]
 8000458:	6878      	ldr	r0, [r7, #4]
 800045a:	f7ff fedd 	bl	8000218 <strlen>
 800045e:	4602      	mov	r2, r0
 8000460:	68fb      	ldr	r3, [r7, #12]
 8000462:	429a      	cmp	r2, r3
 8000464:	d8ee      	bhi.n	8000444 <lcd1602_Print_text+0xe>
	}
}
 8000466:	bf00      	nop
 8000468:	bf00      	nop
 800046a:	3710      	adds	r7, #16
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}

08000470 <lcd1602_SetCursor>:
/// \param x - координата по оси x. от 0 до 39.
/// \param y - координата по оси y. от 0 до 3.
/// Видимая область:
/// Для дисплеев 1602 max x = 15, max y = 1.
/// Для дисплеев 2004 max x = 19, max y = 3.
void lcd1602_SetCursor(uint8_t x, uint8_t y) {
 8000470:	b580      	push	{r7, lr}
 8000472:	b084      	sub	sp, #16
 8000474:	af00      	add	r7, sp, #0
 8000476:	4603      	mov	r3, r0
 8000478:	460a      	mov	r2, r1
 800047a:	71fb      	strb	r3, [r7, #7]
 800047c:	4613      	mov	r3, r2
 800047e:	71bb      	strb	r3, [r7, #6]
	uint8_t command, adr;
	if (y > 3)
 8000480:	79bb      	ldrb	r3, [r7, #6]
 8000482:	2b03      	cmp	r3, #3
 8000484:	d901      	bls.n	800048a <lcd1602_SetCursor+0x1a>
		y = 3;
 8000486:	2303      	movs	r3, #3
 8000488:	71bb      	strb	r3, [r7, #6]
	if (x > 39)
 800048a:	79fb      	ldrb	r3, [r7, #7]
 800048c:	2b27      	cmp	r3, #39	; 0x27
 800048e:	d901      	bls.n	8000494 <lcd1602_SetCursor+0x24>
		x = 39;
 8000490:	2327      	movs	r3, #39	; 0x27
 8000492:	71fb      	strb	r3, [r7, #7]
	if (y == 0) {
 8000494:	79bb      	ldrb	r3, [r7, #6]
 8000496:	2b00      	cmp	r3, #0
 8000498:	d101      	bne.n	800049e <lcd1602_SetCursor+0x2e>
		adr = x;
 800049a:	79fb      	ldrb	r3, [r7, #7]
 800049c:	73fb      	strb	r3, [r7, #15]
	}
	if (y == 1) {
 800049e:	79bb      	ldrb	r3, [r7, #6]
 80004a0:	2b01      	cmp	r3, #1
 80004a2:	d102      	bne.n	80004aa <lcd1602_SetCursor+0x3a>
		adr = x + 0x40;
 80004a4:	79fb      	ldrb	r3, [r7, #7]
 80004a6:	3340      	adds	r3, #64	; 0x40
 80004a8:	73fb      	strb	r3, [r7, #15]
	}
	if (y == 2) {
 80004aa:	79bb      	ldrb	r3, [r7, #6]
 80004ac:	2b02      	cmp	r3, #2
 80004ae:	d102      	bne.n	80004b6 <lcd1602_SetCursor+0x46>
		adr = x + 0x14;
 80004b0:	79fb      	ldrb	r3, [r7, #7]
 80004b2:	3314      	adds	r3, #20
 80004b4:	73fb      	strb	r3, [r7, #15]
	}
	if (y == 3) {
 80004b6:	79bb      	ldrb	r3, [r7, #6]
 80004b8:	2b03      	cmp	r3, #3
 80004ba:	d102      	bne.n	80004c2 <lcd1602_SetCursor+0x52>
		adr = x + 0x54;
 80004bc:	79fb      	ldrb	r3, [r7, #7]
 80004be:	3354      	adds	r3, #84	; 0x54
 80004c0:	73fb      	strb	r3, [r7, #15]
	}
	command = ((adr & 0xf0) | 0x80);
 80004c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80004c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80004ca:	b25b      	sxtb	r3, r3
 80004cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80004d0:	b25b      	sxtb	r3, r3
 80004d2:	b2db      	uxtb	r3, r3
 80004d4:	73bb      	strb	r3, [r7, #14]
	lcd1602_Send_data(&command);
 80004d6:	f107 030e 	add.w	r3, r7, #14
 80004da:	4618      	mov	r0, r3
 80004dc:	f7ff fee8 	bl	80002b0 <lcd1602_Send_data>

	command = (adr << 4);
 80004e0:	7bfb      	ldrb	r3, [r7, #15]
 80004e2:	011b      	lsls	r3, r3, #4
 80004e4:	b2db      	uxtb	r3, r3
 80004e6:	73bb      	strb	r3, [r7, #14]
	lcd1602_Send_data(&command);
 80004e8:	f107 030e 	add.w	r3, r7, #14
 80004ec:	4618      	mov	r0, r3
 80004ee:	f7ff fedf 	bl	80002b0 <lcd1602_Send_data>

}
 80004f2:	bf00      	nop
 80004f4:	3710      	adds	r7, #16
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
	...

080004fc <lcd1602_Backlight>:

/*---------------------Функция включения/выключения подсветки--------------------*/
/// Булевая функция включения/выключения подсветки
/// \param state - состояние подсветки.
/// 1 - вкл. 0 - выкл.
void lcd1602_Backlight(bool state) {
 80004fc:	b480      	push	{r7}
 80004fe:	b083      	sub	sp, #12
 8000500:	af00      	add	r7, sp, #0
 8000502:	4603      	mov	r3, r0
 8000504:	71fb      	strb	r3, [r7, #7]
	if (state) {
 8000506:	79fb      	ldrb	r3, [r7, #7]
 8000508:	2b00      	cmp	r3, #0
 800050a:	d003      	beq.n	8000514 <lcd1602_Backlight+0x18>
		backlight = true;
 800050c:	4b06      	ldr	r3, [pc, #24]	; (8000528 <lcd1602_Backlight+0x2c>)
 800050e:	2201      	movs	r2, #1
 8000510:	701a      	strb	r2, [r3, #0]
	} else {
		backlight = false;
	}
}
 8000512:	e002      	b.n	800051a <lcd1602_Backlight+0x1e>
		backlight = false;
 8000514:	4b04      	ldr	r3, [pc, #16]	; (8000528 <lcd1602_Backlight+0x2c>)
 8000516:	2200      	movs	r2, #0
 8000518:	701a      	strb	r2, [r3, #0]
}
 800051a:	bf00      	nop
 800051c:	370c      	adds	r7, #12
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop
 8000528:	20000000 	.word	0x20000000

0800052c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000530:	f000 f9d7 	bl	80008e2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000534:	f000 f816 	bl	8000564 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000538:	f000 f89e 	bl	8000678 <MX_GPIO_Init>
  MX_I2C2_Init();
 800053c:	f000 f85c 	bl	80005f8 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(100);
 8000540:	2064      	movs	r0, #100	; 0x64
 8000542:	f000 fa3f 	bl	80009c4 <HAL_Delay>
  lcd1602_Init();
 8000546:	f7ff fef1 	bl	800032c <lcd1602_Init>
  lcd1602_Backlight(1);
 800054a:	2001      	movs	r0, #1
 800054c:	f7ff ffd6 	bl	80004fc <lcd1602_Backlight>
  lcd1602_SetCursor(0,0);
 8000550:	2100      	movs	r1, #0
 8000552:	2000      	movs	r0, #0
 8000554:	f7ff ff8c 	bl	8000470 <lcd1602_SetCursor>
  lcd1602_Print_text("Allahu akbar");
 8000558:	4801      	ldr	r0, [pc, #4]	; (8000560 <main+0x34>)
 800055a:	f7ff ff6c 	bl	8000436 <lcd1602_Print_text>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800055e:	e7fe      	b.n	800055e <main+0x32>
 8000560:	08002800 	.word	0x08002800

08000564 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b094      	sub	sp, #80	; 0x50
 8000568:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056a:	f107 0318 	add.w	r3, r7, #24
 800056e:	2238      	movs	r2, #56	; 0x38
 8000570:	2100      	movs	r1, #0
 8000572:	4618      	mov	r0, r3
 8000574:	f002 f90c 	bl	8002790 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000578:	1d3b      	adds	r3, r7, #4
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
 800057e:	605a      	str	r2, [r3, #4]
 8000580:	609a      	str	r2, [r3, #8]
 8000582:	60da      	str	r2, [r3, #12]
 8000584:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000586:	2000      	movs	r0, #0
 8000588:	f001 f90a 	bl	80017a0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800058c:	2301      	movs	r3, #1
 800058e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000590:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000594:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000596:	2302      	movs	r3, #2
 8000598:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800059a:	2303      	movs	r3, #3
 800059c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 800059e:	2306      	movs	r3, #6
 80005a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80005a2:	2355      	movs	r3, #85	; 0x55
 80005a4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005a6:	2302      	movs	r3, #2
 80005a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005aa:	2302      	movs	r3, #2
 80005ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005ae:	2302      	movs	r3, #2
 80005b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b2:	f107 0318 	add.w	r3, r7, #24
 80005b6:	4618      	mov	r0, r3
 80005b8:	f001 f9a6 	bl	8001908 <HAL_RCC_OscConfig>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80005c2:	f000 f889 	bl	80006d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c6:	230f      	movs	r3, #15
 80005c8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ca:	2303      	movs	r3, #3
 80005cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ce:	2300      	movs	r3, #0
 80005d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005d2:	2300      	movs	r3, #0
 80005d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d6:	2300      	movs	r3, #0
 80005d8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005da:	1d3b      	adds	r3, r7, #4
 80005dc:	2104      	movs	r1, #4
 80005de:	4618      	mov	r0, r3
 80005e0:	f001 fca4 	bl	8001f2c <HAL_RCC_ClockConfig>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80005ea:	f000 f875 	bl	80006d8 <Error_Handler>
  }
}
 80005ee:	bf00      	nop
 80005f0:	3750      	adds	r7, #80	; 0x50
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
	...

080005f8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80005fc:	4b1b      	ldr	r3, [pc, #108]	; (800066c <MX_I2C2_Init+0x74>)
 80005fe:	4a1c      	ldr	r2, [pc, #112]	; (8000670 <MX_I2C2_Init+0x78>)
 8000600:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30A0A7FB;
 8000602:	4b1a      	ldr	r3, [pc, #104]	; (800066c <MX_I2C2_Init+0x74>)
 8000604:	4a1b      	ldr	r2, [pc, #108]	; (8000674 <MX_I2C2_Init+0x7c>)
 8000606:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000608:	4b18      	ldr	r3, [pc, #96]	; (800066c <MX_I2C2_Init+0x74>)
 800060a:	2200      	movs	r2, #0
 800060c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800060e:	4b17      	ldr	r3, [pc, #92]	; (800066c <MX_I2C2_Init+0x74>)
 8000610:	2201      	movs	r2, #1
 8000612:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000614:	4b15      	ldr	r3, [pc, #84]	; (800066c <MX_I2C2_Init+0x74>)
 8000616:	2200      	movs	r2, #0
 8000618:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800061a:	4b14      	ldr	r3, [pc, #80]	; (800066c <MX_I2C2_Init+0x74>)
 800061c:	2200      	movs	r2, #0
 800061e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000620:	4b12      	ldr	r3, [pc, #72]	; (800066c <MX_I2C2_Init+0x74>)
 8000622:	2200      	movs	r2, #0
 8000624:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000626:	4b11      	ldr	r3, [pc, #68]	; (800066c <MX_I2C2_Init+0x74>)
 8000628:	2200      	movs	r2, #0
 800062a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800062c:	4b0f      	ldr	r3, [pc, #60]	; (800066c <MX_I2C2_Init+0x74>)
 800062e:	2200      	movs	r2, #0
 8000630:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000632:	480e      	ldr	r0, [pc, #56]	; (800066c <MX_I2C2_Init+0x74>)
 8000634:	f000 fc4e 	bl	8000ed4 <HAL_I2C_Init>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800063e:	f000 f84b 	bl	80006d8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000642:	2100      	movs	r1, #0
 8000644:	4809      	ldr	r0, [pc, #36]	; (800066c <MX_I2C2_Init+0x74>)
 8000646:	f001 f813 	bl	8001670 <HAL_I2CEx_ConfigAnalogFilter>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000650:	f000 f842 	bl	80006d8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000654:	2100      	movs	r1, #0
 8000656:	4805      	ldr	r0, [pc, #20]	; (800066c <MX_I2C2_Init+0x74>)
 8000658:	f001 f855 	bl	8001706 <HAL_I2CEx_ConfigDigitalFilter>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000662:	f000 f839 	bl	80006d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000666:	bf00      	nop
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	2000002c 	.word	0x2000002c
 8000670:	40005800 	.word	0x40005800
 8000674:	30a0a7fb 	.word	0x30a0a7fb

08000678 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000678:	b480      	push	{r7}
 800067a:	b085      	sub	sp, #20
 800067c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800067e:	4b15      	ldr	r3, [pc, #84]	; (80006d4 <MX_GPIO_Init+0x5c>)
 8000680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000682:	4a14      	ldr	r2, [pc, #80]	; (80006d4 <MX_GPIO_Init+0x5c>)
 8000684:	f043 0320 	orr.w	r3, r3, #32
 8000688:	64d3      	str	r3, [r2, #76]	; 0x4c
 800068a:	4b12      	ldr	r3, [pc, #72]	; (80006d4 <MX_GPIO_Init+0x5c>)
 800068c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800068e:	f003 0320 	and.w	r3, r3, #32
 8000692:	60fb      	str	r3, [r7, #12]
 8000694:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000696:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <MX_GPIO_Init+0x5c>)
 8000698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069a:	4a0e      	ldr	r2, [pc, #56]	; (80006d4 <MX_GPIO_Init+0x5c>)
 800069c:	f043 0304 	orr.w	r3, r3, #4
 80006a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006a2:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <MX_GPIO_Init+0x5c>)
 80006a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006a6:	f003 0304 	and.w	r3, r3, #4
 80006aa:	60bb      	str	r3, [r7, #8]
 80006ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ae:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <MX_GPIO_Init+0x5c>)
 80006b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b2:	4a08      	ldr	r2, [pc, #32]	; (80006d4 <MX_GPIO_Init+0x5c>)
 80006b4:	f043 0301 	orr.w	r3, r3, #1
 80006b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ba:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <MX_GPIO_Init+0x5c>)
 80006bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006be:	f003 0301 	and.w	r3, r3, #1
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006c6:	bf00      	nop
 80006c8:	3714      	adds	r7, #20
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	40021000 	.word	0x40021000

080006d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006dc:	b672      	cpsid	i
}
 80006de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006e0:	e7fe      	b.n	80006e0 <Error_Handler+0x8>
	...

080006e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ea:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <HAL_MspInit+0x44>)
 80006ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006ee:	4a0e      	ldr	r2, [pc, #56]	; (8000728 <HAL_MspInit+0x44>)
 80006f0:	f043 0301 	orr.w	r3, r3, #1
 80006f4:	6613      	str	r3, [r2, #96]	; 0x60
 80006f6:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <HAL_MspInit+0x44>)
 80006f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006fa:	f003 0301 	and.w	r3, r3, #1
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000702:	4b09      	ldr	r3, [pc, #36]	; (8000728 <HAL_MspInit+0x44>)
 8000704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000706:	4a08      	ldr	r2, [pc, #32]	; (8000728 <HAL_MspInit+0x44>)
 8000708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800070c:	6593      	str	r3, [r2, #88]	; 0x58
 800070e:	4b06      	ldr	r3, [pc, #24]	; (8000728 <HAL_MspInit+0x44>)
 8000710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000716:	603b      	str	r3, [r7, #0]
 8000718:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800071a:	f001 f8e5 	bl	80018e8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800071e:	bf00      	nop
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40021000 	.word	0x40021000

0800072c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b0a0      	sub	sp, #128	; 0x80
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000734:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]
 8000742:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000744:	f107 0318 	add.w	r3, r7, #24
 8000748:	2254      	movs	r2, #84	; 0x54
 800074a:	2100      	movs	r1, #0
 800074c:	4618      	mov	r0, r3
 800074e:	f002 f81f 	bl	8002790 <memset>
  if(hi2c->Instance==I2C2)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	4a2d      	ldr	r2, [pc, #180]	; (800080c <HAL_I2C_MspInit+0xe0>)
 8000758:	4293      	cmp	r3, r2
 800075a:	d153      	bne.n	8000804 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800075c:	2380      	movs	r3, #128	; 0x80
 800075e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000760:	2300      	movs	r3, #0
 8000762:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000764:	f107 0318 	add.w	r3, r7, #24
 8000768:	4618      	mov	r0, r3
 800076a:	f001 fdc3 	bl	80022f4 <HAL_RCCEx_PeriphCLKConfig>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000774:	f7ff ffb0 	bl	80006d8 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000778:	4b25      	ldr	r3, [pc, #148]	; (8000810 <HAL_I2C_MspInit+0xe4>)
 800077a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077c:	4a24      	ldr	r2, [pc, #144]	; (8000810 <HAL_I2C_MspInit+0xe4>)
 800077e:	f043 0304 	orr.w	r3, r3, #4
 8000782:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000784:	4b22      	ldr	r3, [pc, #136]	; (8000810 <HAL_I2C_MspInit+0xe4>)
 8000786:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000788:	f003 0304 	and.w	r3, r3, #4
 800078c:	617b      	str	r3, [r7, #20]
 800078e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000790:	4b1f      	ldr	r3, [pc, #124]	; (8000810 <HAL_I2C_MspInit+0xe4>)
 8000792:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000794:	4a1e      	ldr	r2, [pc, #120]	; (8000810 <HAL_I2C_MspInit+0xe4>)
 8000796:	f043 0301 	orr.w	r3, r3, #1
 800079a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800079c:	4b1c      	ldr	r3, [pc, #112]	; (8000810 <HAL_I2C_MspInit+0xe4>)
 800079e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a0:	f003 0301 	and.w	r3, r3, #1
 80007a4:	613b      	str	r3, [r7, #16]
 80007a6:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PC4     ------> I2C2_SCL
    PA8     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80007a8:	2310      	movs	r3, #16
 80007aa:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007ac:	2312      	movs	r3, #18
 80007ae:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b0:	2300      	movs	r3, #0
 80007b2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b4:	2300      	movs	r3, #0
 80007b6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80007b8:	2304      	movs	r3, #4
 80007ba:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007bc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80007c0:	4619      	mov	r1, r3
 80007c2:	4814      	ldr	r0, [pc, #80]	; (8000814 <HAL_I2C_MspInit+0xe8>)
 80007c4:	f000 fa04 	bl	8000bd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80007c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007cc:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007ce:	2312      	movs	r3, #18
 80007d0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d2:	2300      	movs	r3, #0
 80007d4:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d6:	2300      	movs	r3, #0
 80007d8:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80007da:	2304      	movs	r3, #4
 80007dc:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007de:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80007e2:	4619      	mov	r1, r3
 80007e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007e8:	f000 f9f2 	bl	8000bd0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80007ec:	4b08      	ldr	r3, [pc, #32]	; (8000810 <HAL_I2C_MspInit+0xe4>)
 80007ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007f0:	4a07      	ldr	r2, [pc, #28]	; (8000810 <HAL_I2C_MspInit+0xe4>)
 80007f2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007f6:	6593      	str	r3, [r2, #88]	; 0x58
 80007f8:	4b05      	ldr	r3, [pc, #20]	; (8000810 <HAL_I2C_MspInit+0xe4>)
 80007fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000800:	60fb      	str	r3, [r7, #12]
 8000802:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000804:	bf00      	nop
 8000806:	3780      	adds	r7, #128	; 0x80
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	40005800 	.word	0x40005800
 8000810:	40021000 	.word	0x40021000
 8000814:	48000800 	.word	0x48000800

08000818 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800081c:	e7fe      	b.n	800081c <NMI_Handler+0x4>

0800081e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800081e:	b480      	push	{r7}
 8000820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000822:	e7fe      	b.n	8000822 <HardFault_Handler+0x4>

08000824 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000828:	e7fe      	b.n	8000828 <MemManage_Handler+0x4>

0800082a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800082a:	b480      	push	{r7}
 800082c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800082e:	e7fe      	b.n	800082e <BusFault_Handler+0x4>

08000830 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000834:	e7fe      	b.n	8000834 <UsageFault_Handler+0x4>

08000836 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000836:	b480      	push	{r7}
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800083a:	bf00      	nop
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr

08000844 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr

08000852 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000852:	b480      	push	{r7}
 8000854:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000856:	bf00      	nop
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr

08000860 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000864:	f000 f890 	bl	8000988 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000868:	bf00      	nop
 800086a:	bd80      	pop	{r7, pc}

0800086c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000870:	4b06      	ldr	r3, [pc, #24]	; (800088c <SystemInit+0x20>)
 8000872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000876:	4a05      	ldr	r2, [pc, #20]	; (800088c <SystemInit+0x20>)
 8000878:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800087c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000880:	bf00      	nop
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	e000ed00 	.word	0xe000ed00

08000890 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000890:	480d      	ldr	r0, [pc, #52]	; (80008c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000892:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000894:	f7ff ffea 	bl	800086c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000898:	480c      	ldr	r0, [pc, #48]	; (80008cc <LoopForever+0x6>)
  ldr r1, =_edata
 800089a:	490d      	ldr	r1, [pc, #52]	; (80008d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800089c:	4a0d      	ldr	r2, [pc, #52]	; (80008d4 <LoopForever+0xe>)
  movs r3, #0
 800089e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80008a0:	e002      	b.n	80008a8 <LoopCopyDataInit>

080008a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008a6:	3304      	adds	r3, #4

080008a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008ac:	d3f9      	bcc.n	80008a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ae:	4a0a      	ldr	r2, [pc, #40]	; (80008d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008b0:	4c0a      	ldr	r4, [pc, #40]	; (80008dc <LoopForever+0x16>)
  movs r3, #0
 80008b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008b4:	e001      	b.n	80008ba <LoopFillZerobss>

080008b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008b8:	3204      	adds	r2, #4

080008ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008bc:	d3fb      	bcc.n	80008b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008be:	f001 ff6f 	bl	80027a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008c2:	f7ff fe33 	bl	800052c <main>

080008c6 <LoopForever>:

LoopForever:
    b LoopForever
 80008c6:	e7fe      	b.n	80008c6 <LoopForever>
  ldr   r0, =_estack
 80008c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008d0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80008d4:	08002828 	.word	0x08002828
  ldr r2, =_sbss
 80008d8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80008dc:	20000084 	.word	0x20000084

080008e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008e0:	e7fe      	b.n	80008e0 <ADC1_2_IRQHandler>

080008e2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008e2:	b580      	push	{r7, lr}
 80008e4:	b082      	sub	sp, #8
 80008e6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008e8:	2300      	movs	r3, #0
 80008ea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008ec:	2003      	movs	r0, #3
 80008ee:	f000 f93d 	bl	8000b6c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008f2:	200f      	movs	r0, #15
 80008f4:	f000 f80e 	bl	8000914 <HAL_InitTick>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d002      	beq.n	8000904 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80008fe:	2301      	movs	r3, #1
 8000900:	71fb      	strb	r3, [r7, #7]
 8000902:	e001      	b.n	8000908 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000904:	f7ff feee 	bl	80006e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000908:	79fb      	ldrb	r3, [r7, #7]

}
 800090a:	4618      	mov	r0, r3
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
	...

08000914 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800091c:	2300      	movs	r3, #0
 800091e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000920:	4b16      	ldr	r3, [pc, #88]	; (800097c <HAL_InitTick+0x68>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d022      	beq.n	800096e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000928:	4b15      	ldr	r3, [pc, #84]	; (8000980 <HAL_InitTick+0x6c>)
 800092a:	681a      	ldr	r2, [r3, #0]
 800092c:	4b13      	ldr	r3, [pc, #76]	; (800097c <HAL_InitTick+0x68>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000934:	fbb1 f3f3 	udiv	r3, r1, r3
 8000938:	fbb2 f3f3 	udiv	r3, r2, r3
 800093c:	4618      	mov	r0, r3
 800093e:	f000 f93a 	bl	8000bb6 <HAL_SYSTICK_Config>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d10f      	bne.n	8000968 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	2b0f      	cmp	r3, #15
 800094c:	d809      	bhi.n	8000962 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800094e:	2200      	movs	r2, #0
 8000950:	6879      	ldr	r1, [r7, #4]
 8000952:	f04f 30ff 	mov.w	r0, #4294967295
 8000956:	f000 f914 	bl	8000b82 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800095a:	4a0a      	ldr	r2, [pc, #40]	; (8000984 <HAL_InitTick+0x70>)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	6013      	str	r3, [r2, #0]
 8000960:	e007      	b.n	8000972 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000962:	2301      	movs	r3, #1
 8000964:	73fb      	strb	r3, [r7, #15]
 8000966:	e004      	b.n	8000972 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000968:	2301      	movs	r3, #1
 800096a:	73fb      	strb	r3, [r7, #15]
 800096c:	e001      	b.n	8000972 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800096e:	2301      	movs	r3, #1
 8000970:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000972:	7bfb      	ldrb	r3, [r7, #15]
}
 8000974:	4618      	mov	r0, r3
 8000976:	3710      	adds	r7, #16
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	2000000c 	.word	0x2000000c
 8000980:	20000004 	.word	0x20000004
 8000984:	20000008 	.word	0x20000008

08000988 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800098c:	4b05      	ldr	r3, [pc, #20]	; (80009a4 <HAL_IncTick+0x1c>)
 800098e:	681a      	ldr	r2, [r3, #0]
 8000990:	4b05      	ldr	r3, [pc, #20]	; (80009a8 <HAL_IncTick+0x20>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4413      	add	r3, r2
 8000996:	4a03      	ldr	r2, [pc, #12]	; (80009a4 <HAL_IncTick+0x1c>)
 8000998:	6013      	str	r3, [r2, #0]
}
 800099a:	bf00      	nop
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr
 80009a4:	20000080 	.word	0x20000080
 80009a8:	2000000c 	.word	0x2000000c

080009ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  return uwTick;
 80009b0:	4b03      	ldr	r3, [pc, #12]	; (80009c0 <HAL_GetTick+0x14>)
 80009b2:	681b      	ldr	r3, [r3, #0]
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	20000080 	.word	0x20000080

080009c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b084      	sub	sp, #16
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009cc:	f7ff ffee 	bl	80009ac <HAL_GetTick>
 80009d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009dc:	d004      	beq.n	80009e8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80009de:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <HAL_Delay+0x40>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	68fa      	ldr	r2, [r7, #12]
 80009e4:	4413      	add	r3, r2
 80009e6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009e8:	bf00      	nop
 80009ea:	f7ff ffdf 	bl	80009ac <HAL_GetTick>
 80009ee:	4602      	mov	r2, r0
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	1ad3      	subs	r3, r2, r3
 80009f4:	68fa      	ldr	r2, [r7, #12]
 80009f6:	429a      	cmp	r2, r3
 80009f8:	d8f7      	bhi.n	80009ea <HAL_Delay+0x26>
  {
  }
}
 80009fa:	bf00      	nop
 80009fc:	bf00      	nop
 80009fe:	3710      	adds	r7, #16
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	2000000c 	.word	0x2000000c

08000a08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b085      	sub	sp, #20
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	f003 0307 	and.w	r3, r3, #7
 8000a16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a18:	4b0c      	ldr	r3, [pc, #48]	; (8000a4c <__NVIC_SetPriorityGrouping+0x44>)
 8000a1a:	68db      	ldr	r3, [r3, #12]
 8000a1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a1e:	68ba      	ldr	r2, [r7, #8]
 8000a20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a24:	4013      	ands	r3, r2
 8000a26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a2c:	68bb      	ldr	r3, [r7, #8]
 8000a2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a3a:	4a04      	ldr	r2, [pc, #16]	; (8000a4c <__NVIC_SetPriorityGrouping+0x44>)
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	60d3      	str	r3, [r2, #12]
}
 8000a40:	bf00      	nop
 8000a42:	3714      	adds	r7, #20
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr
 8000a4c:	e000ed00 	.word	0xe000ed00

08000a50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a54:	4b04      	ldr	r3, [pc, #16]	; (8000a68 <__NVIC_GetPriorityGrouping+0x18>)
 8000a56:	68db      	ldr	r3, [r3, #12]
 8000a58:	0a1b      	lsrs	r3, r3, #8
 8000a5a:	f003 0307 	and.w	r3, r3, #7
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr
 8000a68:	e000ed00 	.word	0xe000ed00

08000a6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4603      	mov	r3, r0
 8000a74:	6039      	str	r1, [r7, #0]
 8000a76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	db0a      	blt.n	8000a96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	b2da      	uxtb	r2, r3
 8000a84:	490c      	ldr	r1, [pc, #48]	; (8000ab8 <__NVIC_SetPriority+0x4c>)
 8000a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8a:	0112      	lsls	r2, r2, #4
 8000a8c:	b2d2      	uxtb	r2, r2
 8000a8e:	440b      	add	r3, r1
 8000a90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a94:	e00a      	b.n	8000aac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	b2da      	uxtb	r2, r3
 8000a9a:	4908      	ldr	r1, [pc, #32]	; (8000abc <__NVIC_SetPriority+0x50>)
 8000a9c:	79fb      	ldrb	r3, [r7, #7]
 8000a9e:	f003 030f 	and.w	r3, r3, #15
 8000aa2:	3b04      	subs	r3, #4
 8000aa4:	0112      	lsls	r2, r2, #4
 8000aa6:	b2d2      	uxtb	r2, r2
 8000aa8:	440b      	add	r3, r1
 8000aaa:	761a      	strb	r2, [r3, #24]
}
 8000aac:	bf00      	nop
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr
 8000ab8:	e000e100 	.word	0xe000e100
 8000abc:	e000ed00 	.word	0xe000ed00

08000ac0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b089      	sub	sp, #36	; 0x24
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	60f8      	str	r0, [r7, #12]
 8000ac8:	60b9      	str	r1, [r7, #8]
 8000aca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	f003 0307 	and.w	r3, r3, #7
 8000ad2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ad4:	69fb      	ldr	r3, [r7, #28]
 8000ad6:	f1c3 0307 	rsb	r3, r3, #7
 8000ada:	2b04      	cmp	r3, #4
 8000adc:	bf28      	it	cs
 8000ade:	2304      	movcs	r3, #4
 8000ae0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ae2:	69fb      	ldr	r3, [r7, #28]
 8000ae4:	3304      	adds	r3, #4
 8000ae6:	2b06      	cmp	r3, #6
 8000ae8:	d902      	bls.n	8000af0 <NVIC_EncodePriority+0x30>
 8000aea:	69fb      	ldr	r3, [r7, #28]
 8000aec:	3b03      	subs	r3, #3
 8000aee:	e000      	b.n	8000af2 <NVIC_EncodePriority+0x32>
 8000af0:	2300      	movs	r3, #0
 8000af2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af4:	f04f 32ff 	mov.w	r2, #4294967295
 8000af8:	69bb      	ldr	r3, [r7, #24]
 8000afa:	fa02 f303 	lsl.w	r3, r2, r3
 8000afe:	43da      	mvns	r2, r3
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	401a      	ands	r2, r3
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b08:	f04f 31ff 	mov.w	r1, #4294967295
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b12:	43d9      	mvns	r1, r3
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b18:	4313      	orrs	r3, r2
         );
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3724      	adds	r7, #36	; 0x24
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
	...

08000b28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	3b01      	subs	r3, #1
 8000b34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b38:	d301      	bcc.n	8000b3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	e00f      	b.n	8000b5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b3e:	4a0a      	ldr	r2, [pc, #40]	; (8000b68 <SysTick_Config+0x40>)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	3b01      	subs	r3, #1
 8000b44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b46:	210f      	movs	r1, #15
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4c:	f7ff ff8e 	bl	8000a6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b50:	4b05      	ldr	r3, [pc, #20]	; (8000b68 <SysTick_Config+0x40>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b56:	4b04      	ldr	r3, [pc, #16]	; (8000b68 <SysTick_Config+0x40>)
 8000b58:	2207      	movs	r2, #7
 8000b5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b5c:	2300      	movs	r3, #0
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	e000e010 	.word	0xe000e010

08000b6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b74:	6878      	ldr	r0, [r7, #4]
 8000b76:	f7ff ff47 	bl	8000a08 <__NVIC_SetPriorityGrouping>
}
 8000b7a:	bf00      	nop
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}

08000b82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b82:	b580      	push	{r7, lr}
 8000b84:	b086      	sub	sp, #24
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	4603      	mov	r3, r0
 8000b8a:	60b9      	str	r1, [r7, #8]
 8000b8c:	607a      	str	r2, [r7, #4]
 8000b8e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b90:	f7ff ff5e 	bl	8000a50 <__NVIC_GetPriorityGrouping>
 8000b94:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b96:	687a      	ldr	r2, [r7, #4]
 8000b98:	68b9      	ldr	r1, [r7, #8]
 8000b9a:	6978      	ldr	r0, [r7, #20]
 8000b9c:	f7ff ff90 	bl	8000ac0 <NVIC_EncodePriority>
 8000ba0:	4602      	mov	r2, r0
 8000ba2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ba6:	4611      	mov	r1, r2
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f7ff ff5f 	bl	8000a6c <__NVIC_SetPriority>
}
 8000bae:	bf00      	nop
 8000bb0:	3718      	adds	r7, #24
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	b082      	sub	sp, #8
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bbe:	6878      	ldr	r0, [r7, #4]
 8000bc0:	f7ff ffb2 	bl	8000b28 <SysTick_Config>
 8000bc4:	4603      	mov	r3, r0
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
	...

08000bd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b087      	sub	sp, #28
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000bde:	e15a      	b.n	8000e96 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	2101      	movs	r1, #1
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bec:	4013      	ands	r3, r2
 8000bee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	f000 814c 	beq.w	8000e90 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	f003 0303 	and.w	r3, r3, #3
 8000c00:	2b01      	cmp	r3, #1
 8000c02:	d005      	beq.n	8000c10 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c0c:	2b02      	cmp	r3, #2
 8000c0e:	d130      	bne.n	8000c72 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	689b      	ldr	r3, [r3, #8]
 8000c14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	2203      	movs	r2, #3
 8000c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c20:	43db      	mvns	r3, r3
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	4013      	ands	r3, r2
 8000c26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	68da      	ldr	r2, [r3, #12]
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	005b      	lsls	r3, r3, #1
 8000c30:	fa02 f303 	lsl.w	r3, r2, r3
 8000c34:	693a      	ldr	r2, [r7, #16]
 8000c36:	4313      	orrs	r3, r2
 8000c38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	693a      	ldr	r2, [r7, #16]
 8000c3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c46:	2201      	movs	r2, #1
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4e:	43db      	mvns	r3, r3
 8000c50:	693a      	ldr	r2, [r7, #16]
 8000c52:	4013      	ands	r3, r2
 8000c54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	091b      	lsrs	r3, r3, #4
 8000c5c:	f003 0201 	and.w	r2, r3, #1
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	fa02 f303 	lsl.w	r3, r2, r3
 8000c66:	693a      	ldr	r2, [r7, #16]
 8000c68:	4313      	orrs	r3, r2
 8000c6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	693a      	ldr	r2, [r7, #16]
 8000c70:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	f003 0303 	and.w	r3, r3, #3
 8000c7a:	2b03      	cmp	r3, #3
 8000c7c:	d017      	beq.n	8000cae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	68db      	ldr	r3, [r3, #12]
 8000c82:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	005b      	lsls	r3, r3, #1
 8000c88:	2203      	movs	r2, #3
 8000c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8e:	43db      	mvns	r3, r3
 8000c90:	693a      	ldr	r2, [r7, #16]
 8000c92:	4013      	ands	r3, r2
 8000c94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	689a      	ldr	r2, [r3, #8]
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	005b      	lsls	r3, r3, #1
 8000c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	f003 0303 	and.w	r3, r3, #3
 8000cb6:	2b02      	cmp	r3, #2
 8000cb8:	d123      	bne.n	8000d02 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	08da      	lsrs	r2, r3, #3
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	3208      	adds	r2, #8
 8000cc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cc6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	f003 0307 	and.w	r3, r3, #7
 8000cce:	009b      	lsls	r3, r3, #2
 8000cd0:	220f      	movs	r2, #15
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	43db      	mvns	r3, r3
 8000cd8:	693a      	ldr	r2, [r7, #16]
 8000cda:	4013      	ands	r3, r2
 8000cdc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	691a      	ldr	r2, [r3, #16]
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	f003 0307 	and.w	r3, r3, #7
 8000ce8:	009b      	lsls	r3, r3, #2
 8000cea:	fa02 f303 	lsl.w	r3, r2, r3
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	08da      	lsrs	r2, r3, #3
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	3208      	adds	r2, #8
 8000cfc:	6939      	ldr	r1, [r7, #16]
 8000cfe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	005b      	lsls	r3, r3, #1
 8000d0c:	2203      	movs	r2, #3
 8000d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d12:	43db      	mvns	r3, r3
 8000d14:	693a      	ldr	r2, [r7, #16]
 8000d16:	4013      	ands	r3, r2
 8000d18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	f003 0203 	and.w	r2, r3, #3
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2a:	693a      	ldr	r2, [r7, #16]
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	693a      	ldr	r2, [r7, #16]
 8000d34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	f000 80a6 	beq.w	8000e90 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d44:	4b5b      	ldr	r3, [pc, #364]	; (8000eb4 <HAL_GPIO_Init+0x2e4>)
 8000d46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d48:	4a5a      	ldr	r2, [pc, #360]	; (8000eb4 <HAL_GPIO_Init+0x2e4>)
 8000d4a:	f043 0301 	orr.w	r3, r3, #1
 8000d4e:	6613      	str	r3, [r2, #96]	; 0x60
 8000d50:	4b58      	ldr	r3, [pc, #352]	; (8000eb4 <HAL_GPIO_Init+0x2e4>)
 8000d52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d54:	f003 0301 	and.w	r3, r3, #1
 8000d58:	60bb      	str	r3, [r7, #8]
 8000d5a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d5c:	4a56      	ldr	r2, [pc, #344]	; (8000eb8 <HAL_GPIO_Init+0x2e8>)
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	089b      	lsrs	r3, r3, #2
 8000d62:	3302      	adds	r3, #2
 8000d64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d68:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	f003 0303 	and.w	r3, r3, #3
 8000d70:	009b      	lsls	r3, r3, #2
 8000d72:	220f      	movs	r2, #15
 8000d74:	fa02 f303 	lsl.w	r3, r2, r3
 8000d78:	43db      	mvns	r3, r3
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d86:	d01f      	beq.n	8000dc8 <HAL_GPIO_Init+0x1f8>
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	4a4c      	ldr	r2, [pc, #304]	; (8000ebc <HAL_GPIO_Init+0x2ec>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d019      	beq.n	8000dc4 <HAL_GPIO_Init+0x1f4>
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	4a4b      	ldr	r2, [pc, #300]	; (8000ec0 <HAL_GPIO_Init+0x2f0>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d013      	beq.n	8000dc0 <HAL_GPIO_Init+0x1f0>
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	4a4a      	ldr	r2, [pc, #296]	; (8000ec4 <HAL_GPIO_Init+0x2f4>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d00d      	beq.n	8000dbc <HAL_GPIO_Init+0x1ec>
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	4a49      	ldr	r2, [pc, #292]	; (8000ec8 <HAL_GPIO_Init+0x2f8>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d007      	beq.n	8000db8 <HAL_GPIO_Init+0x1e8>
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	4a48      	ldr	r2, [pc, #288]	; (8000ecc <HAL_GPIO_Init+0x2fc>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d101      	bne.n	8000db4 <HAL_GPIO_Init+0x1e4>
 8000db0:	2305      	movs	r3, #5
 8000db2:	e00a      	b.n	8000dca <HAL_GPIO_Init+0x1fa>
 8000db4:	2306      	movs	r3, #6
 8000db6:	e008      	b.n	8000dca <HAL_GPIO_Init+0x1fa>
 8000db8:	2304      	movs	r3, #4
 8000dba:	e006      	b.n	8000dca <HAL_GPIO_Init+0x1fa>
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	e004      	b.n	8000dca <HAL_GPIO_Init+0x1fa>
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	e002      	b.n	8000dca <HAL_GPIO_Init+0x1fa>
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	e000      	b.n	8000dca <HAL_GPIO_Init+0x1fa>
 8000dc8:	2300      	movs	r3, #0
 8000dca:	697a      	ldr	r2, [r7, #20]
 8000dcc:	f002 0203 	and.w	r2, r2, #3
 8000dd0:	0092      	lsls	r2, r2, #2
 8000dd2:	4093      	lsls	r3, r2
 8000dd4:	693a      	ldr	r2, [r7, #16]
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000dda:	4937      	ldr	r1, [pc, #220]	; (8000eb8 <HAL_GPIO_Init+0x2e8>)
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	089b      	lsrs	r3, r3, #2
 8000de0:	3302      	adds	r3, #2
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000de8:	4b39      	ldr	r3, [pc, #228]	; (8000ed0 <HAL_GPIO_Init+0x300>)
 8000dea:	689b      	ldr	r3, [r3, #8]
 8000dec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	43db      	mvns	r3, r3
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	4013      	ands	r3, r2
 8000df6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d003      	beq.n	8000e0c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000e04:	693a      	ldr	r2, [r7, #16]
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e0c:	4a30      	ldr	r2, [pc, #192]	; (8000ed0 <HAL_GPIO_Init+0x300>)
 8000e0e:	693b      	ldr	r3, [r7, #16]
 8000e10:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000e12:	4b2f      	ldr	r3, [pc, #188]	; (8000ed0 <HAL_GPIO_Init+0x300>)
 8000e14:	68db      	ldr	r3, [r3, #12]
 8000e16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	43db      	mvns	r3, r3
 8000e1c:	693a      	ldr	r2, [r7, #16]
 8000e1e:	4013      	ands	r3, r2
 8000e20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d003      	beq.n	8000e36 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	4313      	orrs	r3, r2
 8000e34:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e36:	4a26      	ldr	r2, [pc, #152]	; (8000ed0 <HAL_GPIO_Init+0x300>)
 8000e38:	693b      	ldr	r3, [r7, #16]
 8000e3a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000e3c:	4b24      	ldr	r3, [pc, #144]	; (8000ed0 <HAL_GPIO_Init+0x300>)
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	43db      	mvns	r3, r3
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d003      	beq.n	8000e60 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000e58:	693a      	ldr	r2, [r7, #16]
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e60:	4a1b      	ldr	r2, [pc, #108]	; (8000ed0 <HAL_GPIO_Init+0x300>)
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000e66:	4b1a      	ldr	r3, [pc, #104]	; (8000ed0 <HAL_GPIO_Init+0x300>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	43db      	mvns	r3, r3
 8000e70:	693a      	ldr	r2, [r7, #16]
 8000e72:	4013      	ands	r3, r2
 8000e74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d003      	beq.n	8000e8a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e8a:	4a11      	ldr	r2, [pc, #68]	; (8000ed0 <HAL_GPIO_Init+0x300>)
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	3301      	adds	r3, #1
 8000e94:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	fa22 f303 	lsr.w	r3, r2, r3
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	f47f ae9d 	bne.w	8000be0 <HAL_GPIO_Init+0x10>
  }
}
 8000ea6:	bf00      	nop
 8000ea8:	bf00      	nop
 8000eaa:	371c      	adds	r7, #28
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	40021000 	.word	0x40021000
 8000eb8:	40010000 	.word	0x40010000
 8000ebc:	48000400 	.word	0x48000400
 8000ec0:	48000800 	.word	0x48000800
 8000ec4:	48000c00 	.word	0x48000c00
 8000ec8:	48001000 	.word	0x48001000
 8000ecc:	48001400 	.word	0x48001400
 8000ed0:	40010400 	.word	0x40010400

08000ed4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d101      	bne.n	8000ee6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e08d      	b.n	8001002 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d106      	bne.n	8000f00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f7ff fc16 	bl	800072c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2224      	movs	r2, #36	; 0x24
 8000f04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f022 0201 	bic.w	r2, r2, #1
 8000f16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	685a      	ldr	r2, [r3, #4]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000f24:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	689a      	ldr	r2, [r3, #8]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000f34:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	68db      	ldr	r3, [r3, #12]
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d107      	bne.n	8000f4e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	689a      	ldr	r2, [r3, #8]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	e006      	b.n	8000f5c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	689a      	ldr	r2, [r3, #8]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000f5a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	2b02      	cmp	r3, #2
 8000f62:	d108      	bne.n	8000f76 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	685a      	ldr	r2, [r3, #4]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000f72:	605a      	str	r2, [r3, #4]
 8000f74:	e007      	b.n	8000f86 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	685a      	ldr	r2, [r3, #4]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f84:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	687a      	ldr	r2, [r7, #4]
 8000f8e:	6812      	ldr	r2, [r2, #0]
 8000f90:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f98:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	68da      	ldr	r2, [r3, #12]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000fa8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	691a      	ldr	r2, [r3, #16]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	695b      	ldr	r3, [r3, #20]
 8000fb2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	699b      	ldr	r3, [r3, #24]
 8000fba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	430a      	orrs	r2, r1
 8000fc2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	69d9      	ldr	r1, [r3, #28]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6a1a      	ldr	r2, [r3, #32]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	430a      	orrs	r2, r1
 8000fd2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f042 0201 	orr.w	r2, r2, #1
 8000fe2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2220      	movs	r2, #32
 8000fee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001000:	2300      	movs	r3, #0
}
 8001002:	4618      	mov	r0, r3
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
	...

0800100c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b088      	sub	sp, #32
 8001010:	af02      	add	r7, sp, #8
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	607a      	str	r2, [r7, #4]
 8001016:	461a      	mov	r2, r3
 8001018:	460b      	mov	r3, r1
 800101a:	817b      	strh	r3, [r7, #10]
 800101c:	4613      	mov	r3, r2
 800101e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001026:	b2db      	uxtb	r3, r3
 8001028:	2b20      	cmp	r3, #32
 800102a:	f040 80fd 	bne.w	8001228 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001034:	2b01      	cmp	r3, #1
 8001036:	d101      	bne.n	800103c <HAL_I2C_Master_Transmit+0x30>
 8001038:	2302      	movs	r3, #2
 800103a:	e0f6      	b.n	800122a <HAL_I2C_Master_Transmit+0x21e>
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	2201      	movs	r2, #1
 8001040:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001044:	f7ff fcb2 	bl	80009ac <HAL_GetTick>
 8001048:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	9300      	str	r3, [sp, #0]
 800104e:	2319      	movs	r3, #25
 8001050:	2201      	movs	r2, #1
 8001052:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001056:	68f8      	ldr	r0, [r7, #12]
 8001058:	f000 f914 	bl	8001284 <I2C_WaitOnFlagUntilTimeout>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	e0e1      	b.n	800122a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	2221      	movs	r2, #33	; 0x21
 800106a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	2210      	movs	r2, #16
 8001072:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	2200      	movs	r2, #0
 800107a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	687a      	ldr	r2, [r7, #4]
 8001080:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	893a      	ldrh	r2, [r7, #8]
 8001086:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	2200      	movs	r2, #0
 800108c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001092:	b29b      	uxth	r3, r3
 8001094:	2bff      	cmp	r3, #255	; 0xff
 8001096:	d906      	bls.n	80010a6 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	22ff      	movs	r2, #255	; 0xff
 800109c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800109e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010a2:	617b      	str	r3, [r7, #20]
 80010a4:	e007      	b.n	80010b6 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010aa:	b29a      	uxth	r2, r3
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80010b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80010b4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d024      	beq.n	8001108 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c2:	781a      	ldrb	r2, [r3, #0]
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ce:	1c5a      	adds	r2, r3, #1
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010d8:	b29b      	uxth	r3, r3
 80010da:	3b01      	subs	r3, #1
 80010dc:	b29a      	uxth	r2, r3
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010e6:	3b01      	subs	r3, #1
 80010e8:	b29a      	uxth	r2, r3
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	3301      	adds	r3, #1
 80010f6:	b2da      	uxtb	r2, r3
 80010f8:	8979      	ldrh	r1, [r7, #10]
 80010fa:	4b4e      	ldr	r3, [pc, #312]	; (8001234 <HAL_I2C_Master_Transmit+0x228>)
 80010fc:	9300      	str	r3, [sp, #0]
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	68f8      	ldr	r0, [r7, #12]
 8001102:	f000 fa83 	bl	800160c <I2C_TransferConfig>
 8001106:	e066      	b.n	80011d6 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800110c:	b2da      	uxtb	r2, r3
 800110e:	8979      	ldrh	r1, [r7, #10]
 8001110:	4b48      	ldr	r3, [pc, #288]	; (8001234 <HAL_I2C_Master_Transmit+0x228>)
 8001112:	9300      	str	r3, [sp, #0]
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	68f8      	ldr	r0, [r7, #12]
 8001118:	f000 fa78 	bl	800160c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800111c:	e05b      	b.n	80011d6 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	6a39      	ldr	r1, [r7, #32]
 8001122:	68f8      	ldr	r0, [r7, #12]
 8001124:	f000 f907 	bl	8001336 <I2C_WaitOnTXISFlagUntilTimeout>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e07b      	b.n	800122a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001136:	781a      	ldrb	r2, [r3, #0]
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001142:	1c5a      	adds	r2, r3, #1
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800114c:	b29b      	uxth	r3, r3
 800114e:	3b01      	subs	r3, #1
 8001150:	b29a      	uxth	r2, r3
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800115a:	3b01      	subs	r3, #1
 800115c:	b29a      	uxth	r2, r3
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001166:	b29b      	uxth	r3, r3
 8001168:	2b00      	cmp	r3, #0
 800116a:	d034      	beq.n	80011d6 <HAL_I2C_Master_Transmit+0x1ca>
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001170:	2b00      	cmp	r3, #0
 8001172:	d130      	bne.n	80011d6 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	9300      	str	r3, [sp, #0]
 8001178:	6a3b      	ldr	r3, [r7, #32]
 800117a:	2200      	movs	r2, #0
 800117c:	2180      	movs	r1, #128	; 0x80
 800117e:	68f8      	ldr	r0, [r7, #12]
 8001180:	f000 f880 	bl	8001284 <I2C_WaitOnFlagUntilTimeout>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	e04d      	b.n	800122a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001192:	b29b      	uxth	r3, r3
 8001194:	2bff      	cmp	r3, #255	; 0xff
 8001196:	d90e      	bls.n	80011b6 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	22ff      	movs	r2, #255	; 0xff
 800119c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011a2:	b2da      	uxtb	r2, r3
 80011a4:	8979      	ldrh	r1, [r7, #10]
 80011a6:	2300      	movs	r3, #0
 80011a8:	9300      	str	r3, [sp, #0]
 80011aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80011ae:	68f8      	ldr	r0, [r7, #12]
 80011b0:	f000 fa2c 	bl	800160c <I2C_TransferConfig>
 80011b4:	e00f      	b.n	80011d6 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011ba:	b29a      	uxth	r2, r3
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011c4:	b2da      	uxtb	r2, r3
 80011c6:	8979      	ldrh	r1, [r7, #10]
 80011c8:	2300      	movs	r3, #0
 80011ca:	9300      	str	r3, [sp, #0]
 80011cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80011d0:	68f8      	ldr	r0, [r7, #12]
 80011d2:	f000 fa1b 	bl	800160c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011da:	b29b      	uxth	r3, r3
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d19e      	bne.n	800111e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	6a39      	ldr	r1, [r7, #32]
 80011e4:	68f8      	ldr	r0, [r7, #12]
 80011e6:	f000 f8ed 	bl	80013c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80011f0:	2301      	movs	r3, #1
 80011f2:	e01a      	b.n	800122a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2220      	movs	r2, #32
 80011fa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	6859      	ldr	r1, [r3, #4]
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	4b0c      	ldr	r3, [pc, #48]	; (8001238 <HAL_I2C_Master_Transmit+0x22c>)
 8001208:	400b      	ands	r3, r1
 800120a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	2220      	movs	r2, #32
 8001210:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	2200      	movs	r2, #0
 8001218:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	2200      	movs	r2, #0
 8001220:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001224:	2300      	movs	r3, #0
 8001226:	e000      	b.n	800122a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8001228:	2302      	movs	r3, #2
  }
}
 800122a:	4618      	mov	r0, r3
 800122c:	3718      	adds	r7, #24
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	80002000 	.word	0x80002000
 8001238:	fe00e800 	.word	0xfe00e800

0800123c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	699b      	ldr	r3, [r3, #24]
 800124a:	f003 0302 	and.w	r3, r3, #2
 800124e:	2b02      	cmp	r3, #2
 8001250:	d103      	bne.n	800125a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	2200      	movs	r2, #0
 8001258:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	699b      	ldr	r3, [r3, #24]
 8001260:	f003 0301 	and.w	r3, r3, #1
 8001264:	2b01      	cmp	r3, #1
 8001266:	d007      	beq.n	8001278 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	699a      	ldr	r2, [r3, #24]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f042 0201 	orr.w	r2, r2, #1
 8001276:	619a      	str	r2, [r3, #24]
  }
}
 8001278:	bf00      	nop
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	603b      	str	r3, [r7, #0]
 8001290:	4613      	mov	r3, r2
 8001292:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001294:	e03b      	b.n	800130e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	6839      	ldr	r1, [r7, #0]
 800129a:	68f8      	ldr	r0, [r7, #12]
 800129c:	f000 f8d6 	bl	800144c <I2C_IsErrorOccurred>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e041      	b.n	800132e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012b0:	d02d      	beq.n	800130e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80012b2:	f7ff fb7b 	bl	80009ac <HAL_GetTick>
 80012b6:	4602      	mov	r2, r0
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	1ad3      	subs	r3, r2, r3
 80012bc:	683a      	ldr	r2, [r7, #0]
 80012be:	429a      	cmp	r2, r3
 80012c0:	d302      	bcc.n	80012c8 <I2C_WaitOnFlagUntilTimeout+0x44>
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d122      	bne.n	800130e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	699a      	ldr	r2, [r3, #24]
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	4013      	ands	r3, r2
 80012d2:	68ba      	ldr	r2, [r7, #8]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	bf0c      	ite	eq
 80012d8:	2301      	moveq	r3, #1
 80012da:	2300      	movne	r3, #0
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	461a      	mov	r2, r3
 80012e0:	79fb      	ldrb	r3, [r7, #7]
 80012e2:	429a      	cmp	r2, r3
 80012e4:	d113      	bne.n	800130e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ea:	f043 0220 	orr.w	r2, r3, #32
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	2220      	movs	r2, #32
 80012f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	2200      	movs	r2, #0
 80012fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	2200      	movs	r2, #0
 8001306:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e00f      	b.n	800132e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	699a      	ldr	r2, [r3, #24]
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	4013      	ands	r3, r2
 8001318:	68ba      	ldr	r2, [r7, #8]
 800131a:	429a      	cmp	r2, r3
 800131c:	bf0c      	ite	eq
 800131e:	2301      	moveq	r3, #1
 8001320:	2300      	movne	r3, #0
 8001322:	b2db      	uxtb	r3, r3
 8001324:	461a      	mov	r2, r3
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	429a      	cmp	r2, r3
 800132a:	d0b4      	beq.n	8001296 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800132c:	2300      	movs	r3, #0
}
 800132e:	4618      	mov	r0, r3
 8001330:	3710      	adds	r7, #16
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b084      	sub	sp, #16
 800133a:	af00      	add	r7, sp, #0
 800133c:	60f8      	str	r0, [r7, #12]
 800133e:	60b9      	str	r1, [r7, #8]
 8001340:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001342:	e033      	b.n	80013ac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	68b9      	ldr	r1, [r7, #8]
 8001348:	68f8      	ldr	r0, [r7, #12]
 800134a:	f000 f87f 	bl	800144c <I2C_IsErrorOccurred>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001354:	2301      	movs	r3, #1
 8001356:	e031      	b.n	80013bc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800135e:	d025      	beq.n	80013ac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001360:	f7ff fb24 	bl	80009ac <HAL_GetTick>
 8001364:	4602      	mov	r2, r0
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	68ba      	ldr	r2, [r7, #8]
 800136c:	429a      	cmp	r2, r3
 800136e:	d302      	bcc.n	8001376 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d11a      	bne.n	80013ac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	699b      	ldr	r3, [r3, #24]
 800137c:	f003 0302 	and.w	r3, r3, #2
 8001380:	2b02      	cmp	r3, #2
 8001382:	d013      	beq.n	80013ac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001388:	f043 0220 	orr.w	r2, r3, #32
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	2220      	movs	r2, #32
 8001394:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	2200      	movs	r2, #0
 800139c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	2200      	movs	r2, #0
 80013a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	e007      	b.n	80013bc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	699b      	ldr	r3, [r3, #24]
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d1c4      	bne.n	8001344 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80013ba:	2300      	movs	r3, #0
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3710      	adds	r7, #16
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	60f8      	str	r0, [r7, #12]
 80013cc:	60b9      	str	r1, [r7, #8]
 80013ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80013d0:	e02f      	b.n	8001432 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80013d2:	687a      	ldr	r2, [r7, #4]
 80013d4:	68b9      	ldr	r1, [r7, #8]
 80013d6:	68f8      	ldr	r0, [r7, #12]
 80013d8:	f000 f838 	bl	800144c <I2C_IsErrorOccurred>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e02d      	b.n	8001442 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80013e6:	f7ff fae1 	bl	80009ac <HAL_GetTick>
 80013ea:	4602      	mov	r2, r0
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	68ba      	ldr	r2, [r7, #8]
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d302      	bcc.n	80013fc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d11a      	bne.n	8001432 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	699b      	ldr	r3, [r3, #24]
 8001402:	f003 0320 	and.w	r3, r3, #32
 8001406:	2b20      	cmp	r3, #32
 8001408:	d013      	beq.n	8001432 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140e:	f043 0220 	orr.w	r2, r3, #32
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	2220      	movs	r2, #32
 800141a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	2200      	movs	r2, #0
 8001422:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	2200      	movs	r2, #0
 800142a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e007      	b.n	8001442 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	699b      	ldr	r3, [r3, #24]
 8001438:	f003 0320 	and.w	r3, r3, #32
 800143c:	2b20      	cmp	r3, #32
 800143e:	d1c8      	bne.n	80013d2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	3710      	adds	r7, #16
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
	...

0800144c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b08a      	sub	sp, #40	; 0x28
 8001450:	af00      	add	r7, sp, #0
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001458:	2300      	movs	r3, #0
 800145a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	699b      	ldr	r3, [r3, #24]
 8001464:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001466:	2300      	movs	r3, #0
 8001468:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	f003 0310 	and.w	r3, r3, #16
 8001474:	2b00      	cmp	r3, #0
 8001476:	d068      	beq.n	800154a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2210      	movs	r2, #16
 800147e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001480:	e049      	b.n	8001516 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001488:	d045      	beq.n	8001516 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800148a:	f7ff fa8f 	bl	80009ac <HAL_GetTick>
 800148e:	4602      	mov	r2, r0
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	68ba      	ldr	r2, [r7, #8]
 8001496:	429a      	cmp	r2, r3
 8001498:	d302      	bcc.n	80014a0 <I2C_IsErrorOccurred+0x54>
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d13a      	bne.n	8001516 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014aa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80014b2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	699b      	ldr	r3, [r3, #24]
 80014ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80014c2:	d121      	bne.n	8001508 <I2C_IsErrorOccurred+0xbc>
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80014ca:	d01d      	beq.n	8001508 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80014cc:	7cfb      	ldrb	r3, [r7, #19]
 80014ce:	2b20      	cmp	r3, #32
 80014d0:	d01a      	beq.n	8001508 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	685a      	ldr	r2, [r3, #4]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80014e0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80014e2:	f7ff fa63 	bl	80009ac <HAL_GetTick>
 80014e6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80014e8:	e00e      	b.n	8001508 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80014ea:	f7ff fa5f 	bl	80009ac <HAL_GetTick>
 80014ee:	4602      	mov	r2, r0
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	2b19      	cmp	r3, #25
 80014f6:	d907      	bls.n	8001508 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80014f8:	6a3b      	ldr	r3, [r7, #32]
 80014fa:	f043 0320 	orr.w	r3, r3, #32
 80014fe:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8001506:	e006      	b.n	8001516 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	699b      	ldr	r3, [r3, #24]
 800150e:	f003 0320 	and.w	r3, r3, #32
 8001512:	2b20      	cmp	r3, #32
 8001514:	d1e9      	bne.n	80014ea <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	f003 0320 	and.w	r3, r3, #32
 8001520:	2b20      	cmp	r3, #32
 8001522:	d003      	beq.n	800152c <I2C_IsErrorOccurred+0xe0>
 8001524:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001528:	2b00      	cmp	r3, #0
 800152a:	d0aa      	beq.n	8001482 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800152c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001530:	2b00      	cmp	r3, #0
 8001532:	d103      	bne.n	800153c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2220      	movs	r2, #32
 800153a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800153c:	6a3b      	ldr	r3, [r7, #32]
 800153e:	f043 0304 	orr.w	r3, r3, #4
 8001542:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	699b      	ldr	r3, [r3, #24]
 8001550:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001558:	2b00      	cmp	r3, #0
 800155a:	d00b      	beq.n	8001574 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800155c:	6a3b      	ldr	r3, [r7, #32]
 800155e:	f043 0301 	orr.w	r3, r3, #1
 8001562:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f44f 7280 	mov.w	r2, #256	; 0x100
 800156c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800157a:	2b00      	cmp	r3, #0
 800157c:	d00b      	beq.n	8001596 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800157e:	6a3b      	ldr	r3, [r7, #32]
 8001580:	f043 0308 	orr.w	r3, r3, #8
 8001584:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800158e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800159c:	2b00      	cmp	r3, #0
 800159e:	d00b      	beq.n	80015b8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80015a0:	6a3b      	ldr	r3, [r7, #32]
 80015a2:	f043 0302 	orr.w	r3, r3, #2
 80015a6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015b0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80015b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d01c      	beq.n	80015fa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80015c0:	68f8      	ldr	r0, [r7, #12]
 80015c2:	f7ff fe3b 	bl	800123c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	6859      	ldr	r1, [r3, #4]
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	4b0d      	ldr	r3, [pc, #52]	; (8001608 <I2C_IsErrorOccurred+0x1bc>)
 80015d2:	400b      	ands	r3, r1
 80015d4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80015da:	6a3b      	ldr	r3, [r7, #32]
 80015dc:	431a      	orrs	r2, r3
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	2220      	movs	r2, #32
 80015e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	2200      	movs	r2, #0
 80015ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	2200      	movs	r2, #0
 80015f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80015fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3728      	adds	r7, #40	; 0x28
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	fe00e800 	.word	0xfe00e800

0800160c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800160c:	b480      	push	{r7}
 800160e:	b087      	sub	sp, #28
 8001610:	af00      	add	r7, sp, #0
 8001612:	60f8      	str	r0, [r7, #12]
 8001614:	607b      	str	r3, [r7, #4]
 8001616:	460b      	mov	r3, r1
 8001618:	817b      	strh	r3, [r7, #10]
 800161a:	4613      	mov	r3, r2
 800161c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800161e:	897b      	ldrh	r3, [r7, #10]
 8001620:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001624:	7a7b      	ldrb	r3, [r7, #9]
 8001626:	041b      	lsls	r3, r3, #16
 8001628:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800162c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001632:	6a3b      	ldr	r3, [r7, #32]
 8001634:	4313      	orrs	r3, r2
 8001636:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800163a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	685a      	ldr	r2, [r3, #4]
 8001642:	6a3b      	ldr	r3, [r7, #32]
 8001644:	0d5b      	lsrs	r3, r3, #21
 8001646:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800164a:	4b08      	ldr	r3, [pc, #32]	; (800166c <I2C_TransferConfig+0x60>)
 800164c:	430b      	orrs	r3, r1
 800164e:	43db      	mvns	r3, r3
 8001650:	ea02 0103 	and.w	r1, r2, r3
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	697a      	ldr	r2, [r7, #20]
 800165a:	430a      	orrs	r2, r1
 800165c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800165e:	bf00      	nop
 8001660:	371c      	adds	r7, #28
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	03ff63ff 	.word	0x03ff63ff

08001670 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001680:	b2db      	uxtb	r3, r3
 8001682:	2b20      	cmp	r3, #32
 8001684:	d138      	bne.n	80016f8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800168c:	2b01      	cmp	r3, #1
 800168e:	d101      	bne.n	8001694 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001690:	2302      	movs	r3, #2
 8001692:	e032      	b.n	80016fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2201      	movs	r2, #1
 8001698:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2224      	movs	r2, #36	; 0x24
 80016a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f022 0201 	bic.w	r2, r2, #1
 80016b2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80016c2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	6819      	ldr	r1, [r3, #0]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	683a      	ldr	r2, [r7, #0]
 80016d0:	430a      	orrs	r2, r1
 80016d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f042 0201 	orr.w	r2, r2, #1
 80016e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2220      	movs	r2, #32
 80016e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2200      	movs	r2, #0
 80016f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80016f4:	2300      	movs	r3, #0
 80016f6:	e000      	b.n	80016fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80016f8:	2302      	movs	r3, #2
  }
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr

08001706 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001706:	b480      	push	{r7}
 8001708:	b085      	sub	sp, #20
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
 800170e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001716:	b2db      	uxtb	r3, r3
 8001718:	2b20      	cmp	r3, #32
 800171a:	d139      	bne.n	8001790 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001722:	2b01      	cmp	r3, #1
 8001724:	d101      	bne.n	800172a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001726:	2302      	movs	r3, #2
 8001728:	e033      	b.n	8001792 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2201      	movs	r2, #1
 800172e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2224      	movs	r2, #36	; 0x24
 8001736:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f022 0201 	bic.w	r2, r2, #1
 8001748:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001758:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	021b      	lsls	r3, r3, #8
 800175e:	68fa      	ldr	r2, [r7, #12]
 8001760:	4313      	orrs	r3, r2
 8001762:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	68fa      	ldr	r2, [r7, #12]
 800176a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f042 0201 	orr.w	r2, r2, #1
 800177a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2220      	movs	r2, #32
 8001780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2200      	movs	r2, #0
 8001788:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800178c:	2300      	movs	r3, #0
 800178e:	e000      	b.n	8001792 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001790:	2302      	movs	r3, #2
  }
}
 8001792:	4618      	mov	r0, r3
 8001794:	3714      	adds	r7, #20
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
	...

080017a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b085      	sub	sp, #20
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d141      	bne.n	8001832 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80017ae:	4b4b      	ldr	r3, [pc, #300]	; (80018dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017ba:	d131      	bne.n	8001820 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80017bc:	4b47      	ldr	r3, [pc, #284]	; (80018dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80017c2:	4a46      	ldr	r2, [pc, #280]	; (80018dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80017cc:	4b43      	ldr	r3, [pc, #268]	; (80018dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017d4:	4a41      	ldr	r2, [pc, #260]	; (80018dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017da:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80017dc:	4b40      	ldr	r3, [pc, #256]	; (80018e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2232      	movs	r2, #50	; 0x32
 80017e2:	fb02 f303 	mul.w	r3, r2, r3
 80017e6:	4a3f      	ldr	r2, [pc, #252]	; (80018e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80017e8:	fba2 2303 	umull	r2, r3, r2, r3
 80017ec:	0c9b      	lsrs	r3, r3, #18
 80017ee:	3301      	adds	r3, #1
 80017f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017f2:	e002      	b.n	80017fa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	3b01      	subs	r3, #1
 80017f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017fa:	4b38      	ldr	r3, [pc, #224]	; (80018dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017fc:	695b      	ldr	r3, [r3, #20]
 80017fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001802:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001806:	d102      	bne.n	800180e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d1f2      	bne.n	80017f4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800180e:	4b33      	ldr	r3, [pc, #204]	; (80018dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001810:	695b      	ldr	r3, [r3, #20]
 8001812:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001816:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800181a:	d158      	bne.n	80018ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800181c:	2303      	movs	r3, #3
 800181e:	e057      	b.n	80018d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001820:	4b2e      	ldr	r3, [pc, #184]	; (80018dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001822:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001826:	4a2d      	ldr	r2, [pc, #180]	; (80018dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001828:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800182c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001830:	e04d      	b.n	80018ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001838:	d141      	bne.n	80018be <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800183a:	4b28      	ldr	r3, [pc, #160]	; (80018dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001842:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001846:	d131      	bne.n	80018ac <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001848:	4b24      	ldr	r3, [pc, #144]	; (80018dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800184a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800184e:	4a23      	ldr	r2, [pc, #140]	; (80018dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001850:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001854:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001858:	4b20      	ldr	r3, [pc, #128]	; (80018dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001860:	4a1e      	ldr	r2, [pc, #120]	; (80018dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001862:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001866:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001868:	4b1d      	ldr	r3, [pc, #116]	; (80018e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2232      	movs	r2, #50	; 0x32
 800186e:	fb02 f303 	mul.w	r3, r2, r3
 8001872:	4a1c      	ldr	r2, [pc, #112]	; (80018e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001874:	fba2 2303 	umull	r2, r3, r2, r3
 8001878:	0c9b      	lsrs	r3, r3, #18
 800187a:	3301      	adds	r3, #1
 800187c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800187e:	e002      	b.n	8001886 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	3b01      	subs	r3, #1
 8001884:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001886:	4b15      	ldr	r3, [pc, #84]	; (80018dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001888:	695b      	ldr	r3, [r3, #20]
 800188a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800188e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001892:	d102      	bne.n	800189a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d1f2      	bne.n	8001880 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800189a:	4b10      	ldr	r3, [pc, #64]	; (80018dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800189c:	695b      	ldr	r3, [r3, #20]
 800189e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018a6:	d112      	bne.n	80018ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80018a8:	2303      	movs	r3, #3
 80018aa:	e011      	b.n	80018d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80018ac:	4b0b      	ldr	r3, [pc, #44]	; (80018dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80018b2:	4a0a      	ldr	r2, [pc, #40]	; (80018dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80018bc:	e007      	b.n	80018ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80018be:	4b07      	ldr	r3, [pc, #28]	; (80018dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018c6:	4a05      	ldr	r2, [pc, #20]	; (80018dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018cc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80018ce:	2300      	movs	r3, #0
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3714      	adds	r7, #20
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr
 80018dc:	40007000 	.word	0x40007000
 80018e0:	20000004 	.word	0x20000004
 80018e4:	431bde83 	.word	0x431bde83

080018e8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80018ec:	4b05      	ldr	r3, [pc, #20]	; (8001904 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	4a04      	ldr	r2, [pc, #16]	; (8001904 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80018f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018f6:	6093      	str	r3, [r2, #8]
}
 80018f8:	bf00      	nop
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	40007000 	.word	0x40007000

08001908 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b088      	sub	sp, #32
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d101      	bne.n	800191a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e2fe      	b.n	8001f18 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	2b00      	cmp	r3, #0
 8001924:	d075      	beq.n	8001a12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001926:	4b97      	ldr	r3, [pc, #604]	; (8001b84 <HAL_RCC_OscConfig+0x27c>)
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	f003 030c 	and.w	r3, r3, #12
 800192e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001930:	4b94      	ldr	r3, [pc, #592]	; (8001b84 <HAL_RCC_OscConfig+0x27c>)
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	f003 0303 	and.w	r3, r3, #3
 8001938:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	2b0c      	cmp	r3, #12
 800193e:	d102      	bne.n	8001946 <HAL_RCC_OscConfig+0x3e>
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	2b03      	cmp	r3, #3
 8001944:	d002      	beq.n	800194c <HAL_RCC_OscConfig+0x44>
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	2b08      	cmp	r3, #8
 800194a:	d10b      	bne.n	8001964 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800194c:	4b8d      	ldr	r3, [pc, #564]	; (8001b84 <HAL_RCC_OscConfig+0x27c>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d05b      	beq.n	8001a10 <HAL_RCC_OscConfig+0x108>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d157      	bne.n	8001a10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e2d9      	b.n	8001f18 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800196c:	d106      	bne.n	800197c <HAL_RCC_OscConfig+0x74>
 800196e:	4b85      	ldr	r3, [pc, #532]	; (8001b84 <HAL_RCC_OscConfig+0x27c>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a84      	ldr	r2, [pc, #528]	; (8001b84 <HAL_RCC_OscConfig+0x27c>)
 8001974:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001978:	6013      	str	r3, [r2, #0]
 800197a:	e01d      	b.n	80019b8 <HAL_RCC_OscConfig+0xb0>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001984:	d10c      	bne.n	80019a0 <HAL_RCC_OscConfig+0x98>
 8001986:	4b7f      	ldr	r3, [pc, #508]	; (8001b84 <HAL_RCC_OscConfig+0x27c>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a7e      	ldr	r2, [pc, #504]	; (8001b84 <HAL_RCC_OscConfig+0x27c>)
 800198c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001990:	6013      	str	r3, [r2, #0]
 8001992:	4b7c      	ldr	r3, [pc, #496]	; (8001b84 <HAL_RCC_OscConfig+0x27c>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a7b      	ldr	r2, [pc, #492]	; (8001b84 <HAL_RCC_OscConfig+0x27c>)
 8001998:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800199c:	6013      	str	r3, [r2, #0]
 800199e:	e00b      	b.n	80019b8 <HAL_RCC_OscConfig+0xb0>
 80019a0:	4b78      	ldr	r3, [pc, #480]	; (8001b84 <HAL_RCC_OscConfig+0x27c>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a77      	ldr	r2, [pc, #476]	; (8001b84 <HAL_RCC_OscConfig+0x27c>)
 80019a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019aa:	6013      	str	r3, [r2, #0]
 80019ac:	4b75      	ldr	r3, [pc, #468]	; (8001b84 <HAL_RCC_OscConfig+0x27c>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a74      	ldr	r2, [pc, #464]	; (8001b84 <HAL_RCC_OscConfig+0x27c>)
 80019b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d013      	beq.n	80019e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c0:	f7fe fff4 	bl	80009ac <HAL_GetTick>
 80019c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019c6:	e008      	b.n	80019da <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019c8:	f7fe fff0 	bl	80009ac <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b64      	cmp	r3, #100	; 0x64
 80019d4:	d901      	bls.n	80019da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e29e      	b.n	8001f18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019da:	4b6a      	ldr	r3, [pc, #424]	; (8001b84 <HAL_RCC_OscConfig+0x27c>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d0f0      	beq.n	80019c8 <HAL_RCC_OscConfig+0xc0>
 80019e6:	e014      	b.n	8001a12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e8:	f7fe ffe0 	bl	80009ac <HAL_GetTick>
 80019ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019ee:	e008      	b.n	8001a02 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019f0:	f7fe ffdc 	bl	80009ac <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	2b64      	cmp	r3, #100	; 0x64
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e28a      	b.n	8001f18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a02:	4b60      	ldr	r3, [pc, #384]	; (8001b84 <HAL_RCC_OscConfig+0x27c>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d1f0      	bne.n	80019f0 <HAL_RCC_OscConfig+0xe8>
 8001a0e:	e000      	b.n	8001a12 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d075      	beq.n	8001b0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a1e:	4b59      	ldr	r3, [pc, #356]	; (8001b84 <HAL_RCC_OscConfig+0x27c>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f003 030c 	and.w	r3, r3, #12
 8001a26:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a28:	4b56      	ldr	r3, [pc, #344]	; (8001b84 <HAL_RCC_OscConfig+0x27c>)
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	f003 0303 	and.w	r3, r3, #3
 8001a30:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	2b0c      	cmp	r3, #12
 8001a36:	d102      	bne.n	8001a3e <HAL_RCC_OscConfig+0x136>
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d002      	beq.n	8001a44 <HAL_RCC_OscConfig+0x13c>
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	2b04      	cmp	r3, #4
 8001a42:	d11f      	bne.n	8001a84 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a44:	4b4f      	ldr	r3, [pc, #316]	; (8001b84 <HAL_RCC_OscConfig+0x27c>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d005      	beq.n	8001a5c <HAL_RCC_OscConfig+0x154>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d101      	bne.n	8001a5c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e25d      	b.n	8001f18 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a5c:	4b49      	ldr	r3, [pc, #292]	; (8001b84 <HAL_RCC_OscConfig+0x27c>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	691b      	ldr	r3, [r3, #16]
 8001a68:	061b      	lsls	r3, r3, #24
 8001a6a:	4946      	ldr	r1, [pc, #280]	; (8001b84 <HAL_RCC_OscConfig+0x27c>)
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001a70:	4b45      	ldr	r3, [pc, #276]	; (8001b88 <HAL_RCC_OscConfig+0x280>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7fe ff4d 	bl	8000914 <HAL_InitTick>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d043      	beq.n	8001b08 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e249      	b.n	8001f18 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d023      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a8c:	4b3d      	ldr	r3, [pc, #244]	; (8001b84 <HAL_RCC_OscConfig+0x27c>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a3c      	ldr	r2, [pc, #240]	; (8001b84 <HAL_RCC_OscConfig+0x27c>)
 8001a92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a98:	f7fe ff88 	bl	80009ac <HAL_GetTick>
 8001a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a9e:	e008      	b.n	8001ab2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aa0:	f7fe ff84 	bl	80009ac <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e232      	b.n	8001f18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ab2:	4b34      	ldr	r3, [pc, #208]	; (8001b84 <HAL_RCC_OscConfig+0x27c>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d0f0      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001abe:	4b31      	ldr	r3, [pc, #196]	; (8001b84 <HAL_RCC_OscConfig+0x27c>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	061b      	lsls	r3, r3, #24
 8001acc:	492d      	ldr	r1, [pc, #180]	; (8001b84 <HAL_RCC_OscConfig+0x27c>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	604b      	str	r3, [r1, #4]
 8001ad2:	e01a      	b.n	8001b0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ad4:	4b2b      	ldr	r3, [pc, #172]	; (8001b84 <HAL_RCC_OscConfig+0x27c>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a2a      	ldr	r2, [pc, #168]	; (8001b84 <HAL_RCC_OscConfig+0x27c>)
 8001ada:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ade:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae0:	f7fe ff64 	bl	80009ac <HAL_GetTick>
 8001ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ae6:	e008      	b.n	8001afa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ae8:	f7fe ff60 	bl	80009ac <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e20e      	b.n	8001f18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001afa:	4b22      	ldr	r3, [pc, #136]	; (8001b84 <HAL_RCC_OscConfig+0x27c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d1f0      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x1e0>
 8001b06:	e000      	b.n	8001b0a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b08:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0308 	and.w	r3, r3, #8
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d041      	beq.n	8001b9a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	695b      	ldr	r3, [r3, #20]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d01c      	beq.n	8001b58 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b1e:	4b19      	ldr	r3, [pc, #100]	; (8001b84 <HAL_RCC_OscConfig+0x27c>)
 8001b20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b24:	4a17      	ldr	r2, [pc, #92]	; (8001b84 <HAL_RCC_OscConfig+0x27c>)
 8001b26:	f043 0301 	orr.w	r3, r3, #1
 8001b2a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b2e:	f7fe ff3d 	bl	80009ac <HAL_GetTick>
 8001b32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b34:	e008      	b.n	8001b48 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b36:	f7fe ff39 	bl	80009ac <HAL_GetTick>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d901      	bls.n	8001b48 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e1e7      	b.n	8001f18 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b48:	4b0e      	ldr	r3, [pc, #56]	; (8001b84 <HAL_RCC_OscConfig+0x27c>)
 8001b4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d0ef      	beq.n	8001b36 <HAL_RCC_OscConfig+0x22e>
 8001b56:	e020      	b.n	8001b9a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b58:	4b0a      	ldr	r3, [pc, #40]	; (8001b84 <HAL_RCC_OscConfig+0x27c>)
 8001b5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b5e:	4a09      	ldr	r2, [pc, #36]	; (8001b84 <HAL_RCC_OscConfig+0x27c>)
 8001b60:	f023 0301 	bic.w	r3, r3, #1
 8001b64:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b68:	f7fe ff20 	bl	80009ac <HAL_GetTick>
 8001b6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b6e:	e00d      	b.n	8001b8c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b70:	f7fe ff1c 	bl	80009ac <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d906      	bls.n	8001b8c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e1ca      	b.n	8001f18 <HAL_RCC_OscConfig+0x610>
 8001b82:	bf00      	nop
 8001b84:	40021000 	.word	0x40021000
 8001b88:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b8c:	4b8c      	ldr	r3, [pc, #560]	; (8001dc0 <HAL_RCC_OscConfig+0x4b8>)
 8001b8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d1ea      	bne.n	8001b70 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0304 	and.w	r3, r3, #4
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	f000 80a6 	beq.w	8001cf4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001bac:	4b84      	ldr	r3, [pc, #528]	; (8001dc0 <HAL_RCC_OscConfig+0x4b8>)
 8001bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d101      	bne.n	8001bbc <HAL_RCC_OscConfig+0x2b4>
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e000      	b.n	8001bbe <HAL_RCC_OscConfig+0x2b6>
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d00d      	beq.n	8001bde <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bc2:	4b7f      	ldr	r3, [pc, #508]	; (8001dc0 <HAL_RCC_OscConfig+0x4b8>)
 8001bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc6:	4a7e      	ldr	r2, [pc, #504]	; (8001dc0 <HAL_RCC_OscConfig+0x4b8>)
 8001bc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bcc:	6593      	str	r3, [r2, #88]	; 0x58
 8001bce:	4b7c      	ldr	r3, [pc, #496]	; (8001dc0 <HAL_RCC_OscConfig+0x4b8>)
 8001bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd6:	60fb      	str	r3, [r7, #12]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bde:	4b79      	ldr	r3, [pc, #484]	; (8001dc4 <HAL_RCC_OscConfig+0x4bc>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d118      	bne.n	8001c1c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001bea:	4b76      	ldr	r3, [pc, #472]	; (8001dc4 <HAL_RCC_OscConfig+0x4bc>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a75      	ldr	r2, [pc, #468]	; (8001dc4 <HAL_RCC_OscConfig+0x4bc>)
 8001bf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bf4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bf6:	f7fe fed9 	bl	80009ac <HAL_GetTick>
 8001bfa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bfc:	e008      	b.n	8001c10 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bfe:	f7fe fed5 	bl	80009ac <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d901      	bls.n	8001c10 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e183      	b.n	8001f18 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c10:	4b6c      	ldr	r3, [pc, #432]	; (8001dc4 <HAL_RCC_OscConfig+0x4bc>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d0f0      	beq.n	8001bfe <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d108      	bne.n	8001c36 <HAL_RCC_OscConfig+0x32e>
 8001c24:	4b66      	ldr	r3, [pc, #408]	; (8001dc0 <HAL_RCC_OscConfig+0x4b8>)
 8001c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c2a:	4a65      	ldr	r2, [pc, #404]	; (8001dc0 <HAL_RCC_OscConfig+0x4b8>)
 8001c2c:	f043 0301 	orr.w	r3, r3, #1
 8001c30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c34:	e024      	b.n	8001c80 <HAL_RCC_OscConfig+0x378>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	2b05      	cmp	r3, #5
 8001c3c:	d110      	bne.n	8001c60 <HAL_RCC_OscConfig+0x358>
 8001c3e:	4b60      	ldr	r3, [pc, #384]	; (8001dc0 <HAL_RCC_OscConfig+0x4b8>)
 8001c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c44:	4a5e      	ldr	r2, [pc, #376]	; (8001dc0 <HAL_RCC_OscConfig+0x4b8>)
 8001c46:	f043 0304 	orr.w	r3, r3, #4
 8001c4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c4e:	4b5c      	ldr	r3, [pc, #368]	; (8001dc0 <HAL_RCC_OscConfig+0x4b8>)
 8001c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c54:	4a5a      	ldr	r2, [pc, #360]	; (8001dc0 <HAL_RCC_OscConfig+0x4b8>)
 8001c56:	f043 0301 	orr.w	r3, r3, #1
 8001c5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c5e:	e00f      	b.n	8001c80 <HAL_RCC_OscConfig+0x378>
 8001c60:	4b57      	ldr	r3, [pc, #348]	; (8001dc0 <HAL_RCC_OscConfig+0x4b8>)
 8001c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c66:	4a56      	ldr	r2, [pc, #344]	; (8001dc0 <HAL_RCC_OscConfig+0x4b8>)
 8001c68:	f023 0301 	bic.w	r3, r3, #1
 8001c6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c70:	4b53      	ldr	r3, [pc, #332]	; (8001dc0 <HAL_RCC_OscConfig+0x4b8>)
 8001c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c76:	4a52      	ldr	r2, [pc, #328]	; (8001dc0 <HAL_RCC_OscConfig+0x4b8>)
 8001c78:	f023 0304 	bic.w	r3, r3, #4
 8001c7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d016      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c88:	f7fe fe90 	bl	80009ac <HAL_GetTick>
 8001c8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c8e:	e00a      	b.n	8001ca6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c90:	f7fe fe8c 	bl	80009ac <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d901      	bls.n	8001ca6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e138      	b.n	8001f18 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ca6:	4b46      	ldr	r3, [pc, #280]	; (8001dc0 <HAL_RCC_OscConfig+0x4b8>)
 8001ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cac:	f003 0302 	and.w	r3, r3, #2
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d0ed      	beq.n	8001c90 <HAL_RCC_OscConfig+0x388>
 8001cb4:	e015      	b.n	8001ce2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cb6:	f7fe fe79 	bl	80009ac <HAL_GetTick>
 8001cba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cbc:	e00a      	b.n	8001cd4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cbe:	f7fe fe75 	bl	80009ac <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d901      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e121      	b.n	8001f18 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cd4:	4b3a      	ldr	r3, [pc, #232]	; (8001dc0 <HAL_RCC_OscConfig+0x4b8>)
 8001cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1ed      	bne.n	8001cbe <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ce2:	7ffb      	ldrb	r3, [r7, #31]
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d105      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ce8:	4b35      	ldr	r3, [pc, #212]	; (8001dc0 <HAL_RCC_OscConfig+0x4b8>)
 8001cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cec:	4a34      	ldr	r2, [pc, #208]	; (8001dc0 <HAL_RCC_OscConfig+0x4b8>)
 8001cee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cf2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0320 	and.w	r3, r3, #32
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d03c      	beq.n	8001d7a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d01c      	beq.n	8001d42 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d08:	4b2d      	ldr	r3, [pc, #180]	; (8001dc0 <HAL_RCC_OscConfig+0x4b8>)
 8001d0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d0e:	4a2c      	ldr	r2, [pc, #176]	; (8001dc0 <HAL_RCC_OscConfig+0x4b8>)
 8001d10:	f043 0301 	orr.w	r3, r3, #1
 8001d14:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d18:	f7fe fe48 	bl	80009ac <HAL_GetTick>
 8001d1c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d1e:	e008      	b.n	8001d32 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d20:	f7fe fe44 	bl	80009ac <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e0f2      	b.n	8001f18 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d32:	4b23      	ldr	r3, [pc, #140]	; (8001dc0 <HAL_RCC_OscConfig+0x4b8>)
 8001d34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d38:	f003 0302 	and.w	r3, r3, #2
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d0ef      	beq.n	8001d20 <HAL_RCC_OscConfig+0x418>
 8001d40:	e01b      	b.n	8001d7a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d42:	4b1f      	ldr	r3, [pc, #124]	; (8001dc0 <HAL_RCC_OscConfig+0x4b8>)
 8001d44:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d48:	4a1d      	ldr	r2, [pc, #116]	; (8001dc0 <HAL_RCC_OscConfig+0x4b8>)
 8001d4a:	f023 0301 	bic.w	r3, r3, #1
 8001d4e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d52:	f7fe fe2b 	bl	80009ac <HAL_GetTick>
 8001d56:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d58:	e008      	b.n	8001d6c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d5a:	f7fe fe27 	bl	80009ac <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d901      	bls.n	8001d6c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e0d5      	b.n	8001f18 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d6c:	4b14      	ldr	r3, [pc, #80]	; (8001dc0 <HAL_RCC_OscConfig+0x4b8>)
 8001d6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d1ef      	bne.n	8001d5a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	69db      	ldr	r3, [r3, #28]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	f000 80c9 	beq.w	8001f16 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d84:	4b0e      	ldr	r3, [pc, #56]	; (8001dc0 <HAL_RCC_OscConfig+0x4b8>)
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	f003 030c 	and.w	r3, r3, #12
 8001d8c:	2b0c      	cmp	r3, #12
 8001d8e:	f000 8083 	beq.w	8001e98 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	69db      	ldr	r3, [r3, #28]
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d15e      	bne.n	8001e58 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d9a:	4b09      	ldr	r3, [pc, #36]	; (8001dc0 <HAL_RCC_OscConfig+0x4b8>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a08      	ldr	r2, [pc, #32]	; (8001dc0 <HAL_RCC_OscConfig+0x4b8>)
 8001da0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001da4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da6:	f7fe fe01 	bl	80009ac <HAL_GetTick>
 8001daa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dac:	e00c      	b.n	8001dc8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dae:	f7fe fdfd 	bl	80009ac <HAL_GetTick>
 8001db2:	4602      	mov	r2, r0
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d905      	bls.n	8001dc8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	e0ab      	b.n	8001f18 <HAL_RCC_OscConfig+0x610>
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dc8:	4b55      	ldr	r3, [pc, #340]	; (8001f20 <HAL_RCC_OscConfig+0x618>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d1ec      	bne.n	8001dae <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dd4:	4b52      	ldr	r3, [pc, #328]	; (8001f20 <HAL_RCC_OscConfig+0x618>)
 8001dd6:	68da      	ldr	r2, [r3, #12]
 8001dd8:	4b52      	ldr	r3, [pc, #328]	; (8001f24 <HAL_RCC_OscConfig+0x61c>)
 8001dda:	4013      	ands	r3, r2
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	6a11      	ldr	r1, [r2, #32]
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001de4:	3a01      	subs	r2, #1
 8001de6:	0112      	lsls	r2, r2, #4
 8001de8:	4311      	orrs	r1, r2
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001dee:	0212      	lsls	r2, r2, #8
 8001df0:	4311      	orrs	r1, r2
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001df6:	0852      	lsrs	r2, r2, #1
 8001df8:	3a01      	subs	r2, #1
 8001dfa:	0552      	lsls	r2, r2, #21
 8001dfc:	4311      	orrs	r1, r2
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e02:	0852      	lsrs	r2, r2, #1
 8001e04:	3a01      	subs	r2, #1
 8001e06:	0652      	lsls	r2, r2, #25
 8001e08:	4311      	orrs	r1, r2
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001e0e:	06d2      	lsls	r2, r2, #27
 8001e10:	430a      	orrs	r2, r1
 8001e12:	4943      	ldr	r1, [pc, #268]	; (8001f20 <HAL_RCC_OscConfig+0x618>)
 8001e14:	4313      	orrs	r3, r2
 8001e16:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e18:	4b41      	ldr	r3, [pc, #260]	; (8001f20 <HAL_RCC_OscConfig+0x618>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a40      	ldr	r2, [pc, #256]	; (8001f20 <HAL_RCC_OscConfig+0x618>)
 8001e1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e22:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e24:	4b3e      	ldr	r3, [pc, #248]	; (8001f20 <HAL_RCC_OscConfig+0x618>)
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	4a3d      	ldr	r2, [pc, #244]	; (8001f20 <HAL_RCC_OscConfig+0x618>)
 8001e2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e2e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e30:	f7fe fdbc 	bl	80009ac <HAL_GetTick>
 8001e34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e36:	e008      	b.n	8001e4a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e38:	f7fe fdb8 	bl	80009ac <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e066      	b.n	8001f18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e4a:	4b35      	ldr	r3, [pc, #212]	; (8001f20 <HAL_RCC_OscConfig+0x618>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d0f0      	beq.n	8001e38 <HAL_RCC_OscConfig+0x530>
 8001e56:	e05e      	b.n	8001f16 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e58:	4b31      	ldr	r3, [pc, #196]	; (8001f20 <HAL_RCC_OscConfig+0x618>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a30      	ldr	r2, [pc, #192]	; (8001f20 <HAL_RCC_OscConfig+0x618>)
 8001e5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e64:	f7fe fda2 	bl	80009ac <HAL_GetTick>
 8001e68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e6a:	e008      	b.n	8001e7e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e6c:	f7fe fd9e 	bl	80009ac <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e04c      	b.n	8001f18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e7e:	4b28      	ldr	r3, [pc, #160]	; (8001f20 <HAL_RCC_OscConfig+0x618>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d1f0      	bne.n	8001e6c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001e8a:	4b25      	ldr	r3, [pc, #148]	; (8001f20 <HAL_RCC_OscConfig+0x618>)
 8001e8c:	68da      	ldr	r2, [r3, #12]
 8001e8e:	4924      	ldr	r1, [pc, #144]	; (8001f20 <HAL_RCC_OscConfig+0x618>)
 8001e90:	4b25      	ldr	r3, [pc, #148]	; (8001f28 <HAL_RCC_OscConfig+0x620>)
 8001e92:	4013      	ands	r3, r2
 8001e94:	60cb      	str	r3, [r1, #12]
 8001e96:	e03e      	b.n	8001f16 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	69db      	ldr	r3, [r3, #28]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d101      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e039      	b.n	8001f18 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001ea4:	4b1e      	ldr	r3, [pc, #120]	; (8001f20 <HAL_RCC_OscConfig+0x618>)
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	f003 0203 	and.w	r2, r3, #3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a1b      	ldr	r3, [r3, #32]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d12c      	bne.n	8001f12 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d123      	bne.n	8001f12 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d11b      	bne.n	8001f12 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d113      	bne.n	8001f12 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef4:	085b      	lsrs	r3, r3, #1
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d109      	bne.n	8001f12 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f08:	085b      	lsrs	r3, r3, #1
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d001      	beq.n	8001f16 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e000      	b.n	8001f18 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001f16:	2300      	movs	r3, #0
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3720      	adds	r7, #32
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40021000 	.word	0x40021000
 8001f24:	019f800c 	.word	0x019f800c
 8001f28:	feeefffc 	.word	0xfeeefffc

08001f2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b086      	sub	sp, #24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001f36:	2300      	movs	r3, #0
 8001f38:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d101      	bne.n	8001f44 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e11e      	b.n	8002182 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f44:	4b91      	ldr	r3, [pc, #580]	; (800218c <HAL_RCC_ClockConfig+0x260>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 030f 	and.w	r3, r3, #15
 8001f4c:	683a      	ldr	r2, [r7, #0]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d910      	bls.n	8001f74 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f52:	4b8e      	ldr	r3, [pc, #568]	; (800218c <HAL_RCC_ClockConfig+0x260>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f023 020f 	bic.w	r2, r3, #15
 8001f5a:	498c      	ldr	r1, [pc, #560]	; (800218c <HAL_RCC_ClockConfig+0x260>)
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f62:	4b8a      	ldr	r3, [pc, #552]	; (800218c <HAL_RCC_ClockConfig+0x260>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 030f 	and.w	r3, r3, #15
 8001f6a:	683a      	ldr	r2, [r7, #0]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d001      	beq.n	8001f74 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e106      	b.n	8002182 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0301 	and.w	r3, r3, #1
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d073      	beq.n	8002068 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	2b03      	cmp	r3, #3
 8001f86:	d129      	bne.n	8001fdc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f88:	4b81      	ldr	r3, [pc, #516]	; (8002190 <HAL_RCC_ClockConfig+0x264>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d101      	bne.n	8001f98 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e0f4      	b.n	8002182 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001f98:	f000 f966 	bl	8002268 <RCC_GetSysClockFreqFromPLLSource>
 8001f9c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	4a7c      	ldr	r2, [pc, #496]	; (8002194 <HAL_RCC_ClockConfig+0x268>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d93f      	bls.n	8002026 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001fa6:	4b7a      	ldr	r3, [pc, #488]	; (8002190 <HAL_RCC_ClockConfig+0x264>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d009      	beq.n	8001fc6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d033      	beq.n	8002026 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d12f      	bne.n	8002026 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001fc6:	4b72      	ldr	r3, [pc, #456]	; (8002190 <HAL_RCC_ClockConfig+0x264>)
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001fce:	4a70      	ldr	r2, [pc, #448]	; (8002190 <HAL_RCC_ClockConfig+0x264>)
 8001fd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fd4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001fd6:	2380      	movs	r3, #128	; 0x80
 8001fd8:	617b      	str	r3, [r7, #20]
 8001fda:	e024      	b.n	8002026 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d107      	bne.n	8001ff4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fe4:	4b6a      	ldr	r3, [pc, #424]	; (8002190 <HAL_RCC_ClockConfig+0x264>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d109      	bne.n	8002004 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e0c6      	b.n	8002182 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ff4:	4b66      	ldr	r3, [pc, #408]	; (8002190 <HAL_RCC_ClockConfig+0x264>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d101      	bne.n	8002004 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e0be      	b.n	8002182 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002004:	f000 f8ce 	bl	80021a4 <HAL_RCC_GetSysClockFreq>
 8002008:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	4a61      	ldr	r2, [pc, #388]	; (8002194 <HAL_RCC_ClockConfig+0x268>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d909      	bls.n	8002026 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002012:	4b5f      	ldr	r3, [pc, #380]	; (8002190 <HAL_RCC_ClockConfig+0x264>)
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800201a:	4a5d      	ldr	r2, [pc, #372]	; (8002190 <HAL_RCC_ClockConfig+0x264>)
 800201c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002020:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002022:	2380      	movs	r3, #128	; 0x80
 8002024:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002026:	4b5a      	ldr	r3, [pc, #360]	; (8002190 <HAL_RCC_ClockConfig+0x264>)
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f023 0203 	bic.w	r2, r3, #3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	4957      	ldr	r1, [pc, #348]	; (8002190 <HAL_RCC_ClockConfig+0x264>)
 8002034:	4313      	orrs	r3, r2
 8002036:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002038:	f7fe fcb8 	bl	80009ac <HAL_GetTick>
 800203c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800203e:	e00a      	b.n	8002056 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002040:	f7fe fcb4 	bl	80009ac <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	f241 3288 	movw	r2, #5000	; 0x1388
 800204e:	4293      	cmp	r3, r2
 8002050:	d901      	bls.n	8002056 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e095      	b.n	8002182 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002056:	4b4e      	ldr	r3, [pc, #312]	; (8002190 <HAL_RCC_ClockConfig+0x264>)
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f003 020c 	and.w	r2, r3, #12
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	429a      	cmp	r2, r3
 8002066:	d1eb      	bne.n	8002040 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0302 	and.w	r3, r3, #2
 8002070:	2b00      	cmp	r3, #0
 8002072:	d023      	beq.n	80020bc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0304 	and.w	r3, r3, #4
 800207c:	2b00      	cmp	r3, #0
 800207e:	d005      	beq.n	800208c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002080:	4b43      	ldr	r3, [pc, #268]	; (8002190 <HAL_RCC_ClockConfig+0x264>)
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	4a42      	ldr	r2, [pc, #264]	; (8002190 <HAL_RCC_ClockConfig+0x264>)
 8002086:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800208a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0308 	and.w	r3, r3, #8
 8002094:	2b00      	cmp	r3, #0
 8002096:	d007      	beq.n	80020a8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002098:	4b3d      	ldr	r3, [pc, #244]	; (8002190 <HAL_RCC_ClockConfig+0x264>)
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80020a0:	4a3b      	ldr	r2, [pc, #236]	; (8002190 <HAL_RCC_ClockConfig+0x264>)
 80020a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020a8:	4b39      	ldr	r3, [pc, #228]	; (8002190 <HAL_RCC_ClockConfig+0x264>)
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	4936      	ldr	r1, [pc, #216]	; (8002190 <HAL_RCC_ClockConfig+0x264>)
 80020b6:	4313      	orrs	r3, r2
 80020b8:	608b      	str	r3, [r1, #8]
 80020ba:	e008      	b.n	80020ce <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	2b80      	cmp	r3, #128	; 0x80
 80020c0:	d105      	bne.n	80020ce <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80020c2:	4b33      	ldr	r3, [pc, #204]	; (8002190 <HAL_RCC_ClockConfig+0x264>)
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	4a32      	ldr	r2, [pc, #200]	; (8002190 <HAL_RCC_ClockConfig+0x264>)
 80020c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020cc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020ce:	4b2f      	ldr	r3, [pc, #188]	; (800218c <HAL_RCC_ClockConfig+0x260>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 030f 	and.w	r3, r3, #15
 80020d6:	683a      	ldr	r2, [r7, #0]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d21d      	bcs.n	8002118 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020dc:	4b2b      	ldr	r3, [pc, #172]	; (800218c <HAL_RCC_ClockConfig+0x260>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f023 020f 	bic.w	r2, r3, #15
 80020e4:	4929      	ldr	r1, [pc, #164]	; (800218c <HAL_RCC_ClockConfig+0x260>)
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80020ec:	f7fe fc5e 	bl	80009ac <HAL_GetTick>
 80020f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020f2:	e00a      	b.n	800210a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020f4:	f7fe fc5a 	bl	80009ac <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002102:	4293      	cmp	r3, r2
 8002104:	d901      	bls.n	800210a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e03b      	b.n	8002182 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800210a:	4b20      	ldr	r3, [pc, #128]	; (800218c <HAL_RCC_ClockConfig+0x260>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 030f 	and.w	r3, r3, #15
 8002112:	683a      	ldr	r2, [r7, #0]
 8002114:	429a      	cmp	r2, r3
 8002116:	d1ed      	bne.n	80020f4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0304 	and.w	r3, r3, #4
 8002120:	2b00      	cmp	r3, #0
 8002122:	d008      	beq.n	8002136 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002124:	4b1a      	ldr	r3, [pc, #104]	; (8002190 <HAL_RCC_ClockConfig+0x264>)
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	4917      	ldr	r1, [pc, #92]	; (8002190 <HAL_RCC_ClockConfig+0x264>)
 8002132:	4313      	orrs	r3, r2
 8002134:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0308 	and.w	r3, r3, #8
 800213e:	2b00      	cmp	r3, #0
 8002140:	d009      	beq.n	8002156 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002142:	4b13      	ldr	r3, [pc, #76]	; (8002190 <HAL_RCC_ClockConfig+0x264>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	691b      	ldr	r3, [r3, #16]
 800214e:	00db      	lsls	r3, r3, #3
 8002150:	490f      	ldr	r1, [pc, #60]	; (8002190 <HAL_RCC_ClockConfig+0x264>)
 8002152:	4313      	orrs	r3, r2
 8002154:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002156:	f000 f825 	bl	80021a4 <HAL_RCC_GetSysClockFreq>
 800215a:	4602      	mov	r2, r0
 800215c:	4b0c      	ldr	r3, [pc, #48]	; (8002190 <HAL_RCC_ClockConfig+0x264>)
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	091b      	lsrs	r3, r3, #4
 8002162:	f003 030f 	and.w	r3, r3, #15
 8002166:	490c      	ldr	r1, [pc, #48]	; (8002198 <HAL_RCC_ClockConfig+0x26c>)
 8002168:	5ccb      	ldrb	r3, [r1, r3]
 800216a:	f003 031f 	and.w	r3, r3, #31
 800216e:	fa22 f303 	lsr.w	r3, r2, r3
 8002172:	4a0a      	ldr	r2, [pc, #40]	; (800219c <HAL_RCC_ClockConfig+0x270>)
 8002174:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002176:	4b0a      	ldr	r3, [pc, #40]	; (80021a0 <HAL_RCC_ClockConfig+0x274>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4618      	mov	r0, r3
 800217c:	f7fe fbca 	bl	8000914 <HAL_InitTick>
 8002180:	4603      	mov	r3, r0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3718      	adds	r7, #24
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	40022000 	.word	0x40022000
 8002190:	40021000 	.word	0x40021000
 8002194:	04c4b400 	.word	0x04c4b400
 8002198:	08002810 	.word	0x08002810
 800219c:	20000004 	.word	0x20000004
 80021a0:	20000008 	.word	0x20000008

080021a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b087      	sub	sp, #28
 80021a8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80021aa:	4b2c      	ldr	r3, [pc, #176]	; (800225c <HAL_RCC_GetSysClockFreq+0xb8>)
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f003 030c 	and.w	r3, r3, #12
 80021b2:	2b04      	cmp	r3, #4
 80021b4:	d102      	bne.n	80021bc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80021b6:	4b2a      	ldr	r3, [pc, #168]	; (8002260 <HAL_RCC_GetSysClockFreq+0xbc>)
 80021b8:	613b      	str	r3, [r7, #16]
 80021ba:	e047      	b.n	800224c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80021bc:	4b27      	ldr	r3, [pc, #156]	; (800225c <HAL_RCC_GetSysClockFreq+0xb8>)
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	f003 030c 	and.w	r3, r3, #12
 80021c4:	2b08      	cmp	r3, #8
 80021c6:	d102      	bne.n	80021ce <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80021c8:	4b26      	ldr	r3, [pc, #152]	; (8002264 <HAL_RCC_GetSysClockFreq+0xc0>)
 80021ca:	613b      	str	r3, [r7, #16]
 80021cc:	e03e      	b.n	800224c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80021ce:	4b23      	ldr	r3, [pc, #140]	; (800225c <HAL_RCC_GetSysClockFreq+0xb8>)
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f003 030c 	and.w	r3, r3, #12
 80021d6:	2b0c      	cmp	r3, #12
 80021d8:	d136      	bne.n	8002248 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80021da:	4b20      	ldr	r3, [pc, #128]	; (800225c <HAL_RCC_GetSysClockFreq+0xb8>)
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	f003 0303 	and.w	r3, r3, #3
 80021e2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021e4:	4b1d      	ldr	r3, [pc, #116]	; (800225c <HAL_RCC_GetSysClockFreq+0xb8>)
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	091b      	lsrs	r3, r3, #4
 80021ea:	f003 030f 	and.w	r3, r3, #15
 80021ee:	3301      	adds	r3, #1
 80021f0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2b03      	cmp	r3, #3
 80021f6:	d10c      	bne.n	8002212 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80021f8:	4a1a      	ldr	r2, [pc, #104]	; (8002264 <HAL_RCC_GetSysClockFreq+0xc0>)
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002200:	4a16      	ldr	r2, [pc, #88]	; (800225c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002202:	68d2      	ldr	r2, [r2, #12]
 8002204:	0a12      	lsrs	r2, r2, #8
 8002206:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800220a:	fb02 f303 	mul.w	r3, r2, r3
 800220e:	617b      	str	r3, [r7, #20]
      break;
 8002210:	e00c      	b.n	800222c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002212:	4a13      	ldr	r2, [pc, #76]	; (8002260 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	fbb2 f3f3 	udiv	r3, r2, r3
 800221a:	4a10      	ldr	r2, [pc, #64]	; (800225c <HAL_RCC_GetSysClockFreq+0xb8>)
 800221c:	68d2      	ldr	r2, [r2, #12]
 800221e:	0a12      	lsrs	r2, r2, #8
 8002220:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002224:	fb02 f303 	mul.w	r3, r2, r3
 8002228:	617b      	str	r3, [r7, #20]
      break;
 800222a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800222c:	4b0b      	ldr	r3, [pc, #44]	; (800225c <HAL_RCC_GetSysClockFreq+0xb8>)
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	0e5b      	lsrs	r3, r3, #25
 8002232:	f003 0303 	and.w	r3, r3, #3
 8002236:	3301      	adds	r3, #1
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800223c:	697a      	ldr	r2, [r7, #20]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	fbb2 f3f3 	udiv	r3, r2, r3
 8002244:	613b      	str	r3, [r7, #16]
 8002246:	e001      	b.n	800224c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002248:	2300      	movs	r3, #0
 800224a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800224c:	693b      	ldr	r3, [r7, #16]
}
 800224e:	4618      	mov	r0, r3
 8002250:	371c      	adds	r7, #28
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	40021000 	.word	0x40021000
 8002260:	00f42400 	.word	0x00f42400
 8002264:	016e3600 	.word	0x016e3600

08002268 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002268:	b480      	push	{r7}
 800226a:	b087      	sub	sp, #28
 800226c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800226e:	4b1e      	ldr	r3, [pc, #120]	; (80022e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	f003 0303 	and.w	r3, r3, #3
 8002276:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002278:	4b1b      	ldr	r3, [pc, #108]	; (80022e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	091b      	lsrs	r3, r3, #4
 800227e:	f003 030f 	and.w	r3, r3, #15
 8002282:	3301      	adds	r3, #1
 8002284:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	2b03      	cmp	r3, #3
 800228a:	d10c      	bne.n	80022a6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800228c:	4a17      	ldr	r2, [pc, #92]	; (80022ec <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	fbb2 f3f3 	udiv	r3, r2, r3
 8002294:	4a14      	ldr	r2, [pc, #80]	; (80022e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002296:	68d2      	ldr	r2, [r2, #12]
 8002298:	0a12      	lsrs	r2, r2, #8
 800229a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800229e:	fb02 f303 	mul.w	r3, r2, r3
 80022a2:	617b      	str	r3, [r7, #20]
    break;
 80022a4:	e00c      	b.n	80022c0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80022a6:	4a12      	ldr	r2, [pc, #72]	; (80022f0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ae:	4a0e      	ldr	r2, [pc, #56]	; (80022e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80022b0:	68d2      	ldr	r2, [r2, #12]
 80022b2:	0a12      	lsrs	r2, r2, #8
 80022b4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80022b8:	fb02 f303 	mul.w	r3, r2, r3
 80022bc:	617b      	str	r3, [r7, #20]
    break;
 80022be:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80022c0:	4b09      	ldr	r3, [pc, #36]	; (80022e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	0e5b      	lsrs	r3, r3, #25
 80022c6:	f003 0303 	and.w	r3, r3, #3
 80022ca:	3301      	adds	r3, #1
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80022d0:	697a      	ldr	r2, [r7, #20]
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022d8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80022da:	687b      	ldr	r3, [r7, #4]
}
 80022dc:	4618      	mov	r0, r3
 80022de:	371c      	adds	r7, #28
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr
 80022e8:	40021000 	.word	0x40021000
 80022ec:	016e3600 	.word	0x016e3600
 80022f0:	00f42400 	.word	0x00f42400

080022f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b086      	sub	sp, #24
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80022fc:	2300      	movs	r3, #0
 80022fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002300:	2300      	movs	r3, #0
 8002302:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800230c:	2b00      	cmp	r3, #0
 800230e:	f000 8098 	beq.w	8002442 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002312:	2300      	movs	r3, #0
 8002314:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002316:	4b43      	ldr	r3, [pc, #268]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800231a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d10d      	bne.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002322:	4b40      	ldr	r3, [pc, #256]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002326:	4a3f      	ldr	r2, [pc, #252]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002328:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800232c:	6593      	str	r3, [r2, #88]	; 0x58
 800232e:	4b3d      	ldr	r3, [pc, #244]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002336:	60bb      	str	r3, [r7, #8]
 8002338:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800233a:	2301      	movs	r3, #1
 800233c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800233e:	4b3a      	ldr	r3, [pc, #232]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a39      	ldr	r2, [pc, #228]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002344:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002348:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800234a:	f7fe fb2f 	bl	80009ac <HAL_GetTick>
 800234e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002350:	e009      	b.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002352:	f7fe fb2b 	bl	80009ac <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	2b02      	cmp	r3, #2
 800235e:	d902      	bls.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	74fb      	strb	r3, [r7, #19]
        break;
 8002364:	e005      	b.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002366:	4b30      	ldr	r3, [pc, #192]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800236e:	2b00      	cmp	r3, #0
 8002370:	d0ef      	beq.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002372:	7cfb      	ldrb	r3, [r7, #19]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d159      	bne.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002378:	4b2a      	ldr	r3, [pc, #168]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800237a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800237e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002382:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d01e      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800238e:	697a      	ldr	r2, [r7, #20]
 8002390:	429a      	cmp	r2, r3
 8002392:	d019      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002394:	4b23      	ldr	r3, [pc, #140]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800239a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800239e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80023a0:	4b20      	ldr	r3, [pc, #128]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023a6:	4a1f      	ldr	r2, [pc, #124]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80023b0:	4b1c      	ldr	r3, [pc, #112]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b6:	4a1b      	ldr	r2, [pc, #108]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80023c0:	4a18      	ldr	r2, [pc, #96]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d016      	beq.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d2:	f7fe faeb 	bl	80009ac <HAL_GetTick>
 80023d6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023d8:	e00b      	b.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023da:	f7fe fae7 	bl	80009ac <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d902      	bls.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	74fb      	strb	r3, [r7, #19]
            break;
 80023f0:	e006      	b.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023f2:	4b0c      	ldr	r3, [pc, #48]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f8:	f003 0302 	and.w	r3, r3, #2
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d0ec      	beq.n	80023da <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002400:	7cfb      	ldrb	r3, [r7, #19]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d10b      	bne.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002406:	4b07      	ldr	r3, [pc, #28]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800240c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002414:	4903      	ldr	r1, [pc, #12]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002416:	4313      	orrs	r3, r2
 8002418:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800241c:	e008      	b.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800241e:	7cfb      	ldrb	r3, [r7, #19]
 8002420:	74bb      	strb	r3, [r7, #18]
 8002422:	e005      	b.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002424:	40021000 	.word	0x40021000
 8002428:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800242c:	7cfb      	ldrb	r3, [r7, #19]
 800242e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002430:	7c7b      	ldrb	r3, [r7, #17]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d105      	bne.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002436:	4ba7      	ldr	r3, [pc, #668]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800243a:	4aa6      	ldr	r2, [pc, #664]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800243c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002440:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	2b00      	cmp	r3, #0
 800244c:	d00a      	beq.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800244e:	4ba1      	ldr	r3, [pc, #644]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002450:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002454:	f023 0203 	bic.w	r2, r3, #3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	499d      	ldr	r1, [pc, #628]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800245e:	4313      	orrs	r3, r2
 8002460:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d00a      	beq.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002470:	4b98      	ldr	r3, [pc, #608]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002476:	f023 020c 	bic.w	r2, r3, #12
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	4995      	ldr	r1, [pc, #596]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002480:	4313      	orrs	r3, r2
 8002482:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0304 	and.w	r3, r3, #4
 800248e:	2b00      	cmp	r3, #0
 8002490:	d00a      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002492:	4b90      	ldr	r3, [pc, #576]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002494:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002498:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	498c      	ldr	r1, [pc, #560]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0308 	and.w	r3, r3, #8
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d00a      	beq.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80024b4:	4b87      	ldr	r3, [pc, #540]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	4984      	ldr	r1, [pc, #528]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0310 	and.w	r3, r3, #16
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00a      	beq.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80024d6:	4b7f      	ldr	r3, [pc, #508]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	695b      	ldr	r3, [r3, #20]
 80024e4:	497b      	ldr	r1, [pc, #492]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0320 	and.w	r3, r3, #32
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d00a      	beq.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80024f8:	4b76      	ldr	r3, [pc, #472]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024fe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	699b      	ldr	r3, [r3, #24]
 8002506:	4973      	ldr	r1, [pc, #460]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002508:	4313      	orrs	r3, r2
 800250a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00a      	beq.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800251a:	4b6e      	ldr	r3, [pc, #440]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800251c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002520:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	69db      	ldr	r3, [r3, #28]
 8002528:	496a      	ldr	r1, [pc, #424]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800252a:	4313      	orrs	r3, r2
 800252c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002538:	2b00      	cmp	r3, #0
 800253a:	d00a      	beq.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800253c:	4b65      	ldr	r3, [pc, #404]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800253e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002542:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a1b      	ldr	r3, [r3, #32]
 800254a:	4962      	ldr	r1, [pc, #392]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800254c:	4313      	orrs	r3, r2
 800254e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800255a:	2b00      	cmp	r3, #0
 800255c:	d00a      	beq.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800255e:	4b5d      	ldr	r3, [pc, #372]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002560:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002564:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256c:	4959      	ldr	r1, [pc, #356]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800256e:	4313      	orrs	r3, r2
 8002570:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d00a      	beq.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002580:	4b54      	ldr	r3, [pc, #336]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002582:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002586:	f023 0203 	bic.w	r2, r3, #3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800258e:	4951      	ldr	r1, [pc, #324]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002590:	4313      	orrs	r3, r2
 8002592:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d00a      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80025a2:	4b4c      	ldr	r3, [pc, #304]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b0:	4948      	ldr	r1, [pc, #288]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d015      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025c4:	4b43      	ldr	r3, [pc, #268]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d2:	4940      	ldr	r1, [pc, #256]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025e2:	d105      	bne.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025e4:	4b3b      	ldr	r3, [pc, #236]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	4a3a      	ldr	r2, [pc, #232]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025ee:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d015      	beq.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80025fc:	4b35      	ldr	r3, [pc, #212]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002602:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800260a:	4932      	ldr	r1, [pc, #200]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800260c:	4313      	orrs	r3, r2
 800260e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002616:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800261a:	d105      	bne.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800261c:	4b2d      	ldr	r3, [pc, #180]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	4a2c      	ldr	r2, [pc, #176]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002622:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002626:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d015      	beq.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002634:	4b27      	ldr	r3, [pc, #156]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800263a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002642:	4924      	ldr	r1, [pc, #144]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002644:	4313      	orrs	r3, r2
 8002646:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800264e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002652:	d105      	bne.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002654:	4b1f      	ldr	r3, [pc, #124]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	4a1e      	ldr	r2, [pc, #120]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800265a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800265e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d015      	beq.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800266c:	4b19      	ldr	r3, [pc, #100]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800266e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002672:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800267a:	4916      	ldr	r1, [pc, #88]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800267c:	4313      	orrs	r3, r2
 800267e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002686:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800268a:	d105      	bne.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800268c:	4b11      	ldr	r3, [pc, #68]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	4a10      	ldr	r2, [pc, #64]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002692:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002696:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d019      	beq.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80026a4:	4b0b      	ldr	r3, [pc, #44]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	4908      	ldr	r1, [pc, #32]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026c2:	d109      	bne.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026c4:	4b03      	ldr	r3, [pc, #12]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	4a02      	ldr	r2, [pc, #8]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026ce:	60d3      	str	r3, [r2, #12]
 80026d0:	e002      	b.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80026d2:	bf00      	nop
 80026d4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d015      	beq.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80026e4:	4b29      	ldr	r3, [pc, #164]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80026e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f2:	4926      	ldr	r1, [pc, #152]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002702:	d105      	bne.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002704:	4b21      	ldr	r3, [pc, #132]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	4a20      	ldr	r2, [pc, #128]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800270a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800270e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d015      	beq.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800271c:	4b1b      	ldr	r3, [pc, #108]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800271e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002722:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800272a:	4918      	ldr	r1, [pc, #96]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800272c:	4313      	orrs	r3, r2
 800272e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002736:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800273a:	d105      	bne.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800273c:	4b13      	ldr	r3, [pc, #76]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	4a12      	ldr	r2, [pc, #72]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002742:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002746:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d015      	beq.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002754:	4b0d      	ldr	r3, [pc, #52]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002756:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800275a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002762:	490a      	ldr	r1, [pc, #40]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002764:	4313      	orrs	r3, r2
 8002766:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800276e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002772:	d105      	bne.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002774:	4b05      	ldr	r3, [pc, #20]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	4a04      	ldr	r2, [pc, #16]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800277a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800277e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002780:	7cbb      	ldrb	r3, [r7, #18]
}
 8002782:	4618      	mov	r0, r3
 8002784:	3718      	adds	r7, #24
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	40021000 	.word	0x40021000

08002790 <memset>:
 8002790:	4402      	add	r2, r0
 8002792:	4603      	mov	r3, r0
 8002794:	4293      	cmp	r3, r2
 8002796:	d100      	bne.n	800279a <memset+0xa>
 8002798:	4770      	bx	lr
 800279a:	f803 1b01 	strb.w	r1, [r3], #1
 800279e:	e7f9      	b.n	8002794 <memset+0x4>

080027a0 <__libc_init_array>:
 80027a0:	b570      	push	{r4, r5, r6, lr}
 80027a2:	4d0d      	ldr	r5, [pc, #52]	; (80027d8 <__libc_init_array+0x38>)
 80027a4:	4c0d      	ldr	r4, [pc, #52]	; (80027dc <__libc_init_array+0x3c>)
 80027a6:	1b64      	subs	r4, r4, r5
 80027a8:	10a4      	asrs	r4, r4, #2
 80027aa:	2600      	movs	r6, #0
 80027ac:	42a6      	cmp	r6, r4
 80027ae:	d109      	bne.n	80027c4 <__libc_init_array+0x24>
 80027b0:	4d0b      	ldr	r5, [pc, #44]	; (80027e0 <__libc_init_array+0x40>)
 80027b2:	4c0c      	ldr	r4, [pc, #48]	; (80027e4 <__libc_init_array+0x44>)
 80027b4:	f000 f818 	bl	80027e8 <_init>
 80027b8:	1b64      	subs	r4, r4, r5
 80027ba:	10a4      	asrs	r4, r4, #2
 80027bc:	2600      	movs	r6, #0
 80027be:	42a6      	cmp	r6, r4
 80027c0:	d105      	bne.n	80027ce <__libc_init_array+0x2e>
 80027c2:	bd70      	pop	{r4, r5, r6, pc}
 80027c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80027c8:	4798      	blx	r3
 80027ca:	3601      	adds	r6, #1
 80027cc:	e7ee      	b.n	80027ac <__libc_init_array+0xc>
 80027ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80027d2:	4798      	blx	r3
 80027d4:	3601      	adds	r6, #1
 80027d6:	e7f2      	b.n	80027be <__libc_init_array+0x1e>
 80027d8:	08002820 	.word	0x08002820
 80027dc:	08002820 	.word	0x08002820
 80027e0:	08002820 	.word	0x08002820
 80027e4:	08002824 	.word	0x08002824

080027e8 <_init>:
 80027e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027ea:	bf00      	nop
 80027ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027ee:	bc08      	pop	{r3}
 80027f0:	469e      	mov	lr, r3
 80027f2:	4770      	bx	lr

080027f4 <_fini>:
 80027f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027f6:	bf00      	nop
 80027f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027fa:	bc08      	pop	{r3}
 80027fc:	469e      	mov	lr, r3
 80027fe:	4770      	bx	lr
