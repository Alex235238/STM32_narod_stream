
pwm_474.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a20  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08003c00  08003c00  00013c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c5c  08003c5c  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08003c5c  08003c5c  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c5c  08003c5c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c5c  08003c5c  00013c5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c60  08003c60  00013c60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003c64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  20000068  08003ccc  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  08003ccc  00020270  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ac4a  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b1b  00000000  00000000  0002ad25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ca0  00000000  00000000  0002c840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009ad  00000000  00000000  0002d4e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002627b  00000000  00000000  0002de8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d0cf  00000000  00000000  00054108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f69e4  00000000  00000000  000611d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003c30  00000000  00000000  00157bbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0015b7ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	08003be8 	.word	0x08003be8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	08003be8 	.word	0x08003be8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80002c8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002cc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80002d0:	f003 0301 	and.w	r3, r3, #1
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d013      	beq.n	8000300 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80002d8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002dc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80002e0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d00b      	beq.n	8000300 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80002e8:	e000      	b.n	80002ec <ITM_SendChar+0x2c>
    {
      __NOP();
 80002ea:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80002ec:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d0f9      	beq.n	80002ea <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80002f6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002fa:	687a      	ldr	r2, [r7, #4]
 80002fc:	b2d2      	uxtb	r2, r2
 80002fe:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000300:	687b      	ldr	r3, [r7, #4]
}
 8000302:	4618      	mov	r0, r3
 8000304:	370c      	adds	r7, #12
 8000306:	46bd      	mov	sp, r7
 8000308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030c:	4770      	bx	lr

0800030e <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 800030e:	b580      	push	{r7, lr}
 8000310:	b086      	sub	sp, #24
 8000312:	af00      	add	r7, sp, #0
 8000314:	60f8      	str	r0, [r7, #12]
 8000316:	60b9      	str	r1, [r7, #8]
 8000318:	607a      	str	r2, [r7, #4]
	int i = 0;
 800031a:	2300      	movs	r3, #0
 800031c:	617b      	str	r3, [r7, #20]
	for(i=0;i<len;i++)
 800031e:	2300      	movs	r3, #0
 8000320:	617b      	str	r3, [r7, #20]
 8000322:	e009      	b.n	8000338 <_write+0x2a>
	  ITM_SendChar((*ptr++));
 8000324:	68bb      	ldr	r3, [r7, #8]
 8000326:	1c5a      	adds	r2, r3, #1
 8000328:	60ba      	str	r2, [r7, #8]
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	4618      	mov	r0, r3
 800032e:	f7ff ffc7 	bl	80002c0 <ITM_SendChar>
	for(i=0;i<len;i++)
 8000332:	697b      	ldr	r3, [r7, #20]
 8000334:	3301      	adds	r3, #1
 8000336:	617b      	str	r3, [r7, #20]
 8000338:	697a      	ldr	r2, [r7, #20]
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	429a      	cmp	r2, r3
 800033e:	dbf1      	blt.n	8000324 <_write+0x16>
	return len;
 8000340:	687b      	ldr	r3, [r7, #4]
}
 8000342:	4618      	mov	r0, r3
 8000344:	3718      	adds	r7, #24
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
	...

0800034c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b082      	sub	sp, #8
 8000350:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000352:	f000 fb5a 	bl	8000a0a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000356:	f000 f859 	bl	800040c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800035a:	f000 f98f 	bl	800067c <MX_GPIO_Init>
  MX_TIM2_Init();
 800035e:	f000 f8a1 	bl	80004a4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000362:	f000 f915 	bl	8000590 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000366:	2108      	movs	r1, #8
 8000368:	4823      	ldr	r0, [pc, #140]	; (80003f8 <main+0xac>)
 800036a:	f001 fc9f 	bl	8001cac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800036e:	2100      	movs	r1, #0
 8000370:	4822      	ldr	r0, [pc, #136]	; (80003fc <main+0xb0>)
 8000372:	f001 fc9b 	bl	8001cac <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  for(int i=0;i<=255; i++)
 8000376:	2300      	movs	r3, #0
 8000378:	607b      	str	r3, [r7, #4]
 800037a:	e019      	b.n	80003b0 <main+0x64>
	  	{
	  		TIM2->CCR3 = i;
 800037c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	63d3      	str	r3, [r2, #60]	; 0x3c
	  		TIM3->CCR1 = 255 - i;
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 800038a:	4b1d      	ldr	r3, [pc, #116]	; (8000400 <main+0xb4>)
 800038c:	635a      	str	r2, [r3, #52]	; 0x34
	  		printf("CCR1 = %d \n", i);
 800038e:	6879      	ldr	r1, [r7, #4]
 8000390:	481c      	ldr	r0, [pc, #112]	; (8000404 <main+0xb8>)
 8000392:	f002 fdb3 	bl	8002efc <iprintf>
	  		printf("CCR3 = %d \n", 255 - i);
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800039c:	4619      	mov	r1, r3
 800039e:	481a      	ldr	r0, [pc, #104]	; (8000408 <main+0xbc>)
 80003a0:	f002 fdac 	bl	8002efc <iprintf>
	  		HAL_Delay(1);
 80003a4:	2001      	movs	r0, #1
 80003a6:	f000 fba1 	bl	8000aec <HAL_Delay>
	  for(int i=0;i<=255; i++)
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	3301      	adds	r3, #1
 80003ae:	607b      	str	r3, [r7, #4]
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	2bff      	cmp	r3, #255	; 0xff
 80003b4:	dde2      	ble.n	800037c <main+0x30>
	  	}
	  	for(int i=0;i<=255; i++)
 80003b6:	2300      	movs	r3, #0
 80003b8:	603b      	str	r3, [r7, #0]
 80003ba:	e019      	b.n	80003f0 <main+0xa4>
	  	{
	  		TIM3->CCR1 = i;
 80003bc:	4a10      	ldr	r2, [pc, #64]	; (8000400 <main+0xb4>)
 80003be:	683b      	ldr	r3, [r7, #0]
 80003c0:	6353      	str	r3, [r2, #52]	; 0x34
	  		TIM2->CCR3 = 255 - i;
 80003c2:	683b      	ldr	r3, [r7, #0]
 80003c4:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 80003c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003cc:	63da      	str	r2, [r3, #60]	; 0x3c
	  		printf("CCR1 = %d \n", 255 - i);
 80003ce:	683b      	ldr	r3, [r7, #0]
 80003d0:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80003d4:	4619      	mov	r1, r3
 80003d6:	480b      	ldr	r0, [pc, #44]	; (8000404 <main+0xb8>)
 80003d8:	f002 fd90 	bl	8002efc <iprintf>
	  		printf("CCR3 = %d \n", i);
 80003dc:	6839      	ldr	r1, [r7, #0]
 80003de:	480a      	ldr	r0, [pc, #40]	; (8000408 <main+0xbc>)
 80003e0:	f002 fd8c 	bl	8002efc <iprintf>
	  		HAL_Delay(1);
 80003e4:	2001      	movs	r0, #1
 80003e6:	f000 fb81 	bl	8000aec <HAL_Delay>
	  	for(int i=0;i<=255; i++)
 80003ea:	683b      	ldr	r3, [r7, #0]
 80003ec:	3301      	adds	r3, #1
 80003ee:	603b      	str	r3, [r7, #0]
 80003f0:	683b      	ldr	r3, [r7, #0]
 80003f2:	2bff      	cmp	r3, #255	; 0xff
 80003f4:	dde2      	ble.n	80003bc <main+0x70>
	  for(int i=0;i<=255; i++)
 80003f6:	e7be      	b.n	8000376 <main+0x2a>
 80003f8:	20000084 	.word	0x20000084
 80003fc:	200000d0 	.word	0x200000d0
 8000400:	40000400 	.word	0x40000400
 8000404:	08003c00 	.word	0x08003c00
 8000408:	08003c0c 	.word	0x08003c0c

0800040c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b094      	sub	sp, #80	; 0x50
 8000410:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000412:	f107 0318 	add.w	r3, r7, #24
 8000416:	2238      	movs	r2, #56	; 0x38
 8000418:	2100      	movs	r1, #0
 800041a:	4618      	mov	r0, r3
 800041c:	f002 fdc3 	bl	8002fa6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000420:	1d3b      	adds	r3, r7, #4
 8000422:	2200      	movs	r2, #0
 8000424:	601a      	str	r2, [r3, #0]
 8000426:	605a      	str	r2, [r3, #4]
 8000428:	609a      	str	r2, [r3, #8]
 800042a:	60da      	str	r2, [r3, #12]
 800042c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800042e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000432:	f000 fde3 	bl	8000ffc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000436:	2302      	movs	r3, #2
 8000438:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800043a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800043e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000440:	2340      	movs	r3, #64	; 0x40
 8000442:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000444:	2302      	movs	r3, #2
 8000446:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000448:	2302      	movs	r3, #2
 800044a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800044c:	2301      	movs	r3, #1
 800044e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000450:	2308      	movs	r3, #8
 8000452:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000454:	2302      	movs	r3, #2
 8000456:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000458:	2302      	movs	r3, #2
 800045a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800045c:	2302      	movs	r3, #2
 800045e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000460:	f107 0318 	add.w	r3, r7, #24
 8000464:	4618      	mov	r0, r3
 8000466:	f000 fe6d 	bl	8001144 <HAL_RCC_OscConfig>
 800046a:	4603      	mov	r3, r0
 800046c:	2b00      	cmp	r3, #0
 800046e:	d001      	beq.n	8000474 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000470:	f000 f928 	bl	80006c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000474:	230f      	movs	r3, #15
 8000476:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000478:	2303      	movs	r3, #3
 800047a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 800047c:	2390      	movs	r3, #144	; 0x90
 800047e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000480:	2300      	movs	r3, #0
 8000482:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000484:	2300      	movs	r3, #0
 8000486:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000488:	1d3b      	adds	r3, r7, #4
 800048a:	2100      	movs	r1, #0
 800048c:	4618      	mov	r0, r3
 800048e:	f001 f971 	bl	8001774 <HAL_RCC_ClockConfig>
 8000492:	4603      	mov	r3, r0
 8000494:	2b00      	cmp	r3, #0
 8000496:	d001      	beq.n	800049c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000498:	f000 f914 	bl	80006c4 <Error_Handler>
  }
}
 800049c:	bf00      	nop
 800049e:	3750      	adds	r7, #80	; 0x50
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd80      	pop	{r7, pc}

080004a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b08e      	sub	sp, #56	; 0x38
 80004a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004ae:	2200      	movs	r2, #0
 80004b0:	601a      	str	r2, [r3, #0]
 80004b2:	605a      	str	r2, [r3, #4]
 80004b4:	609a      	str	r2, [r3, #8]
 80004b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004b8:	f107 031c 	add.w	r3, r7, #28
 80004bc:	2200      	movs	r2, #0
 80004be:	601a      	str	r2, [r3, #0]
 80004c0:	605a      	str	r2, [r3, #4]
 80004c2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004c4:	463b      	mov	r3, r7
 80004c6:	2200      	movs	r2, #0
 80004c8:	601a      	str	r2, [r3, #0]
 80004ca:	605a      	str	r2, [r3, #4]
 80004cc:	609a      	str	r2, [r3, #8]
 80004ce:	60da      	str	r2, [r3, #12]
 80004d0:	611a      	str	r2, [r3, #16]
 80004d2:	615a      	str	r2, [r3, #20]
 80004d4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80004d6:	4b2d      	ldr	r3, [pc, #180]	; (800058c <MX_TIM2_Init+0xe8>)
 80004d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004dc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64;
 80004de:	4b2b      	ldr	r3, [pc, #172]	; (800058c <MX_TIM2_Init+0xe8>)
 80004e0:	2240      	movs	r2, #64	; 0x40
 80004e2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004e4:	4b29      	ldr	r3, [pc, #164]	; (800058c <MX_TIM2_Init+0xe8>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 80004ea:	4b28      	ldr	r3, [pc, #160]	; (800058c <MX_TIM2_Init+0xe8>)
 80004ec:	22ff      	movs	r2, #255	; 0xff
 80004ee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004f0:	4b26      	ldr	r3, [pc, #152]	; (800058c <MX_TIM2_Init+0xe8>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004f6:	4b25      	ldr	r3, [pc, #148]	; (800058c <MX_TIM2_Init+0xe8>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80004fc:	4823      	ldr	r0, [pc, #140]	; (800058c <MX_TIM2_Init+0xe8>)
 80004fe:	f001 fb1d 	bl	8001b3c <HAL_TIM_Base_Init>
 8000502:	4603      	mov	r3, r0
 8000504:	2b00      	cmp	r3, #0
 8000506:	d001      	beq.n	800050c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000508:	f000 f8dc 	bl	80006c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800050c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000510:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000512:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000516:	4619      	mov	r1, r3
 8000518:	481c      	ldr	r0, [pc, #112]	; (800058c <MX_TIM2_Init+0xe8>)
 800051a:	f001 fded 	bl	80020f8 <HAL_TIM_ConfigClockSource>
 800051e:	4603      	mov	r3, r0
 8000520:	2b00      	cmp	r3, #0
 8000522:	d001      	beq.n	8000528 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000524:	f000 f8ce 	bl	80006c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000528:	4818      	ldr	r0, [pc, #96]	; (800058c <MX_TIM2_Init+0xe8>)
 800052a:	f001 fb5e 	bl	8001bea <HAL_TIM_PWM_Init>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d001      	beq.n	8000538 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000534:	f000 f8c6 	bl	80006c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000538:	2300      	movs	r3, #0
 800053a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800053c:	2300      	movs	r3, #0
 800053e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000540:	f107 031c 	add.w	r3, r7, #28
 8000544:	4619      	mov	r1, r3
 8000546:	4811      	ldr	r0, [pc, #68]	; (800058c <MX_TIM2_Init+0xe8>)
 8000548:	f002 fb80 	bl	8002c4c <HAL_TIMEx_MasterConfigSynchronization>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d001      	beq.n	8000556 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000552:	f000 f8b7 	bl	80006c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000556:	2360      	movs	r3, #96	; 0x60
 8000558:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 128;
 800055a:	2380      	movs	r3, #128	; 0x80
 800055c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800055e:	2300      	movs	r3, #0
 8000560:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000562:	2300      	movs	r3, #0
 8000564:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000566:	463b      	mov	r3, r7
 8000568:	2208      	movs	r2, #8
 800056a:	4619      	mov	r1, r3
 800056c:	4807      	ldr	r0, [pc, #28]	; (800058c <MX_TIM2_Init+0xe8>)
 800056e:	f001 fcaf 	bl	8001ed0 <HAL_TIM_PWM_ConfigChannel>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000578:	f000 f8a4 	bl	80006c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800057c:	4803      	ldr	r0, [pc, #12]	; (800058c <MX_TIM2_Init+0xe8>)
 800057e:	f000 f8fd 	bl	800077c <HAL_TIM_MspPostInit>

}
 8000582:	bf00      	nop
 8000584:	3738      	adds	r7, #56	; 0x38
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	20000084 	.word	0x20000084

08000590 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b08e      	sub	sp, #56	; 0x38
 8000594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000596:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
 800059e:	605a      	str	r2, [r3, #4]
 80005a0:	609a      	str	r2, [r3, #8]
 80005a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005a4:	f107 031c 	add.w	r3, r7, #28
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005b0:	463b      	mov	r3, r7
 80005b2:	2200      	movs	r2, #0
 80005b4:	601a      	str	r2, [r3, #0]
 80005b6:	605a      	str	r2, [r3, #4]
 80005b8:	609a      	str	r2, [r3, #8]
 80005ba:	60da      	str	r2, [r3, #12]
 80005bc:	611a      	str	r2, [r3, #16]
 80005be:	615a      	str	r2, [r3, #20]
 80005c0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80005c2:	4b2c      	ldr	r3, [pc, #176]	; (8000674 <MX_TIM3_Init+0xe4>)
 80005c4:	4a2c      	ldr	r2, [pc, #176]	; (8000678 <MX_TIM3_Init+0xe8>)
 80005c6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64;
 80005c8:	4b2a      	ldr	r3, [pc, #168]	; (8000674 <MX_TIM3_Init+0xe4>)
 80005ca:	2240      	movs	r2, #64	; 0x40
 80005cc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005ce:	4b29      	ldr	r3, [pc, #164]	; (8000674 <MX_TIM3_Init+0xe4>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255;
 80005d4:	4b27      	ldr	r3, [pc, #156]	; (8000674 <MX_TIM3_Init+0xe4>)
 80005d6:	22ff      	movs	r2, #255	; 0xff
 80005d8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005da:	4b26      	ldr	r3, [pc, #152]	; (8000674 <MX_TIM3_Init+0xe4>)
 80005dc:	2200      	movs	r2, #0
 80005de:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005e0:	4b24      	ldr	r3, [pc, #144]	; (8000674 <MX_TIM3_Init+0xe4>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80005e6:	4823      	ldr	r0, [pc, #140]	; (8000674 <MX_TIM3_Init+0xe4>)
 80005e8:	f001 faa8 	bl	8001b3c <HAL_TIM_Base_Init>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80005f2:	f000 f867 	bl	80006c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005fa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80005fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000600:	4619      	mov	r1, r3
 8000602:	481c      	ldr	r0, [pc, #112]	; (8000674 <MX_TIM3_Init+0xe4>)
 8000604:	f001 fd78 	bl	80020f8 <HAL_TIM_ConfigClockSource>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800060e:	f000 f859 	bl	80006c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000612:	4818      	ldr	r0, [pc, #96]	; (8000674 <MX_TIM3_Init+0xe4>)
 8000614:	f001 fae9 	bl	8001bea <HAL_TIM_PWM_Init>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800061e:	f000 f851 	bl	80006c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000622:	2300      	movs	r3, #0
 8000624:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000626:	2300      	movs	r3, #0
 8000628:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800062a:	f107 031c 	add.w	r3, r7, #28
 800062e:	4619      	mov	r1, r3
 8000630:	4810      	ldr	r0, [pc, #64]	; (8000674 <MX_TIM3_Init+0xe4>)
 8000632:	f002 fb0b 	bl	8002c4c <HAL_TIMEx_MasterConfigSynchronization>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800063c:	f000 f842 	bl	80006c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000640:	2360      	movs	r3, #96	; 0x60
 8000642:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 128;
 8000644:	2380      	movs	r3, #128	; 0x80
 8000646:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000648:	2300      	movs	r3, #0
 800064a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800064c:	2300      	movs	r3, #0
 800064e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000650:	463b      	mov	r3, r7
 8000652:	2200      	movs	r2, #0
 8000654:	4619      	mov	r1, r3
 8000656:	4807      	ldr	r0, [pc, #28]	; (8000674 <MX_TIM3_Init+0xe4>)
 8000658:	f001 fc3a 	bl	8001ed0 <HAL_TIM_PWM_ConfigChannel>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000662:	f000 f82f 	bl	80006c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000666:	4803      	ldr	r0, [pc, #12]	; (8000674 <MX_TIM3_Init+0xe4>)
 8000668:	f000 f888 	bl	800077c <HAL_TIM_MspPostInit>

}
 800066c:	bf00      	nop
 800066e:	3738      	adds	r7, #56	; 0x38
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	200000d0 	.word	0x200000d0
 8000678:	40000400 	.word	0x40000400

0800067c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000682:	4b0f      	ldr	r3, [pc, #60]	; (80006c0 <MX_GPIO_Init+0x44>)
 8000684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000686:	4a0e      	ldr	r2, [pc, #56]	; (80006c0 <MX_GPIO_Init+0x44>)
 8000688:	f043 0302 	orr.w	r3, r3, #2
 800068c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800068e:	4b0c      	ldr	r3, [pc, #48]	; (80006c0 <MX_GPIO_Init+0x44>)
 8000690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000692:	f003 0302 	and.w	r3, r3, #2
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800069a:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <MX_GPIO_Init+0x44>)
 800069c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069e:	4a08      	ldr	r2, [pc, #32]	; (80006c0 <MX_GPIO_Init+0x44>)
 80006a0:	f043 0301 	orr.w	r3, r3, #1
 80006a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006a6:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <MX_GPIO_Init+0x44>)
 80006a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006aa:	f003 0301 	and.w	r3, r3, #1
 80006ae:	603b      	str	r3, [r7, #0]
 80006b0:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006b2:	bf00      	nop
 80006b4:	370c      	adds	r7, #12
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	40021000 	.word	0x40021000

080006c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006c8:	b672      	cpsid	i
}
 80006ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006cc:	e7fe      	b.n	80006cc <Error_Handler+0x8>
	...

080006d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006d6:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <HAL_MspInit+0x44>)
 80006d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006da:	4a0e      	ldr	r2, [pc, #56]	; (8000714 <HAL_MspInit+0x44>)
 80006dc:	f043 0301 	orr.w	r3, r3, #1
 80006e0:	6613      	str	r3, [r2, #96]	; 0x60
 80006e2:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <HAL_MspInit+0x44>)
 80006e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006e6:	f003 0301 	and.w	r3, r3, #1
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ee:	4b09      	ldr	r3, [pc, #36]	; (8000714 <HAL_MspInit+0x44>)
 80006f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006f2:	4a08      	ldr	r2, [pc, #32]	; (8000714 <HAL_MspInit+0x44>)
 80006f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f8:	6593      	str	r3, [r2, #88]	; 0x58
 80006fa:	4b06      	ldr	r3, [pc, #24]	; (8000714 <HAL_MspInit+0x44>)
 80006fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000702:	603b      	str	r3, [r7, #0]
 8000704:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000706:	bf00      	nop
 8000708:	370c      	adds	r7, #12
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	40021000 	.word	0x40021000

08000718 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000718:	b480      	push	{r7}
 800071a:	b085      	sub	sp, #20
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000728:	d10c      	bne.n	8000744 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800072a:	4b12      	ldr	r3, [pc, #72]	; (8000774 <HAL_TIM_Base_MspInit+0x5c>)
 800072c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800072e:	4a11      	ldr	r2, [pc, #68]	; (8000774 <HAL_TIM_Base_MspInit+0x5c>)
 8000730:	f043 0301 	orr.w	r3, r3, #1
 8000734:	6593      	str	r3, [r2, #88]	; 0x58
 8000736:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <HAL_TIM_Base_MspInit+0x5c>)
 8000738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800073a:	f003 0301 	and.w	r3, r3, #1
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000742:	e010      	b.n	8000766 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a0b      	ldr	r2, [pc, #44]	; (8000778 <HAL_TIM_Base_MspInit+0x60>)
 800074a:	4293      	cmp	r3, r2
 800074c:	d10b      	bne.n	8000766 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800074e:	4b09      	ldr	r3, [pc, #36]	; (8000774 <HAL_TIM_Base_MspInit+0x5c>)
 8000750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000752:	4a08      	ldr	r2, [pc, #32]	; (8000774 <HAL_TIM_Base_MspInit+0x5c>)
 8000754:	f043 0302 	orr.w	r3, r3, #2
 8000758:	6593      	str	r3, [r2, #88]	; 0x58
 800075a:	4b06      	ldr	r3, [pc, #24]	; (8000774 <HAL_TIM_Base_MspInit+0x5c>)
 800075c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800075e:	f003 0302 	and.w	r3, r3, #2
 8000762:	60bb      	str	r3, [r7, #8]
 8000764:	68bb      	ldr	r3, [r7, #8]
}
 8000766:	bf00      	nop
 8000768:	3714      	adds	r7, #20
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	40021000 	.word	0x40021000
 8000778:	40000400 	.word	0x40000400

0800077c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b08a      	sub	sp, #40	; 0x28
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000784:	f107 0314 	add.w	r3, r7, #20
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]
 8000792:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800079c:	d11d      	bne.n	80007da <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800079e:	4b21      	ldr	r3, [pc, #132]	; (8000824 <HAL_TIM_MspPostInit+0xa8>)
 80007a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a2:	4a20      	ldr	r2, [pc, #128]	; (8000824 <HAL_TIM_MspPostInit+0xa8>)
 80007a4:	f043 0302 	orr.w	r3, r3, #2
 80007a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007aa:	4b1e      	ldr	r3, [pc, #120]	; (8000824 <HAL_TIM_MspPostInit+0xa8>)
 80007ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ae:	f003 0302 	and.w	r3, r3, #2
 80007b2:	613b      	str	r3, [r7, #16]
 80007b4:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007bc:	2302      	movs	r3, #2
 80007be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c0:	2300      	movs	r3, #0
 80007c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c4:	2300      	movs	r3, #0
 80007c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80007c8:	2301      	movs	r3, #1
 80007ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007cc:	f107 0314 	add.w	r3, r7, #20
 80007d0:	4619      	mov	r1, r3
 80007d2:	4815      	ldr	r0, [pc, #84]	; (8000828 <HAL_TIM_MspPostInit+0xac>)
 80007d4:	f000 fa90 	bl	8000cf8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80007d8:	e020      	b.n	800081c <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM3)
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4a13      	ldr	r2, [pc, #76]	; (800082c <HAL_TIM_MspPostInit+0xb0>)
 80007e0:	4293      	cmp	r3, r2
 80007e2:	d11b      	bne.n	800081c <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e4:	4b0f      	ldr	r3, [pc, #60]	; (8000824 <HAL_TIM_MspPostInit+0xa8>)
 80007e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e8:	4a0e      	ldr	r2, [pc, #56]	; (8000824 <HAL_TIM_MspPostInit+0xa8>)
 80007ea:	f043 0302 	orr.w	r3, r3, #2
 80007ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007f0:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <HAL_TIM_MspPostInit+0xa8>)
 80007f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f4:	f003 0302 	and.w	r3, r3, #2
 80007f8:	60fb      	str	r3, [r7, #12]
 80007fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80007fc:	2310      	movs	r3, #16
 80007fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000800:	2302      	movs	r3, #2
 8000802:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000808:	2300      	movs	r3, #0
 800080a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800080c:	2302      	movs	r3, #2
 800080e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000810:	f107 0314 	add.w	r3, r7, #20
 8000814:	4619      	mov	r1, r3
 8000816:	4804      	ldr	r0, [pc, #16]	; (8000828 <HAL_TIM_MspPostInit+0xac>)
 8000818:	f000 fa6e 	bl	8000cf8 <HAL_GPIO_Init>
}
 800081c:	bf00      	nop
 800081e:	3728      	adds	r7, #40	; 0x28
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	40021000 	.word	0x40021000
 8000828:	48000400 	.word	0x48000400
 800082c:	40000400 	.word	0x40000400

08000830 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000834:	e7fe      	b.n	8000834 <NMI_Handler+0x4>

08000836 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000836:	b480      	push	{r7}
 8000838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800083a:	e7fe      	b.n	800083a <HardFault_Handler+0x4>

0800083c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000840:	e7fe      	b.n	8000840 <MemManage_Handler+0x4>

08000842 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000842:	b480      	push	{r7}
 8000844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000846:	e7fe      	b.n	8000846 <BusFault_Handler+0x4>

08000848 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800084c:	e7fe      	b.n	800084c <UsageFault_Handler+0x4>

0800084e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800084e:	b480      	push	{r7}
 8000850:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000852:	bf00      	nop
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr

0800085c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000860:	bf00      	nop
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr

0800086a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800086a:	b480      	push	{r7}
 800086c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800086e:	bf00      	nop
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr

08000878 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800087c:	f000 f918 	bl	8000ab0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000880:	bf00      	nop
 8000882:	bd80      	pop	{r7, pc}

08000884 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b086      	sub	sp, #24
 8000888:	af00      	add	r7, sp, #0
 800088a:	60f8      	str	r0, [r7, #12]
 800088c:	60b9      	str	r1, [r7, #8]
 800088e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000890:	2300      	movs	r3, #0
 8000892:	617b      	str	r3, [r7, #20]
 8000894:	e00a      	b.n	80008ac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000896:	f3af 8000 	nop.w
 800089a:	4601      	mov	r1, r0
 800089c:	68bb      	ldr	r3, [r7, #8]
 800089e:	1c5a      	adds	r2, r3, #1
 80008a0:	60ba      	str	r2, [r7, #8]
 80008a2:	b2ca      	uxtb	r2, r1
 80008a4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008a6:	697b      	ldr	r3, [r7, #20]
 80008a8:	3301      	adds	r3, #1
 80008aa:	617b      	str	r3, [r7, #20]
 80008ac:	697a      	ldr	r2, [r7, #20]
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	429a      	cmp	r2, r3
 80008b2:	dbf0      	blt.n	8000896 <_read+0x12>
  }

  return len;
 80008b4:	687b      	ldr	r3, [r7, #4]
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	3718      	adds	r7, #24
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}

080008be <_close>:
  }
  return len;
}

int _close(int file)
{
 80008be:	b480      	push	{r7}
 80008c0:	b083      	sub	sp, #12
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80008c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	370c      	adds	r7, #12
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr

080008d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008d6:	b480      	push	{r7}
 80008d8:	b083      	sub	sp, #12
 80008da:	af00      	add	r7, sp, #0
 80008dc:	6078      	str	r0, [r7, #4]
 80008de:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008e6:	605a      	str	r2, [r3, #4]
  return 0;
 80008e8:	2300      	movs	r3, #0
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	370c      	adds	r7, #12
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr

080008f6 <_isatty>:

int _isatty(int file)
{
 80008f6:	b480      	push	{r7}
 80008f8:	b083      	sub	sp, #12
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80008fe:	2301      	movs	r3, #1
}
 8000900:	4618      	mov	r0, r3
 8000902:	370c      	adds	r7, #12
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr

0800090c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800090c:	b480      	push	{r7}
 800090e:	b085      	sub	sp, #20
 8000910:	af00      	add	r7, sp, #0
 8000912:	60f8      	str	r0, [r7, #12]
 8000914:	60b9      	str	r1, [r7, #8]
 8000916:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000918:	2300      	movs	r3, #0
}
 800091a:	4618      	mov	r0, r3
 800091c:	3714      	adds	r7, #20
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
	...

08000928 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b086      	sub	sp, #24
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000930:	4a14      	ldr	r2, [pc, #80]	; (8000984 <_sbrk+0x5c>)
 8000932:	4b15      	ldr	r3, [pc, #84]	; (8000988 <_sbrk+0x60>)
 8000934:	1ad3      	subs	r3, r2, r3
 8000936:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800093c:	4b13      	ldr	r3, [pc, #76]	; (800098c <_sbrk+0x64>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d102      	bne.n	800094a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000944:	4b11      	ldr	r3, [pc, #68]	; (800098c <_sbrk+0x64>)
 8000946:	4a12      	ldr	r2, [pc, #72]	; (8000990 <_sbrk+0x68>)
 8000948:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800094a:	4b10      	ldr	r3, [pc, #64]	; (800098c <_sbrk+0x64>)
 800094c:	681a      	ldr	r2, [r3, #0]
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	4413      	add	r3, r2
 8000952:	693a      	ldr	r2, [r7, #16]
 8000954:	429a      	cmp	r2, r3
 8000956:	d207      	bcs.n	8000968 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000958:	f002 fb74 	bl	8003044 <__errno>
 800095c:	4603      	mov	r3, r0
 800095e:	220c      	movs	r2, #12
 8000960:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000962:	f04f 33ff 	mov.w	r3, #4294967295
 8000966:	e009      	b.n	800097c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000968:	4b08      	ldr	r3, [pc, #32]	; (800098c <_sbrk+0x64>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800096e:	4b07      	ldr	r3, [pc, #28]	; (800098c <_sbrk+0x64>)
 8000970:	681a      	ldr	r2, [r3, #0]
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4413      	add	r3, r2
 8000976:	4a05      	ldr	r2, [pc, #20]	; (800098c <_sbrk+0x64>)
 8000978:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800097a:	68fb      	ldr	r3, [r7, #12]
}
 800097c:	4618      	mov	r0, r3
 800097e:	3718      	adds	r7, #24
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	20020000 	.word	0x20020000
 8000988:	00000400 	.word	0x00000400
 800098c:	2000011c 	.word	0x2000011c
 8000990:	20000270 	.word	0x20000270

08000994 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000998:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <SystemInit+0x20>)
 800099a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800099e:	4a05      	ldr	r2, [pc, #20]	; (80009b4 <SystemInit+0x20>)
 80009a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	e000ed00 	.word	0xe000ed00

080009b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009b8:	480d      	ldr	r0, [pc, #52]	; (80009f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009ba:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009bc:	480d      	ldr	r0, [pc, #52]	; (80009f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80009be:	490e      	ldr	r1, [pc, #56]	; (80009f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009c0:	4a0e      	ldr	r2, [pc, #56]	; (80009fc <LoopForever+0xe>)
  movs r3, #0
 80009c2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80009c4:	e002      	b.n	80009cc <LoopCopyDataInit>

080009c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ca:	3304      	adds	r3, #4

080009cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009d0:	d3f9      	bcc.n	80009c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009d2:	4a0b      	ldr	r2, [pc, #44]	; (8000a00 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009d4:	4c0b      	ldr	r4, [pc, #44]	; (8000a04 <LoopForever+0x16>)
  movs r3, #0
 80009d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009d8:	e001      	b.n	80009de <LoopFillZerobss>

080009da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009dc:	3204      	adds	r2, #4

080009de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009e0:	d3fb      	bcc.n	80009da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80009e2:	f7ff ffd7 	bl	8000994 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009e6:	f002 fb33 	bl	8003050 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009ea:	f7ff fcaf 	bl	800034c <main>

080009ee <LoopForever>:

LoopForever:
    b LoopForever
 80009ee:	e7fe      	b.n	80009ee <LoopForever>
  ldr   r0, =_estack
 80009f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009f8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80009fc:	08003c64 	.word	0x08003c64
  ldr r2, =_sbss
 8000a00:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000a04:	20000270 	.word	0x20000270

08000a08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a08:	e7fe      	b.n	8000a08 <ADC1_2_IRQHandler>

08000a0a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b082      	sub	sp, #8
 8000a0e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a10:	2300      	movs	r3, #0
 8000a12:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a14:	2003      	movs	r0, #3
 8000a16:	f000 f93d 	bl	8000c94 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a1a:	200f      	movs	r0, #15
 8000a1c:	f000 f80e 	bl	8000a3c <HAL_InitTick>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d002      	beq.n	8000a2c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a26:	2301      	movs	r3, #1
 8000a28:	71fb      	strb	r3, [r7, #7]
 8000a2a:	e001      	b.n	8000a30 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a2c:	f7ff fe50 	bl	80006d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a30:	79fb      	ldrb	r3, [r7, #7]

}
 8000a32:	4618      	mov	r0, r3
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
	...

08000a3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a44:	2300      	movs	r3, #0
 8000a46:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000a48:	4b16      	ldr	r3, [pc, #88]	; (8000aa4 <HAL_InitTick+0x68>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d022      	beq.n	8000a96 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000a50:	4b15      	ldr	r3, [pc, #84]	; (8000aa8 <HAL_InitTick+0x6c>)
 8000a52:	681a      	ldr	r2, [r3, #0]
 8000a54:	4b13      	ldr	r3, [pc, #76]	; (8000aa4 <HAL_InitTick+0x68>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a64:	4618      	mov	r0, r3
 8000a66:	f000 f93a 	bl	8000cde <HAL_SYSTICK_Config>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d10f      	bne.n	8000a90 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	2b0f      	cmp	r3, #15
 8000a74:	d809      	bhi.n	8000a8a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a76:	2200      	movs	r2, #0
 8000a78:	6879      	ldr	r1, [r7, #4]
 8000a7a:	f04f 30ff 	mov.w	r0, #4294967295
 8000a7e:	f000 f914 	bl	8000caa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a82:	4a0a      	ldr	r2, [pc, #40]	; (8000aac <HAL_InitTick+0x70>)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	6013      	str	r3, [r2, #0]
 8000a88:	e007      	b.n	8000a9a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	73fb      	strb	r3, [r7, #15]
 8000a8e:	e004      	b.n	8000a9a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a90:	2301      	movs	r3, #1
 8000a92:	73fb      	strb	r3, [r7, #15]
 8000a94:	e001      	b.n	8000a9a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a96:	2301      	movs	r3, #1
 8000a98:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	3710      	adds	r7, #16
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	20000008 	.word	0x20000008
 8000aa8:	20000000 	.word	0x20000000
 8000aac:	20000004 	.word	0x20000004

08000ab0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ab4:	4b05      	ldr	r3, [pc, #20]	; (8000acc <HAL_IncTick+0x1c>)
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	4b05      	ldr	r3, [pc, #20]	; (8000ad0 <HAL_IncTick+0x20>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4413      	add	r3, r2
 8000abe:	4a03      	ldr	r2, [pc, #12]	; (8000acc <HAL_IncTick+0x1c>)
 8000ac0:	6013      	str	r3, [r2, #0]
}
 8000ac2:	bf00      	nop
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr
 8000acc:	20000120 	.word	0x20000120
 8000ad0:	20000008 	.word	0x20000008

08000ad4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ad8:	4b03      	ldr	r3, [pc, #12]	; (8000ae8 <HAL_GetTick+0x14>)
 8000ada:	681b      	ldr	r3, [r3, #0]
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	20000120 	.word	0x20000120

08000aec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000af4:	f7ff ffee 	bl	8000ad4 <HAL_GetTick>
 8000af8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b04:	d004      	beq.n	8000b10 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b06:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <HAL_Delay+0x40>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	68fa      	ldr	r2, [r7, #12]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b10:	bf00      	nop
 8000b12:	f7ff ffdf 	bl	8000ad4 <HAL_GetTick>
 8000b16:	4602      	mov	r2, r0
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	1ad3      	subs	r3, r2, r3
 8000b1c:	68fa      	ldr	r2, [r7, #12]
 8000b1e:	429a      	cmp	r2, r3
 8000b20:	d8f7      	bhi.n	8000b12 <HAL_Delay+0x26>
  {
  }
}
 8000b22:	bf00      	nop
 8000b24:	bf00      	nop
 8000b26:	3710      	adds	r7, #16
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	20000008 	.word	0x20000008

08000b30 <__NVIC_SetPriorityGrouping>:
{
 8000b30:	b480      	push	{r7}
 8000b32:	b085      	sub	sp, #20
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	f003 0307 	and.w	r3, r3, #7
 8000b3e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b40:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <__NVIC_SetPriorityGrouping+0x44>)
 8000b42:	68db      	ldr	r3, [r3, #12]
 8000b44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b46:	68ba      	ldr	r2, [r7, #8]
 8000b48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b62:	4a04      	ldr	r2, [pc, #16]	; (8000b74 <__NVIC_SetPriorityGrouping+0x44>)
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	60d3      	str	r3, [r2, #12]
}
 8000b68:	bf00      	nop
 8000b6a:	3714      	adds	r7, #20
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <__NVIC_GetPriorityGrouping>:
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b7c:	4b04      	ldr	r3, [pc, #16]	; (8000b90 <__NVIC_GetPriorityGrouping+0x18>)
 8000b7e:	68db      	ldr	r3, [r3, #12]
 8000b80:	0a1b      	lsrs	r3, r3, #8
 8000b82:	f003 0307 	and.w	r3, r3, #7
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	e000ed00 	.word	0xe000ed00

08000b94 <__NVIC_SetPriority>:
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	6039      	str	r1, [r7, #0]
 8000b9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	db0a      	blt.n	8000bbe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	b2da      	uxtb	r2, r3
 8000bac:	490c      	ldr	r1, [pc, #48]	; (8000be0 <__NVIC_SetPriority+0x4c>)
 8000bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb2:	0112      	lsls	r2, r2, #4
 8000bb4:	b2d2      	uxtb	r2, r2
 8000bb6:	440b      	add	r3, r1
 8000bb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000bbc:	e00a      	b.n	8000bd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	b2da      	uxtb	r2, r3
 8000bc2:	4908      	ldr	r1, [pc, #32]	; (8000be4 <__NVIC_SetPriority+0x50>)
 8000bc4:	79fb      	ldrb	r3, [r7, #7]
 8000bc6:	f003 030f 	and.w	r3, r3, #15
 8000bca:	3b04      	subs	r3, #4
 8000bcc:	0112      	lsls	r2, r2, #4
 8000bce:	b2d2      	uxtb	r2, r2
 8000bd0:	440b      	add	r3, r1
 8000bd2:	761a      	strb	r2, [r3, #24]
}
 8000bd4:	bf00      	nop
 8000bd6:	370c      	adds	r7, #12
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr
 8000be0:	e000e100 	.word	0xe000e100
 8000be4:	e000ed00 	.word	0xe000ed00

08000be8 <NVIC_EncodePriority>:
{
 8000be8:	b480      	push	{r7}
 8000bea:	b089      	sub	sp, #36	; 0x24
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	60f8      	str	r0, [r7, #12]
 8000bf0:	60b9      	str	r1, [r7, #8]
 8000bf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	f003 0307 	and.w	r3, r3, #7
 8000bfa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bfc:	69fb      	ldr	r3, [r7, #28]
 8000bfe:	f1c3 0307 	rsb	r3, r3, #7
 8000c02:	2b04      	cmp	r3, #4
 8000c04:	bf28      	it	cs
 8000c06:	2304      	movcs	r3, #4
 8000c08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	3304      	adds	r3, #4
 8000c0e:	2b06      	cmp	r3, #6
 8000c10:	d902      	bls.n	8000c18 <NVIC_EncodePriority+0x30>
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	3b03      	subs	r3, #3
 8000c16:	e000      	b.n	8000c1a <NVIC_EncodePriority+0x32>
 8000c18:	2300      	movs	r3, #0
 8000c1a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c20:	69bb      	ldr	r3, [r7, #24]
 8000c22:	fa02 f303 	lsl.w	r3, r2, r3
 8000c26:	43da      	mvns	r2, r3
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	401a      	ands	r2, r3
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c30:	f04f 31ff 	mov.w	r1, #4294967295
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	fa01 f303 	lsl.w	r3, r1, r3
 8000c3a:	43d9      	mvns	r1, r3
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c40:	4313      	orrs	r3, r2
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3724      	adds	r7, #36	; 0x24
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
	...

08000c50 <SysTick_Config>:
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	3b01      	subs	r3, #1
 8000c5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c60:	d301      	bcc.n	8000c66 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000c62:	2301      	movs	r3, #1
 8000c64:	e00f      	b.n	8000c86 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c66:	4a0a      	ldr	r2, [pc, #40]	; (8000c90 <SysTick_Config+0x40>)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	3b01      	subs	r3, #1
 8000c6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c6e:	210f      	movs	r1, #15
 8000c70:	f04f 30ff 	mov.w	r0, #4294967295
 8000c74:	f7ff ff8e 	bl	8000b94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c78:	4b05      	ldr	r3, [pc, #20]	; (8000c90 <SysTick_Config+0x40>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c7e:	4b04      	ldr	r3, [pc, #16]	; (8000c90 <SysTick_Config+0x40>)
 8000c80:	2207      	movs	r2, #7
 8000c82:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000c84:	2300      	movs	r3, #0
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	e000e010 	.word	0xe000e010

08000c94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c9c:	6878      	ldr	r0, [r7, #4]
 8000c9e:	f7ff ff47 	bl	8000b30 <__NVIC_SetPriorityGrouping>
}
 8000ca2:	bf00      	nop
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}

08000caa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000caa:	b580      	push	{r7, lr}
 8000cac:	b086      	sub	sp, #24
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	60b9      	str	r1, [r7, #8]
 8000cb4:	607a      	str	r2, [r7, #4]
 8000cb6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cb8:	f7ff ff5e 	bl	8000b78 <__NVIC_GetPriorityGrouping>
 8000cbc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cbe:	687a      	ldr	r2, [r7, #4]
 8000cc0:	68b9      	ldr	r1, [r7, #8]
 8000cc2:	6978      	ldr	r0, [r7, #20]
 8000cc4:	f7ff ff90 	bl	8000be8 <NVIC_EncodePriority>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cce:	4611      	mov	r1, r2
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff ff5f 	bl	8000b94 <__NVIC_SetPriority>
}
 8000cd6:	bf00      	nop
 8000cd8:	3718      	adds	r7, #24
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	b082      	sub	sp, #8
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ce6:	6878      	ldr	r0, [r7, #4]
 8000ce8:	f7ff ffb2 	bl	8000c50 <SysTick_Config>
 8000cec:	4603      	mov	r3, r0
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
	...

08000cf8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b087      	sub	sp, #28
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
 8000d00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000d02:	2300      	movs	r3, #0
 8000d04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000d06:	e15a      	b.n	8000fbe <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	2101      	movs	r1, #1
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	fa01 f303 	lsl.w	r3, r1, r3
 8000d14:	4013      	ands	r3, r2
 8000d16:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	f000 814c 	beq.w	8000fb8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	f003 0303 	and.w	r3, r3, #3
 8000d28:	2b01      	cmp	r3, #1
 8000d2a:	d005      	beq.n	8000d38 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d34:	2b02      	cmp	r3, #2
 8000d36:	d130      	bne.n	8000d9a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	689b      	ldr	r3, [r3, #8]
 8000d3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	005b      	lsls	r3, r3, #1
 8000d42:	2203      	movs	r2, #3
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	43db      	mvns	r3, r3
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	68da      	ldr	r2, [r3, #12]
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5c:	693a      	ldr	r2, [r7, #16]
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	693a      	ldr	r2, [r7, #16]
 8000d66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d6e:	2201      	movs	r2, #1
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	fa02 f303 	lsl.w	r3, r2, r3
 8000d76:	43db      	mvns	r3, r3
 8000d78:	693a      	ldr	r2, [r7, #16]
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	091b      	lsrs	r3, r3, #4
 8000d84:	f003 0201 	and.w	r2, r3, #1
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	693a      	ldr	r2, [r7, #16]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	693a      	ldr	r2, [r7, #16]
 8000d98:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	f003 0303 	and.w	r3, r3, #3
 8000da2:	2b03      	cmp	r3, #3
 8000da4:	d017      	beq.n	8000dd6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	68db      	ldr	r3, [r3, #12]
 8000daa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	2203      	movs	r2, #3
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	43db      	mvns	r3, r3
 8000db8:	693a      	ldr	r2, [r7, #16]
 8000dba:	4013      	ands	r3, r2
 8000dbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	689a      	ldr	r2, [r3, #8]
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	005b      	lsls	r3, r3, #1
 8000dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	f003 0303 	and.w	r3, r3, #3
 8000dde:	2b02      	cmp	r3, #2
 8000de0:	d123      	bne.n	8000e2a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	08da      	lsrs	r2, r3, #3
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	3208      	adds	r2, #8
 8000dea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	f003 0307 	and.w	r3, r3, #7
 8000df6:	009b      	lsls	r3, r3, #2
 8000df8:	220f      	movs	r2, #15
 8000dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfe:	43db      	mvns	r3, r3
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	4013      	ands	r3, r2
 8000e04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	691a      	ldr	r2, [r3, #16]
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	f003 0307 	and.w	r3, r3, #7
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	08da      	lsrs	r2, r3, #3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	3208      	adds	r2, #8
 8000e24:	6939      	ldr	r1, [r7, #16]
 8000e26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	2203      	movs	r2, #3
 8000e36:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3a:	43db      	mvns	r3, r3
 8000e3c:	693a      	ldr	r2, [r7, #16]
 8000e3e:	4013      	ands	r3, r2
 8000e40:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	f003 0203 	and.w	r2, r3, #3
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	005b      	lsls	r3, r3, #1
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	4313      	orrs	r3, r2
 8000e56:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	f000 80a6 	beq.w	8000fb8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e6c:	4b5b      	ldr	r3, [pc, #364]	; (8000fdc <HAL_GPIO_Init+0x2e4>)
 8000e6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e70:	4a5a      	ldr	r2, [pc, #360]	; (8000fdc <HAL_GPIO_Init+0x2e4>)
 8000e72:	f043 0301 	orr.w	r3, r3, #1
 8000e76:	6613      	str	r3, [r2, #96]	; 0x60
 8000e78:	4b58      	ldr	r3, [pc, #352]	; (8000fdc <HAL_GPIO_Init+0x2e4>)
 8000e7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e7c:	f003 0301 	and.w	r3, r3, #1
 8000e80:	60bb      	str	r3, [r7, #8]
 8000e82:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e84:	4a56      	ldr	r2, [pc, #344]	; (8000fe0 <HAL_GPIO_Init+0x2e8>)
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	089b      	lsrs	r3, r3, #2
 8000e8a:	3302      	adds	r3, #2
 8000e8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e90:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	f003 0303 	and.w	r3, r3, #3
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	220f      	movs	r2, #15
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000eae:	d01f      	beq.n	8000ef0 <HAL_GPIO_Init+0x1f8>
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	4a4c      	ldr	r2, [pc, #304]	; (8000fe4 <HAL_GPIO_Init+0x2ec>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d019      	beq.n	8000eec <HAL_GPIO_Init+0x1f4>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	4a4b      	ldr	r2, [pc, #300]	; (8000fe8 <HAL_GPIO_Init+0x2f0>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d013      	beq.n	8000ee8 <HAL_GPIO_Init+0x1f0>
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	4a4a      	ldr	r2, [pc, #296]	; (8000fec <HAL_GPIO_Init+0x2f4>)
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d00d      	beq.n	8000ee4 <HAL_GPIO_Init+0x1ec>
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	4a49      	ldr	r2, [pc, #292]	; (8000ff0 <HAL_GPIO_Init+0x2f8>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d007      	beq.n	8000ee0 <HAL_GPIO_Init+0x1e8>
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	4a48      	ldr	r2, [pc, #288]	; (8000ff4 <HAL_GPIO_Init+0x2fc>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d101      	bne.n	8000edc <HAL_GPIO_Init+0x1e4>
 8000ed8:	2305      	movs	r3, #5
 8000eda:	e00a      	b.n	8000ef2 <HAL_GPIO_Init+0x1fa>
 8000edc:	2306      	movs	r3, #6
 8000ede:	e008      	b.n	8000ef2 <HAL_GPIO_Init+0x1fa>
 8000ee0:	2304      	movs	r3, #4
 8000ee2:	e006      	b.n	8000ef2 <HAL_GPIO_Init+0x1fa>
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	e004      	b.n	8000ef2 <HAL_GPIO_Init+0x1fa>
 8000ee8:	2302      	movs	r3, #2
 8000eea:	e002      	b.n	8000ef2 <HAL_GPIO_Init+0x1fa>
 8000eec:	2301      	movs	r3, #1
 8000eee:	e000      	b.n	8000ef2 <HAL_GPIO_Init+0x1fa>
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	697a      	ldr	r2, [r7, #20]
 8000ef4:	f002 0203 	and.w	r2, r2, #3
 8000ef8:	0092      	lsls	r2, r2, #2
 8000efa:	4093      	lsls	r3, r2
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f02:	4937      	ldr	r1, [pc, #220]	; (8000fe0 <HAL_GPIO_Init+0x2e8>)
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	089b      	lsrs	r3, r3, #2
 8000f08:	3302      	adds	r3, #2
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f10:	4b39      	ldr	r3, [pc, #228]	; (8000ff8 <HAL_GPIO_Init+0x300>)
 8000f12:	689b      	ldr	r3, [r3, #8]
 8000f14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d003      	beq.n	8000f34 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000f2c:	693a      	ldr	r2, [r7, #16]
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f34:	4a30      	ldr	r2, [pc, #192]	; (8000ff8 <HAL_GPIO_Init+0x300>)
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f3a:	4b2f      	ldr	r3, [pc, #188]	; (8000ff8 <HAL_GPIO_Init+0x300>)
 8000f3c:	68db      	ldr	r3, [r3, #12]
 8000f3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	43db      	mvns	r3, r3
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	4013      	ands	r3, r2
 8000f48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d003      	beq.n	8000f5e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f5e:	4a26      	ldr	r2, [pc, #152]	; (8000ff8 <HAL_GPIO_Init+0x300>)
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000f64:	4b24      	ldr	r3, [pc, #144]	; (8000ff8 <HAL_GPIO_Init+0x300>)
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	4013      	ands	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d003      	beq.n	8000f88 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000f80:	693a      	ldr	r2, [r7, #16]
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f88:	4a1b      	ldr	r2, [pc, #108]	; (8000ff8 <HAL_GPIO_Init+0x300>)
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000f8e:	4b1a      	ldr	r3, [pc, #104]	; (8000ff8 <HAL_GPIO_Init+0x300>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	43db      	mvns	r3, r3
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d003      	beq.n	8000fb2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000fb2:	4a11      	ldr	r2, [pc, #68]	; (8000ff8 <HAL_GPIO_Init+0x300>)
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	3301      	adds	r3, #1
 8000fbc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	fa22 f303 	lsr.w	r3, r2, r3
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	f47f ae9d 	bne.w	8000d08 <HAL_GPIO_Init+0x10>
  }
}
 8000fce:	bf00      	nop
 8000fd0:	bf00      	nop
 8000fd2:	371c      	adds	r7, #28
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	40021000 	.word	0x40021000
 8000fe0:	40010000 	.word	0x40010000
 8000fe4:	48000400 	.word	0x48000400
 8000fe8:	48000800 	.word	0x48000800
 8000fec:	48000c00 	.word	0x48000c00
 8000ff0:	48001000 	.word	0x48001000
 8000ff4:	48001400 	.word	0x48001400
 8000ff8:	40010400 	.word	0x40010400

08000ffc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b085      	sub	sp, #20
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d141      	bne.n	800108e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800100a:	4b4b      	ldr	r3, [pc, #300]	; (8001138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001012:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001016:	d131      	bne.n	800107c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001018:	4b47      	ldr	r3, [pc, #284]	; (8001138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800101a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800101e:	4a46      	ldr	r2, [pc, #280]	; (8001138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001020:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001024:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001028:	4b43      	ldr	r3, [pc, #268]	; (8001138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001030:	4a41      	ldr	r2, [pc, #260]	; (8001138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001032:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001036:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001038:	4b40      	ldr	r3, [pc, #256]	; (800113c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2232      	movs	r2, #50	; 0x32
 800103e:	fb02 f303 	mul.w	r3, r2, r3
 8001042:	4a3f      	ldr	r2, [pc, #252]	; (8001140 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001044:	fba2 2303 	umull	r2, r3, r2, r3
 8001048:	0c9b      	lsrs	r3, r3, #18
 800104a:	3301      	adds	r3, #1
 800104c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800104e:	e002      	b.n	8001056 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	3b01      	subs	r3, #1
 8001054:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001056:	4b38      	ldr	r3, [pc, #224]	; (8001138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001058:	695b      	ldr	r3, [r3, #20]
 800105a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800105e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001062:	d102      	bne.n	800106a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d1f2      	bne.n	8001050 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800106a:	4b33      	ldr	r3, [pc, #204]	; (8001138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800106c:	695b      	ldr	r3, [r3, #20]
 800106e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001072:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001076:	d158      	bne.n	800112a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001078:	2303      	movs	r3, #3
 800107a:	e057      	b.n	800112c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800107c:	4b2e      	ldr	r3, [pc, #184]	; (8001138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800107e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001082:	4a2d      	ldr	r2, [pc, #180]	; (8001138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001084:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001088:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800108c:	e04d      	b.n	800112a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001094:	d141      	bne.n	800111a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001096:	4b28      	ldr	r3, [pc, #160]	; (8001138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800109e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010a2:	d131      	bne.n	8001108 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80010a4:	4b24      	ldr	r3, [pc, #144]	; (8001138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80010aa:	4a23      	ldr	r2, [pc, #140]	; (8001138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010b0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80010b4:	4b20      	ldr	r3, [pc, #128]	; (8001138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80010bc:	4a1e      	ldr	r2, [pc, #120]	; (8001138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010c2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80010c4:	4b1d      	ldr	r3, [pc, #116]	; (800113c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2232      	movs	r2, #50	; 0x32
 80010ca:	fb02 f303 	mul.w	r3, r2, r3
 80010ce:	4a1c      	ldr	r2, [pc, #112]	; (8001140 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80010d0:	fba2 2303 	umull	r2, r3, r2, r3
 80010d4:	0c9b      	lsrs	r3, r3, #18
 80010d6:	3301      	adds	r3, #1
 80010d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010da:	e002      	b.n	80010e2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	3b01      	subs	r3, #1
 80010e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010e2:	4b15      	ldr	r3, [pc, #84]	; (8001138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010e4:	695b      	ldr	r3, [r3, #20]
 80010e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010ee:	d102      	bne.n	80010f6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d1f2      	bne.n	80010dc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80010f6:	4b10      	ldr	r3, [pc, #64]	; (8001138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010f8:	695b      	ldr	r3, [r3, #20]
 80010fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001102:	d112      	bne.n	800112a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001104:	2303      	movs	r3, #3
 8001106:	e011      	b.n	800112c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001108:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800110a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800110e:	4a0a      	ldr	r2, [pc, #40]	; (8001138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001110:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001114:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001118:	e007      	b.n	800112a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800111a:	4b07      	ldr	r3, [pc, #28]	; (8001138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001122:	4a05      	ldr	r2, [pc, #20]	; (8001138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001124:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001128:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800112a:	2300      	movs	r3, #0
}
 800112c:	4618      	mov	r0, r3
 800112e:	3714      	adds	r7, #20
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	40007000 	.word	0x40007000
 800113c:	20000000 	.word	0x20000000
 8001140:	431bde83 	.word	0x431bde83

08001144 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b088      	sub	sp, #32
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d101      	bne.n	8001156 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	e306      	b.n	8001764 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	2b00      	cmp	r3, #0
 8001160:	d075      	beq.n	800124e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001162:	4b97      	ldr	r3, [pc, #604]	; (80013c0 <HAL_RCC_OscConfig+0x27c>)
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	f003 030c 	and.w	r3, r3, #12
 800116a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800116c:	4b94      	ldr	r3, [pc, #592]	; (80013c0 <HAL_RCC_OscConfig+0x27c>)
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	f003 0303 	and.w	r3, r3, #3
 8001174:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	2b0c      	cmp	r3, #12
 800117a:	d102      	bne.n	8001182 <HAL_RCC_OscConfig+0x3e>
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	2b03      	cmp	r3, #3
 8001180:	d002      	beq.n	8001188 <HAL_RCC_OscConfig+0x44>
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	2b08      	cmp	r3, #8
 8001186:	d10b      	bne.n	80011a0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001188:	4b8d      	ldr	r3, [pc, #564]	; (80013c0 <HAL_RCC_OscConfig+0x27c>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001190:	2b00      	cmp	r3, #0
 8001192:	d05b      	beq.n	800124c <HAL_RCC_OscConfig+0x108>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d157      	bne.n	800124c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800119c:	2301      	movs	r3, #1
 800119e:	e2e1      	b.n	8001764 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011a8:	d106      	bne.n	80011b8 <HAL_RCC_OscConfig+0x74>
 80011aa:	4b85      	ldr	r3, [pc, #532]	; (80013c0 <HAL_RCC_OscConfig+0x27c>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a84      	ldr	r2, [pc, #528]	; (80013c0 <HAL_RCC_OscConfig+0x27c>)
 80011b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011b4:	6013      	str	r3, [r2, #0]
 80011b6:	e01d      	b.n	80011f4 <HAL_RCC_OscConfig+0xb0>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011c0:	d10c      	bne.n	80011dc <HAL_RCC_OscConfig+0x98>
 80011c2:	4b7f      	ldr	r3, [pc, #508]	; (80013c0 <HAL_RCC_OscConfig+0x27c>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a7e      	ldr	r2, [pc, #504]	; (80013c0 <HAL_RCC_OscConfig+0x27c>)
 80011c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011cc:	6013      	str	r3, [r2, #0]
 80011ce:	4b7c      	ldr	r3, [pc, #496]	; (80013c0 <HAL_RCC_OscConfig+0x27c>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a7b      	ldr	r2, [pc, #492]	; (80013c0 <HAL_RCC_OscConfig+0x27c>)
 80011d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011d8:	6013      	str	r3, [r2, #0]
 80011da:	e00b      	b.n	80011f4 <HAL_RCC_OscConfig+0xb0>
 80011dc:	4b78      	ldr	r3, [pc, #480]	; (80013c0 <HAL_RCC_OscConfig+0x27c>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a77      	ldr	r2, [pc, #476]	; (80013c0 <HAL_RCC_OscConfig+0x27c>)
 80011e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011e6:	6013      	str	r3, [r2, #0]
 80011e8:	4b75      	ldr	r3, [pc, #468]	; (80013c0 <HAL_RCC_OscConfig+0x27c>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a74      	ldr	r2, [pc, #464]	; (80013c0 <HAL_RCC_OscConfig+0x27c>)
 80011ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d013      	beq.n	8001224 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011fc:	f7ff fc6a 	bl	8000ad4 <HAL_GetTick>
 8001200:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001202:	e008      	b.n	8001216 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001204:	f7ff fc66 	bl	8000ad4 <HAL_GetTick>
 8001208:	4602      	mov	r2, r0
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	2b64      	cmp	r3, #100	; 0x64
 8001210:	d901      	bls.n	8001216 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001212:	2303      	movs	r3, #3
 8001214:	e2a6      	b.n	8001764 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001216:	4b6a      	ldr	r3, [pc, #424]	; (80013c0 <HAL_RCC_OscConfig+0x27c>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d0f0      	beq.n	8001204 <HAL_RCC_OscConfig+0xc0>
 8001222:	e014      	b.n	800124e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001224:	f7ff fc56 	bl	8000ad4 <HAL_GetTick>
 8001228:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800122a:	e008      	b.n	800123e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800122c:	f7ff fc52 	bl	8000ad4 <HAL_GetTick>
 8001230:	4602      	mov	r2, r0
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	2b64      	cmp	r3, #100	; 0x64
 8001238:	d901      	bls.n	800123e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800123a:	2303      	movs	r3, #3
 800123c:	e292      	b.n	8001764 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800123e:	4b60      	ldr	r3, [pc, #384]	; (80013c0 <HAL_RCC_OscConfig+0x27c>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d1f0      	bne.n	800122c <HAL_RCC_OscConfig+0xe8>
 800124a:	e000      	b.n	800124e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800124c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	2b00      	cmp	r3, #0
 8001258:	d075      	beq.n	8001346 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800125a:	4b59      	ldr	r3, [pc, #356]	; (80013c0 <HAL_RCC_OscConfig+0x27c>)
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	f003 030c 	and.w	r3, r3, #12
 8001262:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001264:	4b56      	ldr	r3, [pc, #344]	; (80013c0 <HAL_RCC_OscConfig+0x27c>)
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	f003 0303 	and.w	r3, r3, #3
 800126c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800126e:	69bb      	ldr	r3, [r7, #24]
 8001270:	2b0c      	cmp	r3, #12
 8001272:	d102      	bne.n	800127a <HAL_RCC_OscConfig+0x136>
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	2b02      	cmp	r3, #2
 8001278:	d002      	beq.n	8001280 <HAL_RCC_OscConfig+0x13c>
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	2b04      	cmp	r3, #4
 800127e:	d11f      	bne.n	80012c0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001280:	4b4f      	ldr	r3, [pc, #316]	; (80013c0 <HAL_RCC_OscConfig+0x27c>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001288:	2b00      	cmp	r3, #0
 800128a:	d005      	beq.n	8001298 <HAL_RCC_OscConfig+0x154>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d101      	bne.n	8001298 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	e265      	b.n	8001764 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001298:	4b49      	ldr	r3, [pc, #292]	; (80013c0 <HAL_RCC_OscConfig+0x27c>)
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	691b      	ldr	r3, [r3, #16]
 80012a4:	061b      	lsls	r3, r3, #24
 80012a6:	4946      	ldr	r1, [pc, #280]	; (80013c0 <HAL_RCC_OscConfig+0x27c>)
 80012a8:	4313      	orrs	r3, r2
 80012aa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80012ac:	4b45      	ldr	r3, [pc, #276]	; (80013c4 <HAL_RCC_OscConfig+0x280>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff fbc3 	bl	8000a3c <HAL_InitTick>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d043      	beq.n	8001344 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80012bc:	2301      	movs	r3, #1
 80012be:	e251      	b.n	8001764 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d023      	beq.n	8001310 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012c8:	4b3d      	ldr	r3, [pc, #244]	; (80013c0 <HAL_RCC_OscConfig+0x27c>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a3c      	ldr	r2, [pc, #240]	; (80013c0 <HAL_RCC_OscConfig+0x27c>)
 80012ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012d4:	f7ff fbfe 	bl	8000ad4 <HAL_GetTick>
 80012d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012da:	e008      	b.n	80012ee <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012dc:	f7ff fbfa 	bl	8000ad4 <HAL_GetTick>
 80012e0:	4602      	mov	r2, r0
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	d901      	bls.n	80012ee <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80012ea:	2303      	movs	r3, #3
 80012ec:	e23a      	b.n	8001764 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012ee:	4b34      	ldr	r3, [pc, #208]	; (80013c0 <HAL_RCC_OscConfig+0x27c>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d0f0      	beq.n	80012dc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012fa:	4b31      	ldr	r3, [pc, #196]	; (80013c0 <HAL_RCC_OscConfig+0x27c>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	691b      	ldr	r3, [r3, #16]
 8001306:	061b      	lsls	r3, r3, #24
 8001308:	492d      	ldr	r1, [pc, #180]	; (80013c0 <HAL_RCC_OscConfig+0x27c>)
 800130a:	4313      	orrs	r3, r2
 800130c:	604b      	str	r3, [r1, #4]
 800130e:	e01a      	b.n	8001346 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001310:	4b2b      	ldr	r3, [pc, #172]	; (80013c0 <HAL_RCC_OscConfig+0x27c>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a2a      	ldr	r2, [pc, #168]	; (80013c0 <HAL_RCC_OscConfig+0x27c>)
 8001316:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800131a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800131c:	f7ff fbda 	bl	8000ad4 <HAL_GetTick>
 8001320:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001322:	e008      	b.n	8001336 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001324:	f7ff fbd6 	bl	8000ad4 <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	2b02      	cmp	r3, #2
 8001330:	d901      	bls.n	8001336 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e216      	b.n	8001764 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001336:	4b22      	ldr	r3, [pc, #136]	; (80013c0 <HAL_RCC_OscConfig+0x27c>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800133e:	2b00      	cmp	r3, #0
 8001340:	d1f0      	bne.n	8001324 <HAL_RCC_OscConfig+0x1e0>
 8001342:	e000      	b.n	8001346 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001344:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0308 	and.w	r3, r3, #8
 800134e:	2b00      	cmp	r3, #0
 8001350:	d041      	beq.n	80013d6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	695b      	ldr	r3, [r3, #20]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d01c      	beq.n	8001394 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800135a:	4b19      	ldr	r3, [pc, #100]	; (80013c0 <HAL_RCC_OscConfig+0x27c>)
 800135c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001360:	4a17      	ldr	r2, [pc, #92]	; (80013c0 <HAL_RCC_OscConfig+0x27c>)
 8001362:	f043 0301 	orr.w	r3, r3, #1
 8001366:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800136a:	f7ff fbb3 	bl	8000ad4 <HAL_GetTick>
 800136e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001370:	e008      	b.n	8001384 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001372:	f7ff fbaf 	bl	8000ad4 <HAL_GetTick>
 8001376:	4602      	mov	r2, r0
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	2b02      	cmp	r3, #2
 800137e:	d901      	bls.n	8001384 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001380:	2303      	movs	r3, #3
 8001382:	e1ef      	b.n	8001764 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001384:	4b0e      	ldr	r3, [pc, #56]	; (80013c0 <HAL_RCC_OscConfig+0x27c>)
 8001386:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800138a:	f003 0302 	and.w	r3, r3, #2
 800138e:	2b00      	cmp	r3, #0
 8001390:	d0ef      	beq.n	8001372 <HAL_RCC_OscConfig+0x22e>
 8001392:	e020      	b.n	80013d6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001394:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <HAL_RCC_OscConfig+0x27c>)
 8001396:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800139a:	4a09      	ldr	r2, [pc, #36]	; (80013c0 <HAL_RCC_OscConfig+0x27c>)
 800139c:	f023 0301 	bic.w	r3, r3, #1
 80013a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013a4:	f7ff fb96 	bl	8000ad4 <HAL_GetTick>
 80013a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013aa:	e00d      	b.n	80013c8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013ac:	f7ff fb92 	bl	8000ad4 <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d906      	bls.n	80013c8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e1d2      	b.n	8001764 <HAL_RCC_OscConfig+0x620>
 80013be:	bf00      	nop
 80013c0:	40021000 	.word	0x40021000
 80013c4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013c8:	4b8c      	ldr	r3, [pc, #560]	; (80015fc <HAL_RCC_OscConfig+0x4b8>)
 80013ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d1ea      	bne.n	80013ac <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 0304 	and.w	r3, r3, #4
 80013de:	2b00      	cmp	r3, #0
 80013e0:	f000 80a6 	beq.w	8001530 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013e4:	2300      	movs	r3, #0
 80013e6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80013e8:	4b84      	ldr	r3, [pc, #528]	; (80015fc <HAL_RCC_OscConfig+0x4b8>)
 80013ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d101      	bne.n	80013f8 <HAL_RCC_OscConfig+0x2b4>
 80013f4:	2301      	movs	r3, #1
 80013f6:	e000      	b.n	80013fa <HAL_RCC_OscConfig+0x2b6>
 80013f8:	2300      	movs	r3, #0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d00d      	beq.n	800141a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013fe:	4b7f      	ldr	r3, [pc, #508]	; (80015fc <HAL_RCC_OscConfig+0x4b8>)
 8001400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001402:	4a7e      	ldr	r2, [pc, #504]	; (80015fc <HAL_RCC_OscConfig+0x4b8>)
 8001404:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001408:	6593      	str	r3, [r2, #88]	; 0x58
 800140a:	4b7c      	ldr	r3, [pc, #496]	; (80015fc <HAL_RCC_OscConfig+0x4b8>)
 800140c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800140e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001416:	2301      	movs	r3, #1
 8001418:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800141a:	4b79      	ldr	r3, [pc, #484]	; (8001600 <HAL_RCC_OscConfig+0x4bc>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001422:	2b00      	cmp	r3, #0
 8001424:	d118      	bne.n	8001458 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001426:	4b76      	ldr	r3, [pc, #472]	; (8001600 <HAL_RCC_OscConfig+0x4bc>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a75      	ldr	r2, [pc, #468]	; (8001600 <HAL_RCC_OscConfig+0x4bc>)
 800142c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001430:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001432:	f7ff fb4f 	bl	8000ad4 <HAL_GetTick>
 8001436:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001438:	e008      	b.n	800144c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800143a:	f7ff fb4b 	bl	8000ad4 <HAL_GetTick>
 800143e:	4602      	mov	r2, r0
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	2b02      	cmp	r3, #2
 8001446:	d901      	bls.n	800144c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001448:	2303      	movs	r3, #3
 800144a:	e18b      	b.n	8001764 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800144c:	4b6c      	ldr	r3, [pc, #432]	; (8001600 <HAL_RCC_OscConfig+0x4bc>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001454:	2b00      	cmp	r3, #0
 8001456:	d0f0      	beq.n	800143a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	2b01      	cmp	r3, #1
 800145e:	d108      	bne.n	8001472 <HAL_RCC_OscConfig+0x32e>
 8001460:	4b66      	ldr	r3, [pc, #408]	; (80015fc <HAL_RCC_OscConfig+0x4b8>)
 8001462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001466:	4a65      	ldr	r2, [pc, #404]	; (80015fc <HAL_RCC_OscConfig+0x4b8>)
 8001468:	f043 0301 	orr.w	r3, r3, #1
 800146c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001470:	e024      	b.n	80014bc <HAL_RCC_OscConfig+0x378>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	2b05      	cmp	r3, #5
 8001478:	d110      	bne.n	800149c <HAL_RCC_OscConfig+0x358>
 800147a:	4b60      	ldr	r3, [pc, #384]	; (80015fc <HAL_RCC_OscConfig+0x4b8>)
 800147c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001480:	4a5e      	ldr	r2, [pc, #376]	; (80015fc <HAL_RCC_OscConfig+0x4b8>)
 8001482:	f043 0304 	orr.w	r3, r3, #4
 8001486:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800148a:	4b5c      	ldr	r3, [pc, #368]	; (80015fc <HAL_RCC_OscConfig+0x4b8>)
 800148c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001490:	4a5a      	ldr	r2, [pc, #360]	; (80015fc <HAL_RCC_OscConfig+0x4b8>)
 8001492:	f043 0301 	orr.w	r3, r3, #1
 8001496:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800149a:	e00f      	b.n	80014bc <HAL_RCC_OscConfig+0x378>
 800149c:	4b57      	ldr	r3, [pc, #348]	; (80015fc <HAL_RCC_OscConfig+0x4b8>)
 800149e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014a2:	4a56      	ldr	r2, [pc, #344]	; (80015fc <HAL_RCC_OscConfig+0x4b8>)
 80014a4:	f023 0301 	bic.w	r3, r3, #1
 80014a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014ac:	4b53      	ldr	r3, [pc, #332]	; (80015fc <HAL_RCC_OscConfig+0x4b8>)
 80014ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014b2:	4a52      	ldr	r2, [pc, #328]	; (80015fc <HAL_RCC_OscConfig+0x4b8>)
 80014b4:	f023 0304 	bic.w	r3, r3, #4
 80014b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d016      	beq.n	80014f2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014c4:	f7ff fb06 	bl	8000ad4 <HAL_GetTick>
 80014c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014ca:	e00a      	b.n	80014e2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014cc:	f7ff fb02 	bl	8000ad4 <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80014da:	4293      	cmp	r3, r2
 80014dc:	d901      	bls.n	80014e2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e140      	b.n	8001764 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014e2:	4b46      	ldr	r3, [pc, #280]	; (80015fc <HAL_RCC_OscConfig+0x4b8>)
 80014e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014e8:	f003 0302 	and.w	r3, r3, #2
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d0ed      	beq.n	80014cc <HAL_RCC_OscConfig+0x388>
 80014f0:	e015      	b.n	800151e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014f2:	f7ff faef 	bl	8000ad4 <HAL_GetTick>
 80014f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80014f8:	e00a      	b.n	8001510 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014fa:	f7ff faeb 	bl	8000ad4 <HAL_GetTick>
 80014fe:	4602      	mov	r2, r0
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	f241 3288 	movw	r2, #5000	; 0x1388
 8001508:	4293      	cmp	r3, r2
 800150a:	d901      	bls.n	8001510 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800150c:	2303      	movs	r3, #3
 800150e:	e129      	b.n	8001764 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001510:	4b3a      	ldr	r3, [pc, #232]	; (80015fc <HAL_RCC_OscConfig+0x4b8>)
 8001512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001516:	f003 0302 	and.w	r3, r3, #2
 800151a:	2b00      	cmp	r3, #0
 800151c:	d1ed      	bne.n	80014fa <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800151e:	7ffb      	ldrb	r3, [r7, #31]
 8001520:	2b01      	cmp	r3, #1
 8001522:	d105      	bne.n	8001530 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001524:	4b35      	ldr	r3, [pc, #212]	; (80015fc <HAL_RCC_OscConfig+0x4b8>)
 8001526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001528:	4a34      	ldr	r2, [pc, #208]	; (80015fc <HAL_RCC_OscConfig+0x4b8>)
 800152a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800152e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0320 	and.w	r3, r3, #32
 8001538:	2b00      	cmp	r3, #0
 800153a:	d03c      	beq.n	80015b6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	699b      	ldr	r3, [r3, #24]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d01c      	beq.n	800157e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001544:	4b2d      	ldr	r3, [pc, #180]	; (80015fc <HAL_RCC_OscConfig+0x4b8>)
 8001546:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800154a:	4a2c      	ldr	r2, [pc, #176]	; (80015fc <HAL_RCC_OscConfig+0x4b8>)
 800154c:	f043 0301 	orr.w	r3, r3, #1
 8001550:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001554:	f7ff fabe 	bl	8000ad4 <HAL_GetTick>
 8001558:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800155a:	e008      	b.n	800156e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800155c:	f7ff faba 	bl	8000ad4 <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b02      	cmp	r3, #2
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e0fa      	b.n	8001764 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800156e:	4b23      	ldr	r3, [pc, #140]	; (80015fc <HAL_RCC_OscConfig+0x4b8>)
 8001570:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001574:	f003 0302 	and.w	r3, r3, #2
 8001578:	2b00      	cmp	r3, #0
 800157a:	d0ef      	beq.n	800155c <HAL_RCC_OscConfig+0x418>
 800157c:	e01b      	b.n	80015b6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800157e:	4b1f      	ldr	r3, [pc, #124]	; (80015fc <HAL_RCC_OscConfig+0x4b8>)
 8001580:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001584:	4a1d      	ldr	r2, [pc, #116]	; (80015fc <HAL_RCC_OscConfig+0x4b8>)
 8001586:	f023 0301 	bic.w	r3, r3, #1
 800158a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800158e:	f7ff faa1 	bl	8000ad4 <HAL_GetTick>
 8001592:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001594:	e008      	b.n	80015a8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001596:	f7ff fa9d 	bl	8000ad4 <HAL_GetTick>
 800159a:	4602      	mov	r2, r0
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d901      	bls.n	80015a8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80015a4:	2303      	movs	r3, #3
 80015a6:	e0dd      	b.n	8001764 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80015a8:	4b14      	ldr	r3, [pc, #80]	; (80015fc <HAL_RCC_OscConfig+0x4b8>)
 80015aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d1ef      	bne.n	8001596 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	69db      	ldr	r3, [r3, #28]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	f000 80d1 	beq.w	8001762 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015c0:	4b0e      	ldr	r3, [pc, #56]	; (80015fc <HAL_RCC_OscConfig+0x4b8>)
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	f003 030c 	and.w	r3, r3, #12
 80015c8:	2b0c      	cmp	r3, #12
 80015ca:	f000 808b 	beq.w	80016e4 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	69db      	ldr	r3, [r3, #28]
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d15e      	bne.n	8001694 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015d6:	4b09      	ldr	r3, [pc, #36]	; (80015fc <HAL_RCC_OscConfig+0x4b8>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a08      	ldr	r2, [pc, #32]	; (80015fc <HAL_RCC_OscConfig+0x4b8>)
 80015dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e2:	f7ff fa77 	bl	8000ad4 <HAL_GetTick>
 80015e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015e8:	e00c      	b.n	8001604 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015ea:	f7ff fa73 	bl	8000ad4 <HAL_GetTick>
 80015ee:	4602      	mov	r2, r0
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d905      	bls.n	8001604 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80015f8:	2303      	movs	r3, #3
 80015fa:	e0b3      	b.n	8001764 <HAL_RCC_OscConfig+0x620>
 80015fc:	40021000 	.word	0x40021000
 8001600:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001604:	4b59      	ldr	r3, [pc, #356]	; (800176c <HAL_RCC_OscConfig+0x628>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800160c:	2b00      	cmp	r3, #0
 800160e:	d1ec      	bne.n	80015ea <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001610:	4b56      	ldr	r3, [pc, #344]	; (800176c <HAL_RCC_OscConfig+0x628>)
 8001612:	68da      	ldr	r2, [r3, #12]
 8001614:	4b56      	ldr	r3, [pc, #344]	; (8001770 <HAL_RCC_OscConfig+0x62c>)
 8001616:	4013      	ands	r3, r2
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	6a11      	ldr	r1, [r2, #32]
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001620:	3a01      	subs	r2, #1
 8001622:	0112      	lsls	r2, r2, #4
 8001624:	4311      	orrs	r1, r2
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800162a:	0212      	lsls	r2, r2, #8
 800162c:	4311      	orrs	r1, r2
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001632:	0852      	lsrs	r2, r2, #1
 8001634:	3a01      	subs	r2, #1
 8001636:	0552      	lsls	r2, r2, #21
 8001638:	4311      	orrs	r1, r2
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800163e:	0852      	lsrs	r2, r2, #1
 8001640:	3a01      	subs	r2, #1
 8001642:	0652      	lsls	r2, r2, #25
 8001644:	4311      	orrs	r1, r2
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800164a:	06d2      	lsls	r2, r2, #27
 800164c:	430a      	orrs	r2, r1
 800164e:	4947      	ldr	r1, [pc, #284]	; (800176c <HAL_RCC_OscConfig+0x628>)
 8001650:	4313      	orrs	r3, r2
 8001652:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001654:	4b45      	ldr	r3, [pc, #276]	; (800176c <HAL_RCC_OscConfig+0x628>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a44      	ldr	r2, [pc, #272]	; (800176c <HAL_RCC_OscConfig+0x628>)
 800165a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800165e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001660:	4b42      	ldr	r3, [pc, #264]	; (800176c <HAL_RCC_OscConfig+0x628>)
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	4a41      	ldr	r2, [pc, #260]	; (800176c <HAL_RCC_OscConfig+0x628>)
 8001666:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800166a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800166c:	f7ff fa32 	bl	8000ad4 <HAL_GetTick>
 8001670:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001672:	e008      	b.n	8001686 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001674:	f7ff fa2e 	bl	8000ad4 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b02      	cmp	r3, #2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e06e      	b.n	8001764 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001686:	4b39      	ldr	r3, [pc, #228]	; (800176c <HAL_RCC_OscConfig+0x628>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d0f0      	beq.n	8001674 <HAL_RCC_OscConfig+0x530>
 8001692:	e066      	b.n	8001762 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001694:	4b35      	ldr	r3, [pc, #212]	; (800176c <HAL_RCC_OscConfig+0x628>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a34      	ldr	r2, [pc, #208]	; (800176c <HAL_RCC_OscConfig+0x628>)
 800169a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800169e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80016a0:	4b32      	ldr	r3, [pc, #200]	; (800176c <HAL_RCC_OscConfig+0x628>)
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	4a31      	ldr	r2, [pc, #196]	; (800176c <HAL_RCC_OscConfig+0x628>)
 80016a6:	f023 0303 	bic.w	r3, r3, #3
 80016aa:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80016ac:	4b2f      	ldr	r3, [pc, #188]	; (800176c <HAL_RCC_OscConfig+0x628>)
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	4a2e      	ldr	r2, [pc, #184]	; (800176c <HAL_RCC_OscConfig+0x628>)
 80016b2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80016b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016ba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016bc:	f7ff fa0a 	bl	8000ad4 <HAL_GetTick>
 80016c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016c2:	e008      	b.n	80016d6 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016c4:	f7ff fa06 	bl	8000ad4 <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e046      	b.n	8001764 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016d6:	4b25      	ldr	r3, [pc, #148]	; (800176c <HAL_RCC_OscConfig+0x628>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d1f0      	bne.n	80016c4 <HAL_RCC_OscConfig+0x580>
 80016e2:	e03e      	b.n	8001762 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	69db      	ldr	r3, [r3, #28]
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d101      	bne.n	80016f0 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e039      	b.n	8001764 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80016f0:	4b1e      	ldr	r3, [pc, #120]	; (800176c <HAL_RCC_OscConfig+0x628>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	f003 0203 	and.w	r2, r3, #3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6a1b      	ldr	r3, [r3, #32]
 8001700:	429a      	cmp	r2, r3
 8001702:	d12c      	bne.n	800175e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170e:	3b01      	subs	r3, #1
 8001710:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001712:	429a      	cmp	r2, r3
 8001714:	d123      	bne.n	800175e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001720:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001722:	429a      	cmp	r2, r3
 8001724:	d11b      	bne.n	800175e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001730:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001732:	429a      	cmp	r2, r3
 8001734:	d113      	bne.n	800175e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001740:	085b      	lsrs	r3, r3, #1
 8001742:	3b01      	subs	r3, #1
 8001744:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001746:	429a      	cmp	r2, r3
 8001748:	d109      	bne.n	800175e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001754:	085b      	lsrs	r3, r3, #1
 8001756:	3b01      	subs	r3, #1
 8001758:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800175a:	429a      	cmp	r2, r3
 800175c:	d001      	beq.n	8001762 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e000      	b.n	8001764 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8001762:	2300      	movs	r3, #0
}
 8001764:	4618      	mov	r0, r3
 8001766:	3720      	adds	r7, #32
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	40021000 	.word	0x40021000
 8001770:	019f800c 	.word	0x019f800c

08001774 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b086      	sub	sp, #24
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800177e:	2300      	movs	r3, #0
 8001780:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d101      	bne.n	800178c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e11e      	b.n	80019ca <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800178c:	4b91      	ldr	r3, [pc, #580]	; (80019d4 <HAL_RCC_ClockConfig+0x260>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 030f 	and.w	r3, r3, #15
 8001794:	683a      	ldr	r2, [r7, #0]
 8001796:	429a      	cmp	r2, r3
 8001798:	d910      	bls.n	80017bc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800179a:	4b8e      	ldr	r3, [pc, #568]	; (80019d4 <HAL_RCC_ClockConfig+0x260>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f023 020f 	bic.w	r2, r3, #15
 80017a2:	498c      	ldr	r1, [pc, #560]	; (80019d4 <HAL_RCC_ClockConfig+0x260>)
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017aa:	4b8a      	ldr	r3, [pc, #552]	; (80019d4 <HAL_RCC_ClockConfig+0x260>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 030f 	and.w	r3, r3, #15
 80017b2:	683a      	ldr	r2, [r7, #0]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d001      	beq.n	80017bc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e106      	b.n	80019ca <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0301 	and.w	r3, r3, #1
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d073      	beq.n	80018b0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	2b03      	cmp	r3, #3
 80017ce:	d129      	bne.n	8001824 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017d0:	4b81      	ldr	r3, [pc, #516]	; (80019d8 <HAL_RCC_ClockConfig+0x264>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d101      	bne.n	80017e0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e0f4      	b.n	80019ca <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80017e0:	f000 f966 	bl	8001ab0 <RCC_GetSysClockFreqFromPLLSource>
 80017e4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	4a7c      	ldr	r2, [pc, #496]	; (80019dc <HAL_RCC_ClockConfig+0x268>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d93f      	bls.n	800186e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80017ee:	4b7a      	ldr	r3, [pc, #488]	; (80019d8 <HAL_RCC_ClockConfig+0x264>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d009      	beq.n	800180e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001802:	2b00      	cmp	r3, #0
 8001804:	d033      	beq.n	800186e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800180a:	2b00      	cmp	r3, #0
 800180c:	d12f      	bne.n	800186e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800180e:	4b72      	ldr	r3, [pc, #456]	; (80019d8 <HAL_RCC_ClockConfig+0x264>)
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001816:	4a70      	ldr	r2, [pc, #448]	; (80019d8 <HAL_RCC_ClockConfig+0x264>)
 8001818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800181c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800181e:	2380      	movs	r3, #128	; 0x80
 8001820:	617b      	str	r3, [r7, #20]
 8001822:	e024      	b.n	800186e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	2b02      	cmp	r3, #2
 800182a:	d107      	bne.n	800183c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800182c:	4b6a      	ldr	r3, [pc, #424]	; (80019d8 <HAL_RCC_ClockConfig+0x264>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001834:	2b00      	cmp	r3, #0
 8001836:	d109      	bne.n	800184c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e0c6      	b.n	80019ca <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800183c:	4b66      	ldr	r3, [pc, #408]	; (80019d8 <HAL_RCC_ClockConfig+0x264>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001844:	2b00      	cmp	r3, #0
 8001846:	d101      	bne.n	800184c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e0be      	b.n	80019ca <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800184c:	f000 f8ce 	bl	80019ec <HAL_RCC_GetSysClockFreq>
 8001850:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	4a61      	ldr	r2, [pc, #388]	; (80019dc <HAL_RCC_ClockConfig+0x268>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d909      	bls.n	800186e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800185a:	4b5f      	ldr	r3, [pc, #380]	; (80019d8 <HAL_RCC_ClockConfig+0x264>)
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001862:	4a5d      	ldr	r2, [pc, #372]	; (80019d8 <HAL_RCC_ClockConfig+0x264>)
 8001864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001868:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800186a:	2380      	movs	r3, #128	; 0x80
 800186c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800186e:	4b5a      	ldr	r3, [pc, #360]	; (80019d8 <HAL_RCC_ClockConfig+0x264>)
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	f023 0203 	bic.w	r2, r3, #3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	4957      	ldr	r1, [pc, #348]	; (80019d8 <HAL_RCC_ClockConfig+0x264>)
 800187c:	4313      	orrs	r3, r2
 800187e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001880:	f7ff f928 	bl	8000ad4 <HAL_GetTick>
 8001884:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001886:	e00a      	b.n	800189e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001888:	f7ff f924 	bl	8000ad4 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	f241 3288 	movw	r2, #5000	; 0x1388
 8001896:	4293      	cmp	r3, r2
 8001898:	d901      	bls.n	800189e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e095      	b.n	80019ca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800189e:	4b4e      	ldr	r3, [pc, #312]	; (80019d8 <HAL_RCC_ClockConfig+0x264>)
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f003 020c 	and.w	r2, r3, #12
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d1eb      	bne.n	8001888 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0302 	and.w	r3, r3, #2
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d023      	beq.n	8001904 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0304 	and.w	r3, r3, #4
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d005      	beq.n	80018d4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018c8:	4b43      	ldr	r3, [pc, #268]	; (80019d8 <HAL_RCC_ClockConfig+0x264>)
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	4a42      	ldr	r2, [pc, #264]	; (80019d8 <HAL_RCC_ClockConfig+0x264>)
 80018ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80018d2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0308 	and.w	r3, r3, #8
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d007      	beq.n	80018f0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80018e0:	4b3d      	ldr	r3, [pc, #244]	; (80019d8 <HAL_RCC_ClockConfig+0x264>)
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80018e8:	4a3b      	ldr	r2, [pc, #236]	; (80019d8 <HAL_RCC_ClockConfig+0x264>)
 80018ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80018ee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018f0:	4b39      	ldr	r3, [pc, #228]	; (80019d8 <HAL_RCC_ClockConfig+0x264>)
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	4936      	ldr	r1, [pc, #216]	; (80019d8 <HAL_RCC_ClockConfig+0x264>)
 80018fe:	4313      	orrs	r3, r2
 8001900:	608b      	str	r3, [r1, #8]
 8001902:	e008      	b.n	8001916 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	2b80      	cmp	r3, #128	; 0x80
 8001908:	d105      	bne.n	8001916 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800190a:	4b33      	ldr	r3, [pc, #204]	; (80019d8 <HAL_RCC_ClockConfig+0x264>)
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	4a32      	ldr	r2, [pc, #200]	; (80019d8 <HAL_RCC_ClockConfig+0x264>)
 8001910:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001914:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001916:	4b2f      	ldr	r3, [pc, #188]	; (80019d4 <HAL_RCC_ClockConfig+0x260>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 030f 	and.w	r3, r3, #15
 800191e:	683a      	ldr	r2, [r7, #0]
 8001920:	429a      	cmp	r2, r3
 8001922:	d21d      	bcs.n	8001960 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001924:	4b2b      	ldr	r3, [pc, #172]	; (80019d4 <HAL_RCC_ClockConfig+0x260>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f023 020f 	bic.w	r2, r3, #15
 800192c:	4929      	ldr	r1, [pc, #164]	; (80019d4 <HAL_RCC_ClockConfig+0x260>)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	4313      	orrs	r3, r2
 8001932:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001934:	f7ff f8ce 	bl	8000ad4 <HAL_GetTick>
 8001938:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800193a:	e00a      	b.n	8001952 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800193c:	f7ff f8ca 	bl	8000ad4 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	f241 3288 	movw	r2, #5000	; 0x1388
 800194a:	4293      	cmp	r3, r2
 800194c:	d901      	bls.n	8001952 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e03b      	b.n	80019ca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001952:	4b20      	ldr	r3, [pc, #128]	; (80019d4 <HAL_RCC_ClockConfig+0x260>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 030f 	and.w	r3, r3, #15
 800195a:	683a      	ldr	r2, [r7, #0]
 800195c:	429a      	cmp	r2, r3
 800195e:	d1ed      	bne.n	800193c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0304 	and.w	r3, r3, #4
 8001968:	2b00      	cmp	r3, #0
 800196a:	d008      	beq.n	800197e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800196c:	4b1a      	ldr	r3, [pc, #104]	; (80019d8 <HAL_RCC_ClockConfig+0x264>)
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	4917      	ldr	r1, [pc, #92]	; (80019d8 <HAL_RCC_ClockConfig+0x264>)
 800197a:	4313      	orrs	r3, r2
 800197c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0308 	and.w	r3, r3, #8
 8001986:	2b00      	cmp	r3, #0
 8001988:	d009      	beq.n	800199e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800198a:	4b13      	ldr	r3, [pc, #76]	; (80019d8 <HAL_RCC_ClockConfig+0x264>)
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	691b      	ldr	r3, [r3, #16]
 8001996:	00db      	lsls	r3, r3, #3
 8001998:	490f      	ldr	r1, [pc, #60]	; (80019d8 <HAL_RCC_ClockConfig+0x264>)
 800199a:	4313      	orrs	r3, r2
 800199c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800199e:	f000 f825 	bl	80019ec <HAL_RCC_GetSysClockFreq>
 80019a2:	4602      	mov	r2, r0
 80019a4:	4b0c      	ldr	r3, [pc, #48]	; (80019d8 <HAL_RCC_ClockConfig+0x264>)
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	091b      	lsrs	r3, r3, #4
 80019aa:	f003 030f 	and.w	r3, r3, #15
 80019ae:	490c      	ldr	r1, [pc, #48]	; (80019e0 <HAL_RCC_ClockConfig+0x26c>)
 80019b0:	5ccb      	ldrb	r3, [r1, r3]
 80019b2:	f003 031f 	and.w	r3, r3, #31
 80019b6:	fa22 f303 	lsr.w	r3, r2, r3
 80019ba:	4a0a      	ldr	r2, [pc, #40]	; (80019e4 <HAL_RCC_ClockConfig+0x270>)
 80019bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80019be:	4b0a      	ldr	r3, [pc, #40]	; (80019e8 <HAL_RCC_ClockConfig+0x274>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7ff f83a 	bl	8000a3c <HAL_InitTick>
 80019c8:	4603      	mov	r3, r0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3718      	adds	r7, #24
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	40022000 	.word	0x40022000
 80019d8:	40021000 	.word	0x40021000
 80019dc:	04c4b400 	.word	0x04c4b400
 80019e0:	08003c18 	.word	0x08003c18
 80019e4:	20000000 	.word	0x20000000
 80019e8:	20000004 	.word	0x20000004

080019ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b087      	sub	sp, #28
 80019f0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80019f2:	4b2c      	ldr	r3, [pc, #176]	; (8001aa4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	f003 030c 	and.w	r3, r3, #12
 80019fa:	2b04      	cmp	r3, #4
 80019fc:	d102      	bne.n	8001a04 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80019fe:	4b2a      	ldr	r3, [pc, #168]	; (8001aa8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a00:	613b      	str	r3, [r7, #16]
 8001a02:	e047      	b.n	8001a94 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001a04:	4b27      	ldr	r3, [pc, #156]	; (8001aa4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	f003 030c 	and.w	r3, r3, #12
 8001a0c:	2b08      	cmp	r3, #8
 8001a0e:	d102      	bne.n	8001a16 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001a10:	4b26      	ldr	r3, [pc, #152]	; (8001aac <HAL_RCC_GetSysClockFreq+0xc0>)
 8001a12:	613b      	str	r3, [r7, #16]
 8001a14:	e03e      	b.n	8001a94 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001a16:	4b23      	ldr	r3, [pc, #140]	; (8001aa4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	f003 030c 	and.w	r3, r3, #12
 8001a1e:	2b0c      	cmp	r3, #12
 8001a20:	d136      	bne.n	8001a90 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001a22:	4b20      	ldr	r3, [pc, #128]	; (8001aa4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	f003 0303 	and.w	r3, r3, #3
 8001a2a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a2c:	4b1d      	ldr	r3, [pc, #116]	; (8001aa4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	091b      	lsrs	r3, r3, #4
 8001a32:	f003 030f 	and.w	r3, r3, #15
 8001a36:	3301      	adds	r3, #1
 8001a38:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2b03      	cmp	r3, #3
 8001a3e:	d10c      	bne.n	8001a5a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a40:	4a1a      	ldr	r2, [pc, #104]	; (8001aac <HAL_RCC_GetSysClockFreq+0xc0>)
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a48:	4a16      	ldr	r2, [pc, #88]	; (8001aa4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a4a:	68d2      	ldr	r2, [r2, #12]
 8001a4c:	0a12      	lsrs	r2, r2, #8
 8001a4e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a52:	fb02 f303 	mul.w	r3, r2, r3
 8001a56:	617b      	str	r3, [r7, #20]
      break;
 8001a58:	e00c      	b.n	8001a74 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a5a:	4a13      	ldr	r2, [pc, #76]	; (8001aa8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a62:	4a10      	ldr	r2, [pc, #64]	; (8001aa4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a64:	68d2      	ldr	r2, [r2, #12]
 8001a66:	0a12      	lsrs	r2, r2, #8
 8001a68:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a6c:	fb02 f303 	mul.w	r3, r2, r3
 8001a70:	617b      	str	r3, [r7, #20]
      break;
 8001a72:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001a74:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	0e5b      	lsrs	r3, r3, #25
 8001a7a:	f003 0303 	and.w	r3, r3, #3
 8001a7e:	3301      	adds	r3, #1
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001a84:	697a      	ldr	r2, [r7, #20]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a8c:	613b      	str	r3, [r7, #16]
 8001a8e:	e001      	b.n	8001a94 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001a90:	2300      	movs	r3, #0
 8001a92:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001a94:	693b      	ldr	r3, [r7, #16]
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	371c      	adds	r7, #28
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	00f42400 	.word	0x00f42400
 8001aac:	007a1200 	.word	0x007a1200

08001ab0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b087      	sub	sp, #28
 8001ab4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ab6:	4b1e      	ldr	r3, [pc, #120]	; (8001b30 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	f003 0303 	and.w	r3, r3, #3
 8001abe:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ac0:	4b1b      	ldr	r3, [pc, #108]	; (8001b30 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	091b      	lsrs	r3, r3, #4
 8001ac6:	f003 030f 	and.w	r3, r3, #15
 8001aca:	3301      	adds	r3, #1
 8001acc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	2b03      	cmp	r3, #3
 8001ad2:	d10c      	bne.n	8001aee <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ad4:	4a17      	ldr	r2, [pc, #92]	; (8001b34 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001adc:	4a14      	ldr	r2, [pc, #80]	; (8001b30 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ade:	68d2      	ldr	r2, [r2, #12]
 8001ae0:	0a12      	lsrs	r2, r2, #8
 8001ae2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001ae6:	fb02 f303 	mul.w	r3, r2, r3
 8001aea:	617b      	str	r3, [r7, #20]
    break;
 8001aec:	e00c      	b.n	8001b08 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001aee:	4a12      	ldr	r2, [pc, #72]	; (8001b38 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af6:	4a0e      	ldr	r2, [pc, #56]	; (8001b30 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001af8:	68d2      	ldr	r2, [r2, #12]
 8001afa:	0a12      	lsrs	r2, r2, #8
 8001afc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001b00:	fb02 f303 	mul.w	r3, r2, r3
 8001b04:	617b      	str	r3, [r7, #20]
    break;
 8001b06:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001b08:	4b09      	ldr	r3, [pc, #36]	; (8001b30 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	0e5b      	lsrs	r3, r3, #25
 8001b0e:	f003 0303 	and.w	r3, r3, #3
 8001b12:	3301      	adds	r3, #1
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001b18:	697a      	ldr	r2, [r7, #20]
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b20:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001b22:	687b      	ldr	r3, [r7, #4]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	371c      	adds	r7, #28
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr
 8001b30:	40021000 	.word	0x40021000
 8001b34:	007a1200 	.word	0x007a1200
 8001b38:	00f42400 	.word	0x00f42400

08001b3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d101      	bne.n	8001b4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e049      	b.n	8001be2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d106      	bne.n	8001b68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f7fe fdd8 	bl	8000718 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2202      	movs	r2, #2
 8001b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	3304      	adds	r3, #4
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4610      	mov	r0, r2
 8001b7c:	f000 fbd2 	bl	8002324 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2201      	movs	r2, #1
 8001b84:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2201      	movs	r2, #1
 8001b94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b082      	sub	sp, #8
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d101      	bne.n	8001bfc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e049      	b.n	8001c90 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d106      	bne.n	8001c16 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f000 f841 	bl	8001c98 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2202      	movs	r2, #2
 8001c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	3304      	adds	r3, #4
 8001c26:	4619      	mov	r1, r3
 8001c28:	4610      	mov	r0, r2
 8001c2a:	f000 fb7b 	bl	8002324 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2201      	movs	r2, #1
 8001c32:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2201      	movs	r2, #1
 8001c3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2201      	movs	r2, #1
 8001c42:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2201      	movs	r2, #1
 8001c4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2201      	movs	r2, #1
 8001c52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2201      	movs	r2, #1
 8001c5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2201      	movs	r2, #1
 8001c62:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2201      	movs	r2, #1
 8001c6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2201      	movs	r2, #1
 8001c72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2201      	movs	r2, #1
 8001c82:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2201      	movs	r2, #1
 8001c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c8e:	2300      	movs	r3, #0
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001ca0:	bf00      	nop
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d109      	bne.n	8001cd0 <HAL_TIM_PWM_Start+0x24>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	bf14      	ite	ne
 8001cc8:	2301      	movne	r3, #1
 8001cca:	2300      	moveq	r3, #0
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	e03c      	b.n	8001d4a <HAL_TIM_PWM_Start+0x9e>
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	2b04      	cmp	r3, #4
 8001cd4:	d109      	bne.n	8001cea <HAL_TIM_PWM_Start+0x3e>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	bf14      	ite	ne
 8001ce2:	2301      	movne	r3, #1
 8001ce4:	2300      	moveq	r3, #0
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	e02f      	b.n	8001d4a <HAL_TIM_PWM_Start+0x9e>
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	2b08      	cmp	r3, #8
 8001cee:	d109      	bne.n	8001d04 <HAL_TIM_PWM_Start+0x58>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	bf14      	ite	ne
 8001cfc:	2301      	movne	r3, #1
 8001cfe:	2300      	moveq	r3, #0
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	e022      	b.n	8001d4a <HAL_TIM_PWM_Start+0x9e>
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	2b0c      	cmp	r3, #12
 8001d08:	d109      	bne.n	8001d1e <HAL_TIM_PWM_Start+0x72>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	bf14      	ite	ne
 8001d16:	2301      	movne	r3, #1
 8001d18:	2300      	moveq	r3, #0
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	e015      	b.n	8001d4a <HAL_TIM_PWM_Start+0x9e>
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	2b10      	cmp	r3, #16
 8001d22:	d109      	bne.n	8001d38 <HAL_TIM_PWM_Start+0x8c>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	bf14      	ite	ne
 8001d30:	2301      	movne	r3, #1
 8001d32:	2300      	moveq	r3, #0
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	e008      	b.n	8001d4a <HAL_TIM_PWM_Start+0x9e>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	bf14      	ite	ne
 8001d44:	2301      	movne	r3, #1
 8001d46:	2300      	moveq	r3, #0
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e0a6      	b.n	8001ea0 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d104      	bne.n	8001d62 <HAL_TIM_PWM_Start+0xb6>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2202      	movs	r2, #2
 8001d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d60:	e023      	b.n	8001daa <HAL_TIM_PWM_Start+0xfe>
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	2b04      	cmp	r3, #4
 8001d66:	d104      	bne.n	8001d72 <HAL_TIM_PWM_Start+0xc6>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2202      	movs	r2, #2
 8001d6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d70:	e01b      	b.n	8001daa <HAL_TIM_PWM_Start+0xfe>
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	2b08      	cmp	r3, #8
 8001d76:	d104      	bne.n	8001d82 <HAL_TIM_PWM_Start+0xd6>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2202      	movs	r2, #2
 8001d7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d80:	e013      	b.n	8001daa <HAL_TIM_PWM_Start+0xfe>
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	2b0c      	cmp	r3, #12
 8001d86:	d104      	bne.n	8001d92 <HAL_TIM_PWM_Start+0xe6>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2202      	movs	r2, #2
 8001d8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001d90:	e00b      	b.n	8001daa <HAL_TIM_PWM_Start+0xfe>
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	2b10      	cmp	r3, #16
 8001d96:	d104      	bne.n	8001da2 <HAL_TIM_PWM_Start+0xf6>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2202      	movs	r2, #2
 8001d9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001da0:	e003      	b.n	8001daa <HAL_TIM_PWM_Start+0xfe>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2202      	movs	r2, #2
 8001da6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2201      	movs	r2, #1
 8001db0:	6839      	ldr	r1, [r7, #0]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f000 ff24 	bl	8002c00 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a3a      	ldr	r2, [pc, #232]	; (8001ea8 <HAL_TIM_PWM_Start+0x1fc>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d018      	beq.n	8001df4 <HAL_TIM_PWM_Start+0x148>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a39      	ldr	r2, [pc, #228]	; (8001eac <HAL_TIM_PWM_Start+0x200>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d013      	beq.n	8001df4 <HAL_TIM_PWM_Start+0x148>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a37      	ldr	r2, [pc, #220]	; (8001eb0 <HAL_TIM_PWM_Start+0x204>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d00e      	beq.n	8001df4 <HAL_TIM_PWM_Start+0x148>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a36      	ldr	r2, [pc, #216]	; (8001eb4 <HAL_TIM_PWM_Start+0x208>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d009      	beq.n	8001df4 <HAL_TIM_PWM_Start+0x148>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a34      	ldr	r2, [pc, #208]	; (8001eb8 <HAL_TIM_PWM_Start+0x20c>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d004      	beq.n	8001df4 <HAL_TIM_PWM_Start+0x148>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a33      	ldr	r2, [pc, #204]	; (8001ebc <HAL_TIM_PWM_Start+0x210>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d101      	bne.n	8001df8 <HAL_TIM_PWM_Start+0x14c>
 8001df4:	2301      	movs	r3, #1
 8001df6:	e000      	b.n	8001dfa <HAL_TIM_PWM_Start+0x14e>
 8001df8:	2300      	movs	r3, #0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d007      	beq.n	8001e0e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e0c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a25      	ldr	r2, [pc, #148]	; (8001ea8 <HAL_TIM_PWM_Start+0x1fc>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d022      	beq.n	8001e5e <HAL_TIM_PWM_Start+0x1b2>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e20:	d01d      	beq.n	8001e5e <HAL_TIM_PWM_Start+0x1b2>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a26      	ldr	r2, [pc, #152]	; (8001ec0 <HAL_TIM_PWM_Start+0x214>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d018      	beq.n	8001e5e <HAL_TIM_PWM_Start+0x1b2>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a24      	ldr	r2, [pc, #144]	; (8001ec4 <HAL_TIM_PWM_Start+0x218>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d013      	beq.n	8001e5e <HAL_TIM_PWM_Start+0x1b2>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a23      	ldr	r2, [pc, #140]	; (8001ec8 <HAL_TIM_PWM_Start+0x21c>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d00e      	beq.n	8001e5e <HAL_TIM_PWM_Start+0x1b2>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a19      	ldr	r2, [pc, #100]	; (8001eac <HAL_TIM_PWM_Start+0x200>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d009      	beq.n	8001e5e <HAL_TIM_PWM_Start+0x1b2>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a18      	ldr	r2, [pc, #96]	; (8001eb0 <HAL_TIM_PWM_Start+0x204>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d004      	beq.n	8001e5e <HAL_TIM_PWM_Start+0x1b2>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a18      	ldr	r2, [pc, #96]	; (8001ebc <HAL_TIM_PWM_Start+0x210>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d115      	bne.n	8001e8a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	689a      	ldr	r2, [r3, #8]
 8001e64:	4b19      	ldr	r3, [pc, #100]	; (8001ecc <HAL_TIM_PWM_Start+0x220>)
 8001e66:	4013      	ands	r3, r2
 8001e68:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2b06      	cmp	r3, #6
 8001e6e:	d015      	beq.n	8001e9c <HAL_TIM_PWM_Start+0x1f0>
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e76:	d011      	beq.n	8001e9c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f042 0201 	orr.w	r2, r2, #1
 8001e86:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e88:	e008      	b.n	8001e9c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f042 0201 	orr.w	r2, r2, #1
 8001e98:	601a      	str	r2, [r3, #0]
 8001e9a:	e000      	b.n	8001e9e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e9c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001e9e:	2300      	movs	r3, #0
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3710      	adds	r7, #16
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40012c00 	.word	0x40012c00
 8001eac:	40013400 	.word	0x40013400
 8001eb0:	40014000 	.word	0x40014000
 8001eb4:	40014400 	.word	0x40014400
 8001eb8:	40014800 	.word	0x40014800
 8001ebc:	40015000 	.word	0x40015000
 8001ec0:	40000400 	.word	0x40000400
 8001ec4:	40000800 	.word	0x40000800
 8001ec8:	40000c00 	.word	0x40000c00
 8001ecc:	00010007 	.word	0x00010007

08001ed0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b086      	sub	sp, #24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	60b9      	str	r1, [r7, #8]
 8001eda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001edc:	2300      	movs	r3, #0
 8001ede:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d101      	bne.n	8001eee <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001eea:	2302      	movs	r3, #2
 8001eec:	e0ff      	b.n	80020ee <HAL_TIM_PWM_ConfigChannel+0x21e>
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2b14      	cmp	r3, #20
 8001efa:	f200 80f0 	bhi.w	80020de <HAL_TIM_PWM_ConfigChannel+0x20e>
 8001efe:	a201      	add	r2, pc, #4	; (adr r2, 8001f04 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f04:	08001f59 	.word	0x08001f59
 8001f08:	080020df 	.word	0x080020df
 8001f0c:	080020df 	.word	0x080020df
 8001f10:	080020df 	.word	0x080020df
 8001f14:	08001f99 	.word	0x08001f99
 8001f18:	080020df 	.word	0x080020df
 8001f1c:	080020df 	.word	0x080020df
 8001f20:	080020df 	.word	0x080020df
 8001f24:	08001fdb 	.word	0x08001fdb
 8001f28:	080020df 	.word	0x080020df
 8001f2c:	080020df 	.word	0x080020df
 8001f30:	080020df 	.word	0x080020df
 8001f34:	0800201b 	.word	0x0800201b
 8001f38:	080020df 	.word	0x080020df
 8001f3c:	080020df 	.word	0x080020df
 8001f40:	080020df 	.word	0x080020df
 8001f44:	0800205d 	.word	0x0800205d
 8001f48:	080020df 	.word	0x080020df
 8001f4c:	080020df 	.word	0x080020df
 8001f50:	080020df 	.word	0x080020df
 8001f54:	0800209d 	.word	0x0800209d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	68b9      	ldr	r1, [r7, #8]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f000 fa88 	bl	8002474 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	699a      	ldr	r2, [r3, #24]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f042 0208 	orr.w	r2, r2, #8
 8001f72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	699a      	ldr	r2, [r3, #24]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f022 0204 	bic.w	r2, r2, #4
 8001f82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	6999      	ldr	r1, [r3, #24]
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	691a      	ldr	r2, [r3, #16]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	430a      	orrs	r2, r1
 8001f94:	619a      	str	r2, [r3, #24]
      break;
 8001f96:	e0a5      	b.n	80020e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	68b9      	ldr	r1, [r7, #8]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f000 fb02 	bl	80025a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	699a      	ldr	r2, [r3, #24]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001fb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	699a      	ldr	r2, [r3, #24]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	6999      	ldr	r1, [r3, #24]
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	021a      	lsls	r2, r3, #8
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	430a      	orrs	r2, r1
 8001fd6:	619a      	str	r2, [r3, #24]
      break;
 8001fd8:	e084      	b.n	80020e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	68b9      	ldr	r1, [r7, #8]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f000 fb75 	bl	80026d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	69da      	ldr	r2, [r3, #28]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f042 0208 	orr.w	r2, r2, #8
 8001ff4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	69da      	ldr	r2, [r3, #28]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f022 0204 	bic.w	r2, r2, #4
 8002004:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	69d9      	ldr	r1, [r3, #28]
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	691a      	ldr	r2, [r3, #16]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	430a      	orrs	r2, r1
 8002016:	61da      	str	r2, [r3, #28]
      break;
 8002018:	e064      	b.n	80020e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68b9      	ldr	r1, [r7, #8]
 8002020:	4618      	mov	r0, r3
 8002022:	f000 fbe7 	bl	80027f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	69da      	ldr	r2, [r3, #28]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002034:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	69da      	ldr	r2, [r3, #28]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002044:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	69d9      	ldr	r1, [r3, #28]
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	691b      	ldr	r3, [r3, #16]
 8002050:	021a      	lsls	r2, r3, #8
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	430a      	orrs	r2, r1
 8002058:	61da      	str	r2, [r3, #28]
      break;
 800205a:	e043      	b.n	80020e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	68b9      	ldr	r1, [r7, #8]
 8002062:	4618      	mov	r0, r3
 8002064:	f000 fc5a 	bl	800291c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f042 0208 	orr.w	r2, r2, #8
 8002076:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f022 0204 	bic.w	r2, r2, #4
 8002086:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	691a      	ldr	r2, [r3, #16]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	430a      	orrs	r2, r1
 8002098:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800209a:	e023      	b.n	80020e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	68b9      	ldr	r1, [r7, #8]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f000 fca4 	bl	80029f0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020b6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020c6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	021a      	lsls	r2, r3, #8
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	430a      	orrs	r2, r1
 80020da:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80020dc:	e002      	b.n	80020e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	75fb      	strb	r3, [r7, #23]
      break;
 80020e2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2200      	movs	r2, #0
 80020e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80020ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3718      	adds	r7, #24
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop

080020f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002102:	2300      	movs	r3, #0
 8002104:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800210c:	2b01      	cmp	r3, #1
 800210e:	d101      	bne.n	8002114 <HAL_TIM_ConfigClockSource+0x1c>
 8002110:	2302      	movs	r3, #2
 8002112:	e0f6      	b.n	8002302 <HAL_TIM_ConfigClockSource+0x20a>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2202      	movs	r2, #2
 8002120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8002132:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002136:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800213e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	68ba      	ldr	r2, [r7, #8]
 8002146:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a6f      	ldr	r2, [pc, #444]	; (800230c <HAL_TIM_ConfigClockSource+0x214>)
 800214e:	4293      	cmp	r3, r2
 8002150:	f000 80c1 	beq.w	80022d6 <HAL_TIM_ConfigClockSource+0x1de>
 8002154:	4a6d      	ldr	r2, [pc, #436]	; (800230c <HAL_TIM_ConfigClockSource+0x214>)
 8002156:	4293      	cmp	r3, r2
 8002158:	f200 80c6 	bhi.w	80022e8 <HAL_TIM_ConfigClockSource+0x1f0>
 800215c:	4a6c      	ldr	r2, [pc, #432]	; (8002310 <HAL_TIM_ConfigClockSource+0x218>)
 800215e:	4293      	cmp	r3, r2
 8002160:	f000 80b9 	beq.w	80022d6 <HAL_TIM_ConfigClockSource+0x1de>
 8002164:	4a6a      	ldr	r2, [pc, #424]	; (8002310 <HAL_TIM_ConfigClockSource+0x218>)
 8002166:	4293      	cmp	r3, r2
 8002168:	f200 80be 	bhi.w	80022e8 <HAL_TIM_ConfigClockSource+0x1f0>
 800216c:	4a69      	ldr	r2, [pc, #420]	; (8002314 <HAL_TIM_ConfigClockSource+0x21c>)
 800216e:	4293      	cmp	r3, r2
 8002170:	f000 80b1 	beq.w	80022d6 <HAL_TIM_ConfigClockSource+0x1de>
 8002174:	4a67      	ldr	r2, [pc, #412]	; (8002314 <HAL_TIM_ConfigClockSource+0x21c>)
 8002176:	4293      	cmp	r3, r2
 8002178:	f200 80b6 	bhi.w	80022e8 <HAL_TIM_ConfigClockSource+0x1f0>
 800217c:	4a66      	ldr	r2, [pc, #408]	; (8002318 <HAL_TIM_ConfigClockSource+0x220>)
 800217e:	4293      	cmp	r3, r2
 8002180:	f000 80a9 	beq.w	80022d6 <HAL_TIM_ConfigClockSource+0x1de>
 8002184:	4a64      	ldr	r2, [pc, #400]	; (8002318 <HAL_TIM_ConfigClockSource+0x220>)
 8002186:	4293      	cmp	r3, r2
 8002188:	f200 80ae 	bhi.w	80022e8 <HAL_TIM_ConfigClockSource+0x1f0>
 800218c:	4a63      	ldr	r2, [pc, #396]	; (800231c <HAL_TIM_ConfigClockSource+0x224>)
 800218e:	4293      	cmp	r3, r2
 8002190:	f000 80a1 	beq.w	80022d6 <HAL_TIM_ConfigClockSource+0x1de>
 8002194:	4a61      	ldr	r2, [pc, #388]	; (800231c <HAL_TIM_ConfigClockSource+0x224>)
 8002196:	4293      	cmp	r3, r2
 8002198:	f200 80a6 	bhi.w	80022e8 <HAL_TIM_ConfigClockSource+0x1f0>
 800219c:	4a60      	ldr	r2, [pc, #384]	; (8002320 <HAL_TIM_ConfigClockSource+0x228>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	f000 8099 	beq.w	80022d6 <HAL_TIM_ConfigClockSource+0x1de>
 80021a4:	4a5e      	ldr	r2, [pc, #376]	; (8002320 <HAL_TIM_ConfigClockSource+0x228>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	f200 809e 	bhi.w	80022e8 <HAL_TIM_ConfigClockSource+0x1f0>
 80021ac:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80021b0:	f000 8091 	beq.w	80022d6 <HAL_TIM_ConfigClockSource+0x1de>
 80021b4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80021b8:	f200 8096 	bhi.w	80022e8 <HAL_TIM_ConfigClockSource+0x1f0>
 80021bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80021c0:	f000 8089 	beq.w	80022d6 <HAL_TIM_ConfigClockSource+0x1de>
 80021c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80021c8:	f200 808e 	bhi.w	80022e8 <HAL_TIM_ConfigClockSource+0x1f0>
 80021cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021d0:	d03e      	beq.n	8002250 <HAL_TIM_ConfigClockSource+0x158>
 80021d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021d6:	f200 8087 	bhi.w	80022e8 <HAL_TIM_ConfigClockSource+0x1f0>
 80021da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021de:	f000 8086 	beq.w	80022ee <HAL_TIM_ConfigClockSource+0x1f6>
 80021e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021e6:	d87f      	bhi.n	80022e8 <HAL_TIM_ConfigClockSource+0x1f0>
 80021e8:	2b70      	cmp	r3, #112	; 0x70
 80021ea:	d01a      	beq.n	8002222 <HAL_TIM_ConfigClockSource+0x12a>
 80021ec:	2b70      	cmp	r3, #112	; 0x70
 80021ee:	d87b      	bhi.n	80022e8 <HAL_TIM_ConfigClockSource+0x1f0>
 80021f0:	2b60      	cmp	r3, #96	; 0x60
 80021f2:	d050      	beq.n	8002296 <HAL_TIM_ConfigClockSource+0x19e>
 80021f4:	2b60      	cmp	r3, #96	; 0x60
 80021f6:	d877      	bhi.n	80022e8 <HAL_TIM_ConfigClockSource+0x1f0>
 80021f8:	2b50      	cmp	r3, #80	; 0x50
 80021fa:	d03c      	beq.n	8002276 <HAL_TIM_ConfigClockSource+0x17e>
 80021fc:	2b50      	cmp	r3, #80	; 0x50
 80021fe:	d873      	bhi.n	80022e8 <HAL_TIM_ConfigClockSource+0x1f0>
 8002200:	2b40      	cmp	r3, #64	; 0x40
 8002202:	d058      	beq.n	80022b6 <HAL_TIM_ConfigClockSource+0x1be>
 8002204:	2b40      	cmp	r3, #64	; 0x40
 8002206:	d86f      	bhi.n	80022e8 <HAL_TIM_ConfigClockSource+0x1f0>
 8002208:	2b30      	cmp	r3, #48	; 0x30
 800220a:	d064      	beq.n	80022d6 <HAL_TIM_ConfigClockSource+0x1de>
 800220c:	2b30      	cmp	r3, #48	; 0x30
 800220e:	d86b      	bhi.n	80022e8 <HAL_TIM_ConfigClockSource+0x1f0>
 8002210:	2b20      	cmp	r3, #32
 8002212:	d060      	beq.n	80022d6 <HAL_TIM_ConfigClockSource+0x1de>
 8002214:	2b20      	cmp	r3, #32
 8002216:	d867      	bhi.n	80022e8 <HAL_TIM_ConfigClockSource+0x1f0>
 8002218:	2b00      	cmp	r3, #0
 800221a:	d05c      	beq.n	80022d6 <HAL_TIM_ConfigClockSource+0x1de>
 800221c:	2b10      	cmp	r3, #16
 800221e:	d05a      	beq.n	80022d6 <HAL_TIM_ConfigClockSource+0x1de>
 8002220:	e062      	b.n	80022e8 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6818      	ldr	r0, [r3, #0]
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	6899      	ldr	r1, [r3, #8]
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	685a      	ldr	r2, [r3, #4]
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	f000 fcc5 	bl	8002bc0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002244:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	68ba      	ldr	r2, [r7, #8]
 800224c:	609a      	str	r2, [r3, #8]
      break;
 800224e:	e04f      	b.n	80022f0 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6818      	ldr	r0, [r3, #0]
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	6899      	ldr	r1, [r3, #8]
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685a      	ldr	r2, [r3, #4]
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	f000 fcae 	bl	8002bc0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	689a      	ldr	r2, [r3, #8]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002272:	609a      	str	r2, [r3, #8]
      break;
 8002274:	e03c      	b.n	80022f0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6818      	ldr	r0, [r3, #0]
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	6859      	ldr	r1, [r3, #4]
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	461a      	mov	r2, r3
 8002284:	f000 fc20 	bl	8002ac8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2150      	movs	r1, #80	; 0x50
 800228e:	4618      	mov	r0, r3
 8002290:	f000 fc79 	bl	8002b86 <TIM_ITRx_SetConfig>
      break;
 8002294:	e02c      	b.n	80022f0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6818      	ldr	r0, [r3, #0]
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	6859      	ldr	r1, [r3, #4]
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	461a      	mov	r2, r3
 80022a4:	f000 fc3f 	bl	8002b26 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2160      	movs	r1, #96	; 0x60
 80022ae:	4618      	mov	r0, r3
 80022b0:	f000 fc69 	bl	8002b86 <TIM_ITRx_SetConfig>
      break;
 80022b4:	e01c      	b.n	80022f0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6818      	ldr	r0, [r3, #0]
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	6859      	ldr	r1, [r3, #4]
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	461a      	mov	r2, r3
 80022c4:	f000 fc00 	bl	8002ac8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2140      	movs	r1, #64	; 0x40
 80022ce:	4618      	mov	r0, r3
 80022d0:	f000 fc59 	bl	8002b86 <TIM_ITRx_SetConfig>
      break;
 80022d4:	e00c      	b.n	80022f0 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4619      	mov	r1, r3
 80022e0:	4610      	mov	r0, r2
 80022e2:	f000 fc50 	bl	8002b86 <TIM_ITRx_SetConfig>
      break;
 80022e6:	e003      	b.n	80022f0 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	73fb      	strb	r3, [r7, #15]
      break;
 80022ec:	e000      	b.n	80022f0 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80022ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002300:	7bfb      	ldrb	r3, [r7, #15]
}
 8002302:	4618      	mov	r0, r3
 8002304:	3710      	adds	r7, #16
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	00100070 	.word	0x00100070
 8002310:	00100060 	.word	0x00100060
 8002314:	00100050 	.word	0x00100050
 8002318:	00100040 	.word	0x00100040
 800231c:	00100030 	.word	0x00100030
 8002320:	00100020 	.word	0x00100020

08002324 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002324:	b480      	push	{r7}
 8002326:	b085      	sub	sp, #20
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	4a46      	ldr	r2, [pc, #280]	; (8002450 <TIM_Base_SetConfig+0x12c>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d017      	beq.n	800236c <TIM_Base_SetConfig+0x48>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002342:	d013      	beq.n	800236c <TIM_Base_SetConfig+0x48>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	4a43      	ldr	r2, [pc, #268]	; (8002454 <TIM_Base_SetConfig+0x130>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d00f      	beq.n	800236c <TIM_Base_SetConfig+0x48>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	4a42      	ldr	r2, [pc, #264]	; (8002458 <TIM_Base_SetConfig+0x134>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d00b      	beq.n	800236c <TIM_Base_SetConfig+0x48>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	4a41      	ldr	r2, [pc, #260]	; (800245c <TIM_Base_SetConfig+0x138>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d007      	beq.n	800236c <TIM_Base_SetConfig+0x48>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	4a40      	ldr	r2, [pc, #256]	; (8002460 <TIM_Base_SetConfig+0x13c>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d003      	beq.n	800236c <TIM_Base_SetConfig+0x48>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	4a3f      	ldr	r2, [pc, #252]	; (8002464 <TIM_Base_SetConfig+0x140>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d108      	bne.n	800237e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002372:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	68fa      	ldr	r2, [r7, #12]
 800237a:	4313      	orrs	r3, r2
 800237c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a33      	ldr	r2, [pc, #204]	; (8002450 <TIM_Base_SetConfig+0x12c>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d023      	beq.n	80023ce <TIM_Base_SetConfig+0xaa>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800238c:	d01f      	beq.n	80023ce <TIM_Base_SetConfig+0xaa>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a30      	ldr	r2, [pc, #192]	; (8002454 <TIM_Base_SetConfig+0x130>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d01b      	beq.n	80023ce <TIM_Base_SetConfig+0xaa>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a2f      	ldr	r2, [pc, #188]	; (8002458 <TIM_Base_SetConfig+0x134>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d017      	beq.n	80023ce <TIM_Base_SetConfig+0xaa>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a2e      	ldr	r2, [pc, #184]	; (800245c <TIM_Base_SetConfig+0x138>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d013      	beq.n	80023ce <TIM_Base_SetConfig+0xaa>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a2d      	ldr	r2, [pc, #180]	; (8002460 <TIM_Base_SetConfig+0x13c>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d00f      	beq.n	80023ce <TIM_Base_SetConfig+0xaa>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a2d      	ldr	r2, [pc, #180]	; (8002468 <TIM_Base_SetConfig+0x144>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d00b      	beq.n	80023ce <TIM_Base_SetConfig+0xaa>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a2c      	ldr	r2, [pc, #176]	; (800246c <TIM_Base_SetConfig+0x148>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d007      	beq.n	80023ce <TIM_Base_SetConfig+0xaa>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a2b      	ldr	r2, [pc, #172]	; (8002470 <TIM_Base_SetConfig+0x14c>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d003      	beq.n	80023ce <TIM_Base_SetConfig+0xaa>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a26      	ldr	r2, [pc, #152]	; (8002464 <TIM_Base_SetConfig+0x140>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d108      	bne.n	80023e0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	68fa      	ldr	r2, [r7, #12]
 80023dc:	4313      	orrs	r3, r2
 80023de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	695b      	ldr	r3, [r3, #20]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	68fa      	ldr	r2, [r7, #12]
 80023f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	689a      	ldr	r2, [r3, #8]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4a12      	ldr	r2, [pc, #72]	; (8002450 <TIM_Base_SetConfig+0x12c>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d013      	beq.n	8002434 <TIM_Base_SetConfig+0x110>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	4a14      	ldr	r2, [pc, #80]	; (8002460 <TIM_Base_SetConfig+0x13c>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d00f      	beq.n	8002434 <TIM_Base_SetConfig+0x110>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4a14      	ldr	r2, [pc, #80]	; (8002468 <TIM_Base_SetConfig+0x144>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d00b      	beq.n	8002434 <TIM_Base_SetConfig+0x110>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	4a13      	ldr	r2, [pc, #76]	; (800246c <TIM_Base_SetConfig+0x148>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d007      	beq.n	8002434 <TIM_Base_SetConfig+0x110>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	4a12      	ldr	r2, [pc, #72]	; (8002470 <TIM_Base_SetConfig+0x14c>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d003      	beq.n	8002434 <TIM_Base_SetConfig+0x110>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	4a0d      	ldr	r2, [pc, #52]	; (8002464 <TIM_Base_SetConfig+0x140>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d103      	bne.n	800243c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	691a      	ldr	r2, [r3, #16]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2201      	movs	r2, #1
 8002440:	615a      	str	r2, [r3, #20]
}
 8002442:	bf00      	nop
 8002444:	3714      	adds	r7, #20
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	40012c00 	.word	0x40012c00
 8002454:	40000400 	.word	0x40000400
 8002458:	40000800 	.word	0x40000800
 800245c:	40000c00 	.word	0x40000c00
 8002460:	40013400 	.word	0x40013400
 8002464:	40015000 	.word	0x40015000
 8002468:	40014000 	.word	0x40014000
 800246c:	40014400 	.word	0x40014400
 8002470:	40014800 	.word	0x40014800

08002474 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002474:	b480      	push	{r7}
 8002476:	b087      	sub	sp, #28
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a1b      	ldr	r3, [r3, #32]
 8002482:	f023 0201 	bic.w	r2, r3, #1
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a1b      	ldr	r3, [r3, #32]
 800248e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	699b      	ldr	r3, [r3, #24]
 800249a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f023 0303 	bic.w	r3, r3, #3
 80024ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	68fa      	ldr	r2, [r7, #12]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	f023 0302 	bic.w	r3, r3, #2
 80024c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	697a      	ldr	r2, [r7, #20]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4a30      	ldr	r2, [pc, #192]	; (8002590 <TIM_OC1_SetConfig+0x11c>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d013      	beq.n	80024fc <TIM_OC1_SetConfig+0x88>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	4a2f      	ldr	r2, [pc, #188]	; (8002594 <TIM_OC1_SetConfig+0x120>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d00f      	beq.n	80024fc <TIM_OC1_SetConfig+0x88>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	4a2e      	ldr	r2, [pc, #184]	; (8002598 <TIM_OC1_SetConfig+0x124>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d00b      	beq.n	80024fc <TIM_OC1_SetConfig+0x88>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4a2d      	ldr	r2, [pc, #180]	; (800259c <TIM_OC1_SetConfig+0x128>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d007      	beq.n	80024fc <TIM_OC1_SetConfig+0x88>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	4a2c      	ldr	r2, [pc, #176]	; (80025a0 <TIM_OC1_SetConfig+0x12c>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d003      	beq.n	80024fc <TIM_OC1_SetConfig+0x88>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	4a2b      	ldr	r2, [pc, #172]	; (80025a4 <TIM_OC1_SetConfig+0x130>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d10c      	bne.n	8002516 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	f023 0308 	bic.w	r3, r3, #8
 8002502:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	697a      	ldr	r2, [r7, #20]
 800250a:	4313      	orrs	r3, r2
 800250c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	f023 0304 	bic.w	r3, r3, #4
 8002514:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a1d      	ldr	r2, [pc, #116]	; (8002590 <TIM_OC1_SetConfig+0x11c>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d013      	beq.n	8002546 <TIM_OC1_SetConfig+0xd2>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a1c      	ldr	r2, [pc, #112]	; (8002594 <TIM_OC1_SetConfig+0x120>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d00f      	beq.n	8002546 <TIM_OC1_SetConfig+0xd2>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a1b      	ldr	r2, [pc, #108]	; (8002598 <TIM_OC1_SetConfig+0x124>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d00b      	beq.n	8002546 <TIM_OC1_SetConfig+0xd2>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a1a      	ldr	r2, [pc, #104]	; (800259c <TIM_OC1_SetConfig+0x128>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d007      	beq.n	8002546 <TIM_OC1_SetConfig+0xd2>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a19      	ldr	r2, [pc, #100]	; (80025a0 <TIM_OC1_SetConfig+0x12c>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d003      	beq.n	8002546 <TIM_OC1_SetConfig+0xd2>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a18      	ldr	r2, [pc, #96]	; (80025a4 <TIM_OC1_SetConfig+0x130>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d111      	bne.n	800256a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800254c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002554:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	695b      	ldr	r3, [r3, #20]
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	4313      	orrs	r3, r2
 800255e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	699b      	ldr	r3, [r3, #24]
 8002564:	693a      	ldr	r2, [r7, #16]
 8002566:	4313      	orrs	r3, r2
 8002568:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	693a      	ldr	r2, [r7, #16]
 800256e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	68fa      	ldr	r2, [r7, #12]
 8002574:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685a      	ldr	r2, [r3, #4]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	697a      	ldr	r2, [r7, #20]
 8002582:	621a      	str	r2, [r3, #32]
}
 8002584:	bf00      	nop
 8002586:	371c      	adds	r7, #28
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr
 8002590:	40012c00 	.word	0x40012c00
 8002594:	40013400 	.word	0x40013400
 8002598:	40014000 	.word	0x40014000
 800259c:	40014400 	.word	0x40014400
 80025a0:	40014800 	.word	0x40014800
 80025a4:	40015000 	.word	0x40015000

080025a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b087      	sub	sp, #28
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6a1b      	ldr	r3, [r3, #32]
 80025b6:	f023 0210 	bic.w	r2, r3, #16
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a1b      	ldr	r3, [r3, #32]
 80025c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	021b      	lsls	r3, r3, #8
 80025ea:	68fa      	ldr	r2, [r7, #12]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	f023 0320 	bic.w	r3, r3, #32
 80025f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	011b      	lsls	r3, r3, #4
 80025fe:	697a      	ldr	r2, [r7, #20]
 8002600:	4313      	orrs	r3, r2
 8002602:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4a2c      	ldr	r2, [pc, #176]	; (80026b8 <TIM_OC2_SetConfig+0x110>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d007      	beq.n	800261c <TIM_OC2_SetConfig+0x74>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	4a2b      	ldr	r2, [pc, #172]	; (80026bc <TIM_OC2_SetConfig+0x114>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d003      	beq.n	800261c <TIM_OC2_SetConfig+0x74>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	4a2a      	ldr	r2, [pc, #168]	; (80026c0 <TIM_OC2_SetConfig+0x118>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d10d      	bne.n	8002638 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002622:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	011b      	lsls	r3, r3, #4
 800262a:	697a      	ldr	r2, [r7, #20]
 800262c:	4313      	orrs	r3, r2
 800262e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002636:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	4a1f      	ldr	r2, [pc, #124]	; (80026b8 <TIM_OC2_SetConfig+0x110>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d013      	beq.n	8002668 <TIM_OC2_SetConfig+0xc0>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	4a1e      	ldr	r2, [pc, #120]	; (80026bc <TIM_OC2_SetConfig+0x114>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d00f      	beq.n	8002668 <TIM_OC2_SetConfig+0xc0>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	4a1e      	ldr	r2, [pc, #120]	; (80026c4 <TIM_OC2_SetConfig+0x11c>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d00b      	beq.n	8002668 <TIM_OC2_SetConfig+0xc0>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4a1d      	ldr	r2, [pc, #116]	; (80026c8 <TIM_OC2_SetConfig+0x120>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d007      	beq.n	8002668 <TIM_OC2_SetConfig+0xc0>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	4a1c      	ldr	r2, [pc, #112]	; (80026cc <TIM_OC2_SetConfig+0x124>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d003      	beq.n	8002668 <TIM_OC2_SetConfig+0xc0>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	4a17      	ldr	r2, [pc, #92]	; (80026c0 <TIM_OC2_SetConfig+0x118>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d113      	bne.n	8002690 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800266e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002676:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	695b      	ldr	r3, [r3, #20]
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	693a      	ldr	r2, [r7, #16]
 8002680:	4313      	orrs	r3, r2
 8002682:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	693a      	ldr	r2, [r7, #16]
 800268c:	4313      	orrs	r3, r2
 800268e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	68fa      	ldr	r2, [r7, #12]
 800269a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685a      	ldr	r2, [r3, #4]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	697a      	ldr	r2, [r7, #20]
 80026a8:	621a      	str	r2, [r3, #32]
}
 80026aa:	bf00      	nop
 80026ac:	371c      	adds	r7, #28
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	40012c00 	.word	0x40012c00
 80026bc:	40013400 	.word	0x40013400
 80026c0:	40015000 	.word	0x40015000
 80026c4:	40014000 	.word	0x40014000
 80026c8:	40014400 	.word	0x40014400
 80026cc:	40014800 	.word	0x40014800

080026d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b087      	sub	sp, #28
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a1b      	ldr	r3, [r3, #32]
 80026de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a1b      	ldr	r3, [r3, #32]
 80026ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	69db      	ldr	r3, [r3, #28]
 80026f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002702:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f023 0303 	bic.w	r3, r3, #3
 800270a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	68fa      	ldr	r2, [r7, #12]
 8002712:	4313      	orrs	r3, r2
 8002714:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800271c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	021b      	lsls	r3, r3, #8
 8002724:	697a      	ldr	r2, [r7, #20]
 8002726:	4313      	orrs	r3, r2
 8002728:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a2b      	ldr	r2, [pc, #172]	; (80027dc <TIM_OC3_SetConfig+0x10c>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d007      	beq.n	8002742 <TIM_OC3_SetConfig+0x72>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a2a      	ldr	r2, [pc, #168]	; (80027e0 <TIM_OC3_SetConfig+0x110>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d003      	beq.n	8002742 <TIM_OC3_SetConfig+0x72>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a29      	ldr	r2, [pc, #164]	; (80027e4 <TIM_OC3_SetConfig+0x114>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d10d      	bne.n	800275e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002748:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	021b      	lsls	r3, r3, #8
 8002750:	697a      	ldr	r2, [r7, #20]
 8002752:	4313      	orrs	r3, r2
 8002754:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800275c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a1e      	ldr	r2, [pc, #120]	; (80027dc <TIM_OC3_SetConfig+0x10c>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d013      	beq.n	800278e <TIM_OC3_SetConfig+0xbe>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a1d      	ldr	r2, [pc, #116]	; (80027e0 <TIM_OC3_SetConfig+0x110>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d00f      	beq.n	800278e <TIM_OC3_SetConfig+0xbe>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a1d      	ldr	r2, [pc, #116]	; (80027e8 <TIM_OC3_SetConfig+0x118>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d00b      	beq.n	800278e <TIM_OC3_SetConfig+0xbe>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a1c      	ldr	r2, [pc, #112]	; (80027ec <TIM_OC3_SetConfig+0x11c>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d007      	beq.n	800278e <TIM_OC3_SetConfig+0xbe>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a1b      	ldr	r2, [pc, #108]	; (80027f0 <TIM_OC3_SetConfig+0x120>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d003      	beq.n	800278e <TIM_OC3_SetConfig+0xbe>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a16      	ldr	r2, [pc, #88]	; (80027e4 <TIM_OC3_SetConfig+0x114>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d113      	bne.n	80027b6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002794:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800279c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	695b      	ldr	r3, [r3, #20]
 80027a2:	011b      	lsls	r3, r3, #4
 80027a4:	693a      	ldr	r2, [r7, #16]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	699b      	ldr	r3, [r3, #24]
 80027ae:	011b      	lsls	r3, r3, #4
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	693a      	ldr	r2, [r7, #16]
 80027ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	68fa      	ldr	r2, [r7, #12]
 80027c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	685a      	ldr	r2, [r3, #4]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	697a      	ldr	r2, [r7, #20]
 80027ce:	621a      	str	r2, [r3, #32]
}
 80027d0:	bf00      	nop
 80027d2:	371c      	adds	r7, #28
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr
 80027dc:	40012c00 	.word	0x40012c00
 80027e0:	40013400 	.word	0x40013400
 80027e4:	40015000 	.word	0x40015000
 80027e8:	40014000 	.word	0x40014000
 80027ec:	40014400 	.word	0x40014400
 80027f0:	40014800 	.word	0x40014800

080027f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b087      	sub	sp, #28
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a1b      	ldr	r3, [r3, #32]
 8002802:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a1b      	ldr	r3, [r3, #32]
 800280e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	69db      	ldr	r3, [r3, #28]
 800281a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002822:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002826:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800282e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	021b      	lsls	r3, r3, #8
 8002836:	68fa      	ldr	r2, [r7, #12]
 8002838:	4313      	orrs	r3, r2
 800283a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002842:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	031b      	lsls	r3, r3, #12
 800284a:	697a      	ldr	r2, [r7, #20]
 800284c:	4313      	orrs	r3, r2
 800284e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	4a2c      	ldr	r2, [pc, #176]	; (8002904 <TIM_OC4_SetConfig+0x110>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d007      	beq.n	8002868 <TIM_OC4_SetConfig+0x74>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	4a2b      	ldr	r2, [pc, #172]	; (8002908 <TIM_OC4_SetConfig+0x114>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d003      	beq.n	8002868 <TIM_OC4_SetConfig+0x74>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	4a2a      	ldr	r2, [pc, #168]	; (800290c <TIM_OC4_SetConfig+0x118>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d10d      	bne.n	8002884 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800286e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	031b      	lsls	r3, r3, #12
 8002876:	697a      	ldr	r2, [r7, #20]
 8002878:	4313      	orrs	r3, r2
 800287a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002882:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	4a1f      	ldr	r2, [pc, #124]	; (8002904 <TIM_OC4_SetConfig+0x110>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d013      	beq.n	80028b4 <TIM_OC4_SetConfig+0xc0>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	4a1e      	ldr	r2, [pc, #120]	; (8002908 <TIM_OC4_SetConfig+0x114>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d00f      	beq.n	80028b4 <TIM_OC4_SetConfig+0xc0>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	4a1e      	ldr	r2, [pc, #120]	; (8002910 <TIM_OC4_SetConfig+0x11c>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d00b      	beq.n	80028b4 <TIM_OC4_SetConfig+0xc0>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4a1d      	ldr	r2, [pc, #116]	; (8002914 <TIM_OC4_SetConfig+0x120>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d007      	beq.n	80028b4 <TIM_OC4_SetConfig+0xc0>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	4a1c      	ldr	r2, [pc, #112]	; (8002918 <TIM_OC4_SetConfig+0x124>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d003      	beq.n	80028b4 <TIM_OC4_SetConfig+0xc0>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	4a17      	ldr	r2, [pc, #92]	; (800290c <TIM_OC4_SetConfig+0x118>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d113      	bne.n	80028dc <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028ba:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80028c2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	695b      	ldr	r3, [r3, #20]
 80028c8:	019b      	lsls	r3, r3, #6
 80028ca:	693a      	ldr	r2, [r7, #16]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	019b      	lsls	r3, r3, #6
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	4313      	orrs	r3, r2
 80028da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	693a      	ldr	r2, [r7, #16]
 80028e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	68fa      	ldr	r2, [r7, #12]
 80028e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685a      	ldr	r2, [r3, #4]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	697a      	ldr	r2, [r7, #20]
 80028f4:	621a      	str	r2, [r3, #32]
}
 80028f6:	bf00      	nop
 80028f8:	371c      	adds	r7, #28
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	40012c00 	.word	0x40012c00
 8002908:	40013400 	.word	0x40013400
 800290c:	40015000 	.word	0x40015000
 8002910:	40014000 	.word	0x40014000
 8002914:	40014400 	.word	0x40014400
 8002918:	40014800 	.word	0x40014800

0800291c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800291c:	b480      	push	{r7}
 800291e:	b087      	sub	sp, #28
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a1b      	ldr	r3, [r3, #32]
 800292a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a1b      	ldr	r3, [r3, #32]
 8002936:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800294a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800294e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68fa      	ldr	r2, [r7, #12]
 8002956:	4313      	orrs	r3, r2
 8002958:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002960:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	041b      	lsls	r3, r3, #16
 8002968:	693a      	ldr	r2, [r7, #16]
 800296a:	4313      	orrs	r3, r2
 800296c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a19      	ldr	r2, [pc, #100]	; (80029d8 <TIM_OC5_SetConfig+0xbc>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d013      	beq.n	800299e <TIM_OC5_SetConfig+0x82>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a18      	ldr	r2, [pc, #96]	; (80029dc <TIM_OC5_SetConfig+0xc0>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d00f      	beq.n	800299e <TIM_OC5_SetConfig+0x82>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a17      	ldr	r2, [pc, #92]	; (80029e0 <TIM_OC5_SetConfig+0xc4>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d00b      	beq.n	800299e <TIM_OC5_SetConfig+0x82>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a16      	ldr	r2, [pc, #88]	; (80029e4 <TIM_OC5_SetConfig+0xc8>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d007      	beq.n	800299e <TIM_OC5_SetConfig+0x82>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a15      	ldr	r2, [pc, #84]	; (80029e8 <TIM_OC5_SetConfig+0xcc>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d003      	beq.n	800299e <TIM_OC5_SetConfig+0x82>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a14      	ldr	r2, [pc, #80]	; (80029ec <TIM_OC5_SetConfig+0xd0>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d109      	bne.n	80029b2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029a4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	695b      	ldr	r3, [r3, #20]
 80029aa:	021b      	lsls	r3, r3, #8
 80029ac:	697a      	ldr	r2, [r7, #20]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	697a      	ldr	r2, [r7, #20]
 80029b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	68fa      	ldr	r2, [r7, #12]
 80029bc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	685a      	ldr	r2, [r3, #4]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	693a      	ldr	r2, [r7, #16]
 80029ca:	621a      	str	r2, [r3, #32]
}
 80029cc:	bf00      	nop
 80029ce:	371c      	adds	r7, #28
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr
 80029d8:	40012c00 	.word	0x40012c00
 80029dc:	40013400 	.word	0x40013400
 80029e0:	40014000 	.word	0x40014000
 80029e4:	40014400 	.word	0x40014400
 80029e8:	40014800 	.word	0x40014800
 80029ec:	40015000 	.word	0x40015000

080029f0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b087      	sub	sp, #28
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a1b      	ldr	r3, [r3, #32]
 80029fe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a1b      	ldr	r3, [r3, #32]
 8002a0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	021b      	lsls	r3, r3, #8
 8002a2a:	68fa      	ldr	r2, [r7, #12]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	051b      	lsls	r3, r3, #20
 8002a3e:	693a      	ldr	r2, [r7, #16]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4a1a      	ldr	r2, [pc, #104]	; (8002ab0 <TIM_OC6_SetConfig+0xc0>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d013      	beq.n	8002a74 <TIM_OC6_SetConfig+0x84>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	4a19      	ldr	r2, [pc, #100]	; (8002ab4 <TIM_OC6_SetConfig+0xc4>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d00f      	beq.n	8002a74 <TIM_OC6_SetConfig+0x84>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	4a18      	ldr	r2, [pc, #96]	; (8002ab8 <TIM_OC6_SetConfig+0xc8>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d00b      	beq.n	8002a74 <TIM_OC6_SetConfig+0x84>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	4a17      	ldr	r2, [pc, #92]	; (8002abc <TIM_OC6_SetConfig+0xcc>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d007      	beq.n	8002a74 <TIM_OC6_SetConfig+0x84>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	4a16      	ldr	r2, [pc, #88]	; (8002ac0 <TIM_OC6_SetConfig+0xd0>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d003      	beq.n	8002a74 <TIM_OC6_SetConfig+0x84>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	4a15      	ldr	r2, [pc, #84]	; (8002ac4 <TIM_OC6_SetConfig+0xd4>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d109      	bne.n	8002a88 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a7a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	695b      	ldr	r3, [r3, #20]
 8002a80:	029b      	lsls	r3, r3, #10
 8002a82:	697a      	ldr	r2, [r7, #20]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	697a      	ldr	r2, [r7, #20]
 8002a8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	68fa      	ldr	r2, [r7, #12]
 8002a92:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685a      	ldr	r2, [r3, #4]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	693a      	ldr	r2, [r7, #16]
 8002aa0:	621a      	str	r2, [r3, #32]
}
 8002aa2:	bf00      	nop
 8002aa4:	371c      	adds	r7, #28
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	40012c00 	.word	0x40012c00
 8002ab4:	40013400 	.word	0x40013400
 8002ab8:	40014000 	.word	0x40014000
 8002abc:	40014400 	.word	0x40014400
 8002ac0:	40014800 	.word	0x40014800
 8002ac4:	40015000 	.word	0x40015000

08002ac8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b087      	sub	sp, #28
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	60f8      	str	r0, [r7, #12]
 8002ad0:	60b9      	str	r1, [r7, #8]
 8002ad2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6a1b      	ldr	r3, [r3, #32]
 8002ad8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6a1b      	ldr	r3, [r3, #32]
 8002ade:	f023 0201 	bic.w	r2, r3, #1
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	699b      	ldr	r3, [r3, #24]
 8002aea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002af2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	011b      	lsls	r3, r3, #4
 8002af8:	693a      	ldr	r2, [r7, #16]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	f023 030a 	bic.w	r3, r3, #10
 8002b04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b06:	697a      	ldr	r2, [r7, #20]
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	693a      	ldr	r2, [r7, #16]
 8002b12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	697a      	ldr	r2, [r7, #20]
 8002b18:	621a      	str	r2, [r3, #32]
}
 8002b1a:	bf00      	nop
 8002b1c:	371c      	adds	r7, #28
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr

08002b26 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b26:	b480      	push	{r7}
 8002b28:	b087      	sub	sp, #28
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	60f8      	str	r0, [r7, #12]
 8002b2e:	60b9      	str	r1, [r7, #8]
 8002b30:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6a1b      	ldr	r3, [r3, #32]
 8002b36:	f023 0210 	bic.w	r2, r3, #16
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	699b      	ldr	r3, [r3, #24]
 8002b42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6a1b      	ldr	r3, [r3, #32]
 8002b48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	031b      	lsls	r3, r3, #12
 8002b56:	697a      	ldr	r2, [r7, #20]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b62:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	011b      	lsls	r3, r3, #4
 8002b68:	693a      	ldr	r2, [r7, #16]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	697a      	ldr	r2, [r7, #20]
 8002b72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	693a      	ldr	r2, [r7, #16]
 8002b78:	621a      	str	r2, [r3, #32]
}
 8002b7a:	bf00      	nop
 8002b7c:	371c      	adds	r7, #28
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr

08002b86 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b86:	b480      	push	{r7}
 8002b88:	b085      	sub	sp, #20
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
 8002b8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002b9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ba0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ba2:	683a      	ldr	r2, [r7, #0]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	f043 0307 	orr.w	r3, r3, #7
 8002bac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	68fa      	ldr	r2, [r7, #12]
 8002bb2:	609a      	str	r2, [r3, #8]
}
 8002bb4:	bf00      	nop
 8002bb6:	3714      	adds	r7, #20
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr

08002bc0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b087      	sub	sp, #28
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	60b9      	str	r1, [r7, #8]
 8002bca:	607a      	str	r2, [r7, #4]
 8002bcc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	021a      	lsls	r2, r3, #8
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	431a      	orrs	r2, r3
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	697a      	ldr	r2, [r7, #20]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	697a      	ldr	r2, [r7, #20]
 8002bf2:	609a      	str	r2, [r3, #8]
}
 8002bf4:	bf00      	nop
 8002bf6:	371c      	adds	r7, #28
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b087      	sub	sp, #28
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	f003 031f 	and.w	r3, r3, #31
 8002c12:	2201      	movs	r2, #1
 8002c14:	fa02 f303 	lsl.w	r3, r2, r3
 8002c18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6a1a      	ldr	r2, [r3, #32]
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	43db      	mvns	r3, r3
 8002c22:	401a      	ands	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6a1a      	ldr	r2, [r3, #32]
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	f003 031f 	and.w	r3, r3, #31
 8002c32:	6879      	ldr	r1, [r7, #4]
 8002c34:	fa01 f303 	lsl.w	r3, r1, r3
 8002c38:	431a      	orrs	r2, r3
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	621a      	str	r2, [r3, #32]
}
 8002c3e:	bf00      	nop
 8002c40:	371c      	adds	r7, #28
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
	...

08002c4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b085      	sub	sp, #20
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d101      	bne.n	8002c64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c60:	2302      	movs	r3, #2
 8002c62:	e074      	b.n	8002d4e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2202      	movs	r2, #2
 8002c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a34      	ldr	r2, [pc, #208]	; (8002d5c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d009      	beq.n	8002ca2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a33      	ldr	r2, [pc, #204]	; (8002d60 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d004      	beq.n	8002ca2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a31      	ldr	r2, [pc, #196]	; (8002d64 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d108      	bne.n	8002cb4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002ca8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	68fa      	ldr	r2, [r7, #12]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8002cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cbe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	68fa      	ldr	r2, [r7, #12]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	68fa      	ldr	r2, [r7, #12]
 8002cd0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a21      	ldr	r2, [pc, #132]	; (8002d5c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d022      	beq.n	8002d22 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ce4:	d01d      	beq.n	8002d22 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a1f      	ldr	r2, [pc, #124]	; (8002d68 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d018      	beq.n	8002d22 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a1d      	ldr	r2, [pc, #116]	; (8002d6c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d013      	beq.n	8002d22 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a1c      	ldr	r2, [pc, #112]	; (8002d70 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d00e      	beq.n	8002d22 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a15      	ldr	r2, [pc, #84]	; (8002d60 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d009      	beq.n	8002d22 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a18      	ldr	r2, [pc, #96]	; (8002d74 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d004      	beq.n	8002d22 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a11      	ldr	r2, [pc, #68]	; (8002d64 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d10c      	bne.n	8002d3c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	68ba      	ldr	r2, [r7, #8]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	68ba      	ldr	r2, [r7, #8]
 8002d3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3714      	adds	r7, #20
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	40012c00 	.word	0x40012c00
 8002d60:	40013400 	.word	0x40013400
 8002d64:	40015000 	.word	0x40015000
 8002d68:	40000400 	.word	0x40000400
 8002d6c:	40000800 	.word	0x40000800
 8002d70:	40000c00 	.word	0x40000c00
 8002d74:	40014000 	.word	0x40014000

08002d78 <std>:
 8002d78:	2300      	movs	r3, #0
 8002d7a:	b510      	push	{r4, lr}
 8002d7c:	4604      	mov	r4, r0
 8002d7e:	e9c0 3300 	strd	r3, r3, [r0]
 8002d82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002d86:	6083      	str	r3, [r0, #8]
 8002d88:	8181      	strh	r1, [r0, #12]
 8002d8a:	6643      	str	r3, [r0, #100]	; 0x64
 8002d8c:	81c2      	strh	r2, [r0, #14]
 8002d8e:	6183      	str	r3, [r0, #24]
 8002d90:	4619      	mov	r1, r3
 8002d92:	2208      	movs	r2, #8
 8002d94:	305c      	adds	r0, #92	; 0x5c
 8002d96:	f000 f906 	bl	8002fa6 <memset>
 8002d9a:	4b0d      	ldr	r3, [pc, #52]	; (8002dd0 <std+0x58>)
 8002d9c:	6263      	str	r3, [r4, #36]	; 0x24
 8002d9e:	4b0d      	ldr	r3, [pc, #52]	; (8002dd4 <std+0x5c>)
 8002da0:	62a3      	str	r3, [r4, #40]	; 0x28
 8002da2:	4b0d      	ldr	r3, [pc, #52]	; (8002dd8 <std+0x60>)
 8002da4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002da6:	4b0d      	ldr	r3, [pc, #52]	; (8002ddc <std+0x64>)
 8002da8:	6323      	str	r3, [r4, #48]	; 0x30
 8002daa:	4b0d      	ldr	r3, [pc, #52]	; (8002de0 <std+0x68>)
 8002dac:	6224      	str	r4, [r4, #32]
 8002dae:	429c      	cmp	r4, r3
 8002db0:	d006      	beq.n	8002dc0 <std+0x48>
 8002db2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8002db6:	4294      	cmp	r4, r2
 8002db8:	d002      	beq.n	8002dc0 <std+0x48>
 8002dba:	33d0      	adds	r3, #208	; 0xd0
 8002dbc:	429c      	cmp	r4, r3
 8002dbe:	d105      	bne.n	8002dcc <std+0x54>
 8002dc0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002dc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002dc8:	f000 b966 	b.w	8003098 <__retarget_lock_init_recursive>
 8002dcc:	bd10      	pop	{r4, pc}
 8002dce:	bf00      	nop
 8002dd0:	08002f21 	.word	0x08002f21
 8002dd4:	08002f43 	.word	0x08002f43
 8002dd8:	08002f7b 	.word	0x08002f7b
 8002ddc:	08002f9f 	.word	0x08002f9f
 8002de0:	20000124 	.word	0x20000124

08002de4 <stdio_exit_handler>:
 8002de4:	4a02      	ldr	r2, [pc, #8]	; (8002df0 <stdio_exit_handler+0xc>)
 8002de6:	4903      	ldr	r1, [pc, #12]	; (8002df4 <stdio_exit_handler+0x10>)
 8002de8:	4803      	ldr	r0, [pc, #12]	; (8002df8 <stdio_exit_handler+0x14>)
 8002dea:	f000 b869 	b.w	8002ec0 <_fwalk_sglue>
 8002dee:	bf00      	nop
 8002df0:	2000000c 	.word	0x2000000c
 8002df4:	08003945 	.word	0x08003945
 8002df8:	20000018 	.word	0x20000018

08002dfc <cleanup_stdio>:
 8002dfc:	6841      	ldr	r1, [r0, #4]
 8002dfe:	4b0c      	ldr	r3, [pc, #48]	; (8002e30 <cleanup_stdio+0x34>)
 8002e00:	4299      	cmp	r1, r3
 8002e02:	b510      	push	{r4, lr}
 8002e04:	4604      	mov	r4, r0
 8002e06:	d001      	beq.n	8002e0c <cleanup_stdio+0x10>
 8002e08:	f000 fd9c 	bl	8003944 <_fflush_r>
 8002e0c:	68a1      	ldr	r1, [r4, #8]
 8002e0e:	4b09      	ldr	r3, [pc, #36]	; (8002e34 <cleanup_stdio+0x38>)
 8002e10:	4299      	cmp	r1, r3
 8002e12:	d002      	beq.n	8002e1a <cleanup_stdio+0x1e>
 8002e14:	4620      	mov	r0, r4
 8002e16:	f000 fd95 	bl	8003944 <_fflush_r>
 8002e1a:	68e1      	ldr	r1, [r4, #12]
 8002e1c:	4b06      	ldr	r3, [pc, #24]	; (8002e38 <cleanup_stdio+0x3c>)
 8002e1e:	4299      	cmp	r1, r3
 8002e20:	d004      	beq.n	8002e2c <cleanup_stdio+0x30>
 8002e22:	4620      	mov	r0, r4
 8002e24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e28:	f000 bd8c 	b.w	8003944 <_fflush_r>
 8002e2c:	bd10      	pop	{r4, pc}
 8002e2e:	bf00      	nop
 8002e30:	20000124 	.word	0x20000124
 8002e34:	2000018c 	.word	0x2000018c
 8002e38:	200001f4 	.word	0x200001f4

08002e3c <global_stdio_init.part.0>:
 8002e3c:	b510      	push	{r4, lr}
 8002e3e:	4b0b      	ldr	r3, [pc, #44]	; (8002e6c <global_stdio_init.part.0+0x30>)
 8002e40:	4c0b      	ldr	r4, [pc, #44]	; (8002e70 <global_stdio_init.part.0+0x34>)
 8002e42:	4a0c      	ldr	r2, [pc, #48]	; (8002e74 <global_stdio_init.part.0+0x38>)
 8002e44:	601a      	str	r2, [r3, #0]
 8002e46:	4620      	mov	r0, r4
 8002e48:	2200      	movs	r2, #0
 8002e4a:	2104      	movs	r1, #4
 8002e4c:	f7ff ff94 	bl	8002d78 <std>
 8002e50:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002e54:	2201      	movs	r2, #1
 8002e56:	2109      	movs	r1, #9
 8002e58:	f7ff ff8e 	bl	8002d78 <std>
 8002e5c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002e60:	2202      	movs	r2, #2
 8002e62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e66:	2112      	movs	r1, #18
 8002e68:	f7ff bf86 	b.w	8002d78 <std>
 8002e6c:	2000025c 	.word	0x2000025c
 8002e70:	20000124 	.word	0x20000124
 8002e74:	08002de5 	.word	0x08002de5

08002e78 <__sfp_lock_acquire>:
 8002e78:	4801      	ldr	r0, [pc, #4]	; (8002e80 <__sfp_lock_acquire+0x8>)
 8002e7a:	f000 b90e 	b.w	800309a <__retarget_lock_acquire_recursive>
 8002e7e:	bf00      	nop
 8002e80:	20000265 	.word	0x20000265

08002e84 <__sfp_lock_release>:
 8002e84:	4801      	ldr	r0, [pc, #4]	; (8002e8c <__sfp_lock_release+0x8>)
 8002e86:	f000 b909 	b.w	800309c <__retarget_lock_release_recursive>
 8002e8a:	bf00      	nop
 8002e8c:	20000265 	.word	0x20000265

08002e90 <__sinit>:
 8002e90:	b510      	push	{r4, lr}
 8002e92:	4604      	mov	r4, r0
 8002e94:	f7ff fff0 	bl	8002e78 <__sfp_lock_acquire>
 8002e98:	6a23      	ldr	r3, [r4, #32]
 8002e9a:	b11b      	cbz	r3, 8002ea4 <__sinit+0x14>
 8002e9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ea0:	f7ff bff0 	b.w	8002e84 <__sfp_lock_release>
 8002ea4:	4b04      	ldr	r3, [pc, #16]	; (8002eb8 <__sinit+0x28>)
 8002ea6:	6223      	str	r3, [r4, #32]
 8002ea8:	4b04      	ldr	r3, [pc, #16]	; (8002ebc <__sinit+0x2c>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d1f5      	bne.n	8002e9c <__sinit+0xc>
 8002eb0:	f7ff ffc4 	bl	8002e3c <global_stdio_init.part.0>
 8002eb4:	e7f2      	b.n	8002e9c <__sinit+0xc>
 8002eb6:	bf00      	nop
 8002eb8:	08002dfd 	.word	0x08002dfd
 8002ebc:	2000025c 	.word	0x2000025c

08002ec0 <_fwalk_sglue>:
 8002ec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ec4:	4607      	mov	r7, r0
 8002ec6:	4688      	mov	r8, r1
 8002ec8:	4614      	mov	r4, r2
 8002eca:	2600      	movs	r6, #0
 8002ecc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002ed0:	f1b9 0901 	subs.w	r9, r9, #1
 8002ed4:	d505      	bpl.n	8002ee2 <_fwalk_sglue+0x22>
 8002ed6:	6824      	ldr	r4, [r4, #0]
 8002ed8:	2c00      	cmp	r4, #0
 8002eda:	d1f7      	bne.n	8002ecc <_fwalk_sglue+0xc>
 8002edc:	4630      	mov	r0, r6
 8002ede:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002ee2:	89ab      	ldrh	r3, [r5, #12]
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d907      	bls.n	8002ef8 <_fwalk_sglue+0x38>
 8002ee8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002eec:	3301      	adds	r3, #1
 8002eee:	d003      	beq.n	8002ef8 <_fwalk_sglue+0x38>
 8002ef0:	4629      	mov	r1, r5
 8002ef2:	4638      	mov	r0, r7
 8002ef4:	47c0      	blx	r8
 8002ef6:	4306      	orrs	r6, r0
 8002ef8:	3568      	adds	r5, #104	; 0x68
 8002efa:	e7e9      	b.n	8002ed0 <_fwalk_sglue+0x10>

08002efc <iprintf>:
 8002efc:	b40f      	push	{r0, r1, r2, r3}
 8002efe:	b507      	push	{r0, r1, r2, lr}
 8002f00:	4906      	ldr	r1, [pc, #24]	; (8002f1c <iprintf+0x20>)
 8002f02:	ab04      	add	r3, sp, #16
 8002f04:	6808      	ldr	r0, [r1, #0]
 8002f06:	f853 2b04 	ldr.w	r2, [r3], #4
 8002f0a:	6881      	ldr	r1, [r0, #8]
 8002f0c:	9301      	str	r3, [sp, #4]
 8002f0e:	f000 f9e9 	bl	80032e4 <_vfiprintf_r>
 8002f12:	b003      	add	sp, #12
 8002f14:	f85d eb04 	ldr.w	lr, [sp], #4
 8002f18:	b004      	add	sp, #16
 8002f1a:	4770      	bx	lr
 8002f1c:	20000064 	.word	0x20000064

08002f20 <__sread>:
 8002f20:	b510      	push	{r4, lr}
 8002f22:	460c      	mov	r4, r1
 8002f24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f28:	f000 f868 	bl	8002ffc <_read_r>
 8002f2c:	2800      	cmp	r0, #0
 8002f2e:	bfab      	itete	ge
 8002f30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002f32:	89a3      	ldrhlt	r3, [r4, #12]
 8002f34:	181b      	addge	r3, r3, r0
 8002f36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002f3a:	bfac      	ite	ge
 8002f3c:	6563      	strge	r3, [r4, #84]	; 0x54
 8002f3e:	81a3      	strhlt	r3, [r4, #12]
 8002f40:	bd10      	pop	{r4, pc}

08002f42 <__swrite>:
 8002f42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f46:	461f      	mov	r7, r3
 8002f48:	898b      	ldrh	r3, [r1, #12]
 8002f4a:	05db      	lsls	r3, r3, #23
 8002f4c:	4605      	mov	r5, r0
 8002f4e:	460c      	mov	r4, r1
 8002f50:	4616      	mov	r6, r2
 8002f52:	d505      	bpl.n	8002f60 <__swrite+0x1e>
 8002f54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f58:	2302      	movs	r3, #2
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f000 f83c 	bl	8002fd8 <_lseek_r>
 8002f60:	89a3      	ldrh	r3, [r4, #12]
 8002f62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002f66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f6a:	81a3      	strh	r3, [r4, #12]
 8002f6c:	4632      	mov	r2, r6
 8002f6e:	463b      	mov	r3, r7
 8002f70:	4628      	mov	r0, r5
 8002f72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002f76:	f000 b853 	b.w	8003020 <_write_r>

08002f7a <__sseek>:
 8002f7a:	b510      	push	{r4, lr}
 8002f7c:	460c      	mov	r4, r1
 8002f7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f82:	f000 f829 	bl	8002fd8 <_lseek_r>
 8002f86:	1c43      	adds	r3, r0, #1
 8002f88:	89a3      	ldrh	r3, [r4, #12]
 8002f8a:	bf15      	itete	ne
 8002f8c:	6560      	strne	r0, [r4, #84]	; 0x54
 8002f8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002f92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002f96:	81a3      	strheq	r3, [r4, #12]
 8002f98:	bf18      	it	ne
 8002f9a:	81a3      	strhne	r3, [r4, #12]
 8002f9c:	bd10      	pop	{r4, pc}

08002f9e <__sclose>:
 8002f9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002fa2:	f000 b809 	b.w	8002fb8 <_close_r>

08002fa6 <memset>:
 8002fa6:	4402      	add	r2, r0
 8002fa8:	4603      	mov	r3, r0
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d100      	bne.n	8002fb0 <memset+0xa>
 8002fae:	4770      	bx	lr
 8002fb0:	f803 1b01 	strb.w	r1, [r3], #1
 8002fb4:	e7f9      	b.n	8002faa <memset+0x4>
	...

08002fb8 <_close_r>:
 8002fb8:	b538      	push	{r3, r4, r5, lr}
 8002fba:	4d06      	ldr	r5, [pc, #24]	; (8002fd4 <_close_r+0x1c>)
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	4604      	mov	r4, r0
 8002fc0:	4608      	mov	r0, r1
 8002fc2:	602b      	str	r3, [r5, #0]
 8002fc4:	f7fd fc7b 	bl	80008be <_close>
 8002fc8:	1c43      	adds	r3, r0, #1
 8002fca:	d102      	bne.n	8002fd2 <_close_r+0x1a>
 8002fcc:	682b      	ldr	r3, [r5, #0]
 8002fce:	b103      	cbz	r3, 8002fd2 <_close_r+0x1a>
 8002fd0:	6023      	str	r3, [r4, #0]
 8002fd2:	bd38      	pop	{r3, r4, r5, pc}
 8002fd4:	20000260 	.word	0x20000260

08002fd8 <_lseek_r>:
 8002fd8:	b538      	push	{r3, r4, r5, lr}
 8002fda:	4d07      	ldr	r5, [pc, #28]	; (8002ff8 <_lseek_r+0x20>)
 8002fdc:	4604      	mov	r4, r0
 8002fde:	4608      	mov	r0, r1
 8002fe0:	4611      	mov	r1, r2
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	602a      	str	r2, [r5, #0]
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	f7fd fc90 	bl	800090c <_lseek>
 8002fec:	1c43      	adds	r3, r0, #1
 8002fee:	d102      	bne.n	8002ff6 <_lseek_r+0x1e>
 8002ff0:	682b      	ldr	r3, [r5, #0]
 8002ff2:	b103      	cbz	r3, 8002ff6 <_lseek_r+0x1e>
 8002ff4:	6023      	str	r3, [r4, #0]
 8002ff6:	bd38      	pop	{r3, r4, r5, pc}
 8002ff8:	20000260 	.word	0x20000260

08002ffc <_read_r>:
 8002ffc:	b538      	push	{r3, r4, r5, lr}
 8002ffe:	4d07      	ldr	r5, [pc, #28]	; (800301c <_read_r+0x20>)
 8003000:	4604      	mov	r4, r0
 8003002:	4608      	mov	r0, r1
 8003004:	4611      	mov	r1, r2
 8003006:	2200      	movs	r2, #0
 8003008:	602a      	str	r2, [r5, #0]
 800300a:	461a      	mov	r2, r3
 800300c:	f7fd fc3a 	bl	8000884 <_read>
 8003010:	1c43      	adds	r3, r0, #1
 8003012:	d102      	bne.n	800301a <_read_r+0x1e>
 8003014:	682b      	ldr	r3, [r5, #0]
 8003016:	b103      	cbz	r3, 800301a <_read_r+0x1e>
 8003018:	6023      	str	r3, [r4, #0]
 800301a:	bd38      	pop	{r3, r4, r5, pc}
 800301c:	20000260 	.word	0x20000260

08003020 <_write_r>:
 8003020:	b538      	push	{r3, r4, r5, lr}
 8003022:	4d07      	ldr	r5, [pc, #28]	; (8003040 <_write_r+0x20>)
 8003024:	4604      	mov	r4, r0
 8003026:	4608      	mov	r0, r1
 8003028:	4611      	mov	r1, r2
 800302a:	2200      	movs	r2, #0
 800302c:	602a      	str	r2, [r5, #0]
 800302e:	461a      	mov	r2, r3
 8003030:	f7fd f96d 	bl	800030e <_write>
 8003034:	1c43      	adds	r3, r0, #1
 8003036:	d102      	bne.n	800303e <_write_r+0x1e>
 8003038:	682b      	ldr	r3, [r5, #0]
 800303a:	b103      	cbz	r3, 800303e <_write_r+0x1e>
 800303c:	6023      	str	r3, [r4, #0]
 800303e:	bd38      	pop	{r3, r4, r5, pc}
 8003040:	20000260 	.word	0x20000260

08003044 <__errno>:
 8003044:	4b01      	ldr	r3, [pc, #4]	; (800304c <__errno+0x8>)
 8003046:	6818      	ldr	r0, [r3, #0]
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop
 800304c:	20000064 	.word	0x20000064

08003050 <__libc_init_array>:
 8003050:	b570      	push	{r4, r5, r6, lr}
 8003052:	4d0d      	ldr	r5, [pc, #52]	; (8003088 <__libc_init_array+0x38>)
 8003054:	4c0d      	ldr	r4, [pc, #52]	; (800308c <__libc_init_array+0x3c>)
 8003056:	1b64      	subs	r4, r4, r5
 8003058:	10a4      	asrs	r4, r4, #2
 800305a:	2600      	movs	r6, #0
 800305c:	42a6      	cmp	r6, r4
 800305e:	d109      	bne.n	8003074 <__libc_init_array+0x24>
 8003060:	4d0b      	ldr	r5, [pc, #44]	; (8003090 <__libc_init_array+0x40>)
 8003062:	4c0c      	ldr	r4, [pc, #48]	; (8003094 <__libc_init_array+0x44>)
 8003064:	f000 fdc0 	bl	8003be8 <_init>
 8003068:	1b64      	subs	r4, r4, r5
 800306a:	10a4      	asrs	r4, r4, #2
 800306c:	2600      	movs	r6, #0
 800306e:	42a6      	cmp	r6, r4
 8003070:	d105      	bne.n	800307e <__libc_init_array+0x2e>
 8003072:	bd70      	pop	{r4, r5, r6, pc}
 8003074:	f855 3b04 	ldr.w	r3, [r5], #4
 8003078:	4798      	blx	r3
 800307a:	3601      	adds	r6, #1
 800307c:	e7ee      	b.n	800305c <__libc_init_array+0xc>
 800307e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003082:	4798      	blx	r3
 8003084:	3601      	adds	r6, #1
 8003086:	e7f2      	b.n	800306e <__libc_init_array+0x1e>
 8003088:	08003c5c 	.word	0x08003c5c
 800308c:	08003c5c 	.word	0x08003c5c
 8003090:	08003c5c 	.word	0x08003c5c
 8003094:	08003c60 	.word	0x08003c60

08003098 <__retarget_lock_init_recursive>:
 8003098:	4770      	bx	lr

0800309a <__retarget_lock_acquire_recursive>:
 800309a:	4770      	bx	lr

0800309c <__retarget_lock_release_recursive>:
 800309c:	4770      	bx	lr
	...

080030a0 <_free_r>:
 80030a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80030a2:	2900      	cmp	r1, #0
 80030a4:	d044      	beq.n	8003130 <_free_r+0x90>
 80030a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80030aa:	9001      	str	r0, [sp, #4]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	f1a1 0404 	sub.w	r4, r1, #4
 80030b2:	bfb8      	it	lt
 80030b4:	18e4      	addlt	r4, r4, r3
 80030b6:	f000 f8df 	bl	8003278 <__malloc_lock>
 80030ba:	4a1e      	ldr	r2, [pc, #120]	; (8003134 <_free_r+0x94>)
 80030bc:	9801      	ldr	r0, [sp, #4]
 80030be:	6813      	ldr	r3, [r2, #0]
 80030c0:	b933      	cbnz	r3, 80030d0 <_free_r+0x30>
 80030c2:	6063      	str	r3, [r4, #4]
 80030c4:	6014      	str	r4, [r2, #0]
 80030c6:	b003      	add	sp, #12
 80030c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80030cc:	f000 b8da 	b.w	8003284 <__malloc_unlock>
 80030d0:	42a3      	cmp	r3, r4
 80030d2:	d908      	bls.n	80030e6 <_free_r+0x46>
 80030d4:	6825      	ldr	r5, [r4, #0]
 80030d6:	1961      	adds	r1, r4, r5
 80030d8:	428b      	cmp	r3, r1
 80030da:	bf01      	itttt	eq
 80030dc:	6819      	ldreq	r1, [r3, #0]
 80030de:	685b      	ldreq	r3, [r3, #4]
 80030e0:	1949      	addeq	r1, r1, r5
 80030e2:	6021      	streq	r1, [r4, #0]
 80030e4:	e7ed      	b.n	80030c2 <_free_r+0x22>
 80030e6:	461a      	mov	r2, r3
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	b10b      	cbz	r3, 80030f0 <_free_r+0x50>
 80030ec:	42a3      	cmp	r3, r4
 80030ee:	d9fa      	bls.n	80030e6 <_free_r+0x46>
 80030f0:	6811      	ldr	r1, [r2, #0]
 80030f2:	1855      	adds	r5, r2, r1
 80030f4:	42a5      	cmp	r5, r4
 80030f6:	d10b      	bne.n	8003110 <_free_r+0x70>
 80030f8:	6824      	ldr	r4, [r4, #0]
 80030fa:	4421      	add	r1, r4
 80030fc:	1854      	adds	r4, r2, r1
 80030fe:	42a3      	cmp	r3, r4
 8003100:	6011      	str	r1, [r2, #0]
 8003102:	d1e0      	bne.n	80030c6 <_free_r+0x26>
 8003104:	681c      	ldr	r4, [r3, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	6053      	str	r3, [r2, #4]
 800310a:	440c      	add	r4, r1
 800310c:	6014      	str	r4, [r2, #0]
 800310e:	e7da      	b.n	80030c6 <_free_r+0x26>
 8003110:	d902      	bls.n	8003118 <_free_r+0x78>
 8003112:	230c      	movs	r3, #12
 8003114:	6003      	str	r3, [r0, #0]
 8003116:	e7d6      	b.n	80030c6 <_free_r+0x26>
 8003118:	6825      	ldr	r5, [r4, #0]
 800311a:	1961      	adds	r1, r4, r5
 800311c:	428b      	cmp	r3, r1
 800311e:	bf04      	itt	eq
 8003120:	6819      	ldreq	r1, [r3, #0]
 8003122:	685b      	ldreq	r3, [r3, #4]
 8003124:	6063      	str	r3, [r4, #4]
 8003126:	bf04      	itt	eq
 8003128:	1949      	addeq	r1, r1, r5
 800312a:	6021      	streq	r1, [r4, #0]
 800312c:	6054      	str	r4, [r2, #4]
 800312e:	e7ca      	b.n	80030c6 <_free_r+0x26>
 8003130:	b003      	add	sp, #12
 8003132:	bd30      	pop	{r4, r5, pc}
 8003134:	20000268 	.word	0x20000268

08003138 <sbrk_aligned>:
 8003138:	b570      	push	{r4, r5, r6, lr}
 800313a:	4e0e      	ldr	r6, [pc, #56]	; (8003174 <sbrk_aligned+0x3c>)
 800313c:	460c      	mov	r4, r1
 800313e:	6831      	ldr	r1, [r6, #0]
 8003140:	4605      	mov	r5, r0
 8003142:	b911      	cbnz	r1, 800314a <sbrk_aligned+0x12>
 8003144:	f000 fcbc 	bl	8003ac0 <_sbrk_r>
 8003148:	6030      	str	r0, [r6, #0]
 800314a:	4621      	mov	r1, r4
 800314c:	4628      	mov	r0, r5
 800314e:	f000 fcb7 	bl	8003ac0 <_sbrk_r>
 8003152:	1c43      	adds	r3, r0, #1
 8003154:	d00a      	beq.n	800316c <sbrk_aligned+0x34>
 8003156:	1cc4      	adds	r4, r0, #3
 8003158:	f024 0403 	bic.w	r4, r4, #3
 800315c:	42a0      	cmp	r0, r4
 800315e:	d007      	beq.n	8003170 <sbrk_aligned+0x38>
 8003160:	1a21      	subs	r1, r4, r0
 8003162:	4628      	mov	r0, r5
 8003164:	f000 fcac 	bl	8003ac0 <_sbrk_r>
 8003168:	3001      	adds	r0, #1
 800316a:	d101      	bne.n	8003170 <sbrk_aligned+0x38>
 800316c:	f04f 34ff 	mov.w	r4, #4294967295
 8003170:	4620      	mov	r0, r4
 8003172:	bd70      	pop	{r4, r5, r6, pc}
 8003174:	2000026c 	.word	0x2000026c

08003178 <_malloc_r>:
 8003178:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800317c:	1ccd      	adds	r5, r1, #3
 800317e:	f025 0503 	bic.w	r5, r5, #3
 8003182:	3508      	adds	r5, #8
 8003184:	2d0c      	cmp	r5, #12
 8003186:	bf38      	it	cc
 8003188:	250c      	movcc	r5, #12
 800318a:	2d00      	cmp	r5, #0
 800318c:	4607      	mov	r7, r0
 800318e:	db01      	blt.n	8003194 <_malloc_r+0x1c>
 8003190:	42a9      	cmp	r1, r5
 8003192:	d905      	bls.n	80031a0 <_malloc_r+0x28>
 8003194:	230c      	movs	r3, #12
 8003196:	603b      	str	r3, [r7, #0]
 8003198:	2600      	movs	r6, #0
 800319a:	4630      	mov	r0, r6
 800319c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80031a0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003274 <_malloc_r+0xfc>
 80031a4:	f000 f868 	bl	8003278 <__malloc_lock>
 80031a8:	f8d8 3000 	ldr.w	r3, [r8]
 80031ac:	461c      	mov	r4, r3
 80031ae:	bb5c      	cbnz	r4, 8003208 <_malloc_r+0x90>
 80031b0:	4629      	mov	r1, r5
 80031b2:	4638      	mov	r0, r7
 80031b4:	f7ff ffc0 	bl	8003138 <sbrk_aligned>
 80031b8:	1c43      	adds	r3, r0, #1
 80031ba:	4604      	mov	r4, r0
 80031bc:	d155      	bne.n	800326a <_malloc_r+0xf2>
 80031be:	f8d8 4000 	ldr.w	r4, [r8]
 80031c2:	4626      	mov	r6, r4
 80031c4:	2e00      	cmp	r6, #0
 80031c6:	d145      	bne.n	8003254 <_malloc_r+0xdc>
 80031c8:	2c00      	cmp	r4, #0
 80031ca:	d048      	beq.n	800325e <_malloc_r+0xe6>
 80031cc:	6823      	ldr	r3, [r4, #0]
 80031ce:	4631      	mov	r1, r6
 80031d0:	4638      	mov	r0, r7
 80031d2:	eb04 0903 	add.w	r9, r4, r3
 80031d6:	f000 fc73 	bl	8003ac0 <_sbrk_r>
 80031da:	4581      	cmp	r9, r0
 80031dc:	d13f      	bne.n	800325e <_malloc_r+0xe6>
 80031de:	6821      	ldr	r1, [r4, #0]
 80031e0:	1a6d      	subs	r5, r5, r1
 80031e2:	4629      	mov	r1, r5
 80031e4:	4638      	mov	r0, r7
 80031e6:	f7ff ffa7 	bl	8003138 <sbrk_aligned>
 80031ea:	3001      	adds	r0, #1
 80031ec:	d037      	beq.n	800325e <_malloc_r+0xe6>
 80031ee:	6823      	ldr	r3, [r4, #0]
 80031f0:	442b      	add	r3, r5
 80031f2:	6023      	str	r3, [r4, #0]
 80031f4:	f8d8 3000 	ldr.w	r3, [r8]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d038      	beq.n	800326e <_malloc_r+0xf6>
 80031fc:	685a      	ldr	r2, [r3, #4]
 80031fe:	42a2      	cmp	r2, r4
 8003200:	d12b      	bne.n	800325a <_malloc_r+0xe2>
 8003202:	2200      	movs	r2, #0
 8003204:	605a      	str	r2, [r3, #4]
 8003206:	e00f      	b.n	8003228 <_malloc_r+0xb0>
 8003208:	6822      	ldr	r2, [r4, #0]
 800320a:	1b52      	subs	r2, r2, r5
 800320c:	d41f      	bmi.n	800324e <_malloc_r+0xd6>
 800320e:	2a0b      	cmp	r2, #11
 8003210:	d917      	bls.n	8003242 <_malloc_r+0xca>
 8003212:	1961      	adds	r1, r4, r5
 8003214:	42a3      	cmp	r3, r4
 8003216:	6025      	str	r5, [r4, #0]
 8003218:	bf18      	it	ne
 800321a:	6059      	strne	r1, [r3, #4]
 800321c:	6863      	ldr	r3, [r4, #4]
 800321e:	bf08      	it	eq
 8003220:	f8c8 1000 	streq.w	r1, [r8]
 8003224:	5162      	str	r2, [r4, r5]
 8003226:	604b      	str	r3, [r1, #4]
 8003228:	4638      	mov	r0, r7
 800322a:	f104 060b 	add.w	r6, r4, #11
 800322e:	f000 f829 	bl	8003284 <__malloc_unlock>
 8003232:	f026 0607 	bic.w	r6, r6, #7
 8003236:	1d23      	adds	r3, r4, #4
 8003238:	1af2      	subs	r2, r6, r3
 800323a:	d0ae      	beq.n	800319a <_malloc_r+0x22>
 800323c:	1b9b      	subs	r3, r3, r6
 800323e:	50a3      	str	r3, [r4, r2]
 8003240:	e7ab      	b.n	800319a <_malloc_r+0x22>
 8003242:	42a3      	cmp	r3, r4
 8003244:	6862      	ldr	r2, [r4, #4]
 8003246:	d1dd      	bne.n	8003204 <_malloc_r+0x8c>
 8003248:	f8c8 2000 	str.w	r2, [r8]
 800324c:	e7ec      	b.n	8003228 <_malloc_r+0xb0>
 800324e:	4623      	mov	r3, r4
 8003250:	6864      	ldr	r4, [r4, #4]
 8003252:	e7ac      	b.n	80031ae <_malloc_r+0x36>
 8003254:	4634      	mov	r4, r6
 8003256:	6876      	ldr	r6, [r6, #4]
 8003258:	e7b4      	b.n	80031c4 <_malloc_r+0x4c>
 800325a:	4613      	mov	r3, r2
 800325c:	e7cc      	b.n	80031f8 <_malloc_r+0x80>
 800325e:	230c      	movs	r3, #12
 8003260:	603b      	str	r3, [r7, #0]
 8003262:	4638      	mov	r0, r7
 8003264:	f000 f80e 	bl	8003284 <__malloc_unlock>
 8003268:	e797      	b.n	800319a <_malloc_r+0x22>
 800326a:	6025      	str	r5, [r4, #0]
 800326c:	e7dc      	b.n	8003228 <_malloc_r+0xb0>
 800326e:	605b      	str	r3, [r3, #4]
 8003270:	deff      	udf	#255	; 0xff
 8003272:	bf00      	nop
 8003274:	20000268 	.word	0x20000268

08003278 <__malloc_lock>:
 8003278:	4801      	ldr	r0, [pc, #4]	; (8003280 <__malloc_lock+0x8>)
 800327a:	f7ff bf0e 	b.w	800309a <__retarget_lock_acquire_recursive>
 800327e:	bf00      	nop
 8003280:	20000264 	.word	0x20000264

08003284 <__malloc_unlock>:
 8003284:	4801      	ldr	r0, [pc, #4]	; (800328c <__malloc_unlock+0x8>)
 8003286:	f7ff bf09 	b.w	800309c <__retarget_lock_release_recursive>
 800328a:	bf00      	nop
 800328c:	20000264 	.word	0x20000264

08003290 <__sfputc_r>:
 8003290:	6893      	ldr	r3, [r2, #8]
 8003292:	3b01      	subs	r3, #1
 8003294:	2b00      	cmp	r3, #0
 8003296:	b410      	push	{r4}
 8003298:	6093      	str	r3, [r2, #8]
 800329a:	da08      	bge.n	80032ae <__sfputc_r+0x1e>
 800329c:	6994      	ldr	r4, [r2, #24]
 800329e:	42a3      	cmp	r3, r4
 80032a0:	db01      	blt.n	80032a6 <__sfputc_r+0x16>
 80032a2:	290a      	cmp	r1, #10
 80032a4:	d103      	bne.n	80032ae <__sfputc_r+0x1e>
 80032a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80032aa:	f000 bb73 	b.w	8003994 <__swbuf_r>
 80032ae:	6813      	ldr	r3, [r2, #0]
 80032b0:	1c58      	adds	r0, r3, #1
 80032b2:	6010      	str	r0, [r2, #0]
 80032b4:	7019      	strb	r1, [r3, #0]
 80032b6:	4608      	mov	r0, r1
 80032b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80032bc:	4770      	bx	lr

080032be <__sfputs_r>:
 80032be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032c0:	4606      	mov	r6, r0
 80032c2:	460f      	mov	r7, r1
 80032c4:	4614      	mov	r4, r2
 80032c6:	18d5      	adds	r5, r2, r3
 80032c8:	42ac      	cmp	r4, r5
 80032ca:	d101      	bne.n	80032d0 <__sfputs_r+0x12>
 80032cc:	2000      	movs	r0, #0
 80032ce:	e007      	b.n	80032e0 <__sfputs_r+0x22>
 80032d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032d4:	463a      	mov	r2, r7
 80032d6:	4630      	mov	r0, r6
 80032d8:	f7ff ffda 	bl	8003290 <__sfputc_r>
 80032dc:	1c43      	adds	r3, r0, #1
 80032de:	d1f3      	bne.n	80032c8 <__sfputs_r+0xa>
 80032e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080032e4 <_vfiprintf_r>:
 80032e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032e8:	460d      	mov	r5, r1
 80032ea:	b09d      	sub	sp, #116	; 0x74
 80032ec:	4614      	mov	r4, r2
 80032ee:	4698      	mov	r8, r3
 80032f0:	4606      	mov	r6, r0
 80032f2:	b118      	cbz	r0, 80032fc <_vfiprintf_r+0x18>
 80032f4:	6a03      	ldr	r3, [r0, #32]
 80032f6:	b90b      	cbnz	r3, 80032fc <_vfiprintf_r+0x18>
 80032f8:	f7ff fdca 	bl	8002e90 <__sinit>
 80032fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80032fe:	07d9      	lsls	r1, r3, #31
 8003300:	d405      	bmi.n	800330e <_vfiprintf_r+0x2a>
 8003302:	89ab      	ldrh	r3, [r5, #12]
 8003304:	059a      	lsls	r2, r3, #22
 8003306:	d402      	bmi.n	800330e <_vfiprintf_r+0x2a>
 8003308:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800330a:	f7ff fec6 	bl	800309a <__retarget_lock_acquire_recursive>
 800330e:	89ab      	ldrh	r3, [r5, #12]
 8003310:	071b      	lsls	r3, r3, #28
 8003312:	d501      	bpl.n	8003318 <_vfiprintf_r+0x34>
 8003314:	692b      	ldr	r3, [r5, #16]
 8003316:	b99b      	cbnz	r3, 8003340 <_vfiprintf_r+0x5c>
 8003318:	4629      	mov	r1, r5
 800331a:	4630      	mov	r0, r6
 800331c:	f000 fb78 	bl	8003a10 <__swsetup_r>
 8003320:	b170      	cbz	r0, 8003340 <_vfiprintf_r+0x5c>
 8003322:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003324:	07dc      	lsls	r4, r3, #31
 8003326:	d504      	bpl.n	8003332 <_vfiprintf_r+0x4e>
 8003328:	f04f 30ff 	mov.w	r0, #4294967295
 800332c:	b01d      	add	sp, #116	; 0x74
 800332e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003332:	89ab      	ldrh	r3, [r5, #12]
 8003334:	0598      	lsls	r0, r3, #22
 8003336:	d4f7      	bmi.n	8003328 <_vfiprintf_r+0x44>
 8003338:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800333a:	f7ff feaf 	bl	800309c <__retarget_lock_release_recursive>
 800333e:	e7f3      	b.n	8003328 <_vfiprintf_r+0x44>
 8003340:	2300      	movs	r3, #0
 8003342:	9309      	str	r3, [sp, #36]	; 0x24
 8003344:	2320      	movs	r3, #32
 8003346:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800334a:	f8cd 800c 	str.w	r8, [sp, #12]
 800334e:	2330      	movs	r3, #48	; 0x30
 8003350:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8003504 <_vfiprintf_r+0x220>
 8003354:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003358:	f04f 0901 	mov.w	r9, #1
 800335c:	4623      	mov	r3, r4
 800335e:	469a      	mov	sl, r3
 8003360:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003364:	b10a      	cbz	r2, 800336a <_vfiprintf_r+0x86>
 8003366:	2a25      	cmp	r2, #37	; 0x25
 8003368:	d1f9      	bne.n	800335e <_vfiprintf_r+0x7a>
 800336a:	ebba 0b04 	subs.w	fp, sl, r4
 800336e:	d00b      	beq.n	8003388 <_vfiprintf_r+0xa4>
 8003370:	465b      	mov	r3, fp
 8003372:	4622      	mov	r2, r4
 8003374:	4629      	mov	r1, r5
 8003376:	4630      	mov	r0, r6
 8003378:	f7ff ffa1 	bl	80032be <__sfputs_r>
 800337c:	3001      	adds	r0, #1
 800337e:	f000 80a9 	beq.w	80034d4 <_vfiprintf_r+0x1f0>
 8003382:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003384:	445a      	add	r2, fp
 8003386:	9209      	str	r2, [sp, #36]	; 0x24
 8003388:	f89a 3000 	ldrb.w	r3, [sl]
 800338c:	2b00      	cmp	r3, #0
 800338e:	f000 80a1 	beq.w	80034d4 <_vfiprintf_r+0x1f0>
 8003392:	2300      	movs	r3, #0
 8003394:	f04f 32ff 	mov.w	r2, #4294967295
 8003398:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800339c:	f10a 0a01 	add.w	sl, sl, #1
 80033a0:	9304      	str	r3, [sp, #16]
 80033a2:	9307      	str	r3, [sp, #28]
 80033a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80033a8:	931a      	str	r3, [sp, #104]	; 0x68
 80033aa:	4654      	mov	r4, sl
 80033ac:	2205      	movs	r2, #5
 80033ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033b2:	4854      	ldr	r0, [pc, #336]	; (8003504 <_vfiprintf_r+0x220>)
 80033b4:	f7fc ff34 	bl	8000220 <memchr>
 80033b8:	9a04      	ldr	r2, [sp, #16]
 80033ba:	b9d8      	cbnz	r0, 80033f4 <_vfiprintf_r+0x110>
 80033bc:	06d1      	lsls	r1, r2, #27
 80033be:	bf44      	itt	mi
 80033c0:	2320      	movmi	r3, #32
 80033c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80033c6:	0713      	lsls	r3, r2, #28
 80033c8:	bf44      	itt	mi
 80033ca:	232b      	movmi	r3, #43	; 0x2b
 80033cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80033d0:	f89a 3000 	ldrb.w	r3, [sl]
 80033d4:	2b2a      	cmp	r3, #42	; 0x2a
 80033d6:	d015      	beq.n	8003404 <_vfiprintf_r+0x120>
 80033d8:	9a07      	ldr	r2, [sp, #28]
 80033da:	4654      	mov	r4, sl
 80033dc:	2000      	movs	r0, #0
 80033de:	f04f 0c0a 	mov.w	ip, #10
 80033e2:	4621      	mov	r1, r4
 80033e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80033e8:	3b30      	subs	r3, #48	; 0x30
 80033ea:	2b09      	cmp	r3, #9
 80033ec:	d94d      	bls.n	800348a <_vfiprintf_r+0x1a6>
 80033ee:	b1b0      	cbz	r0, 800341e <_vfiprintf_r+0x13a>
 80033f0:	9207      	str	r2, [sp, #28]
 80033f2:	e014      	b.n	800341e <_vfiprintf_r+0x13a>
 80033f4:	eba0 0308 	sub.w	r3, r0, r8
 80033f8:	fa09 f303 	lsl.w	r3, r9, r3
 80033fc:	4313      	orrs	r3, r2
 80033fe:	9304      	str	r3, [sp, #16]
 8003400:	46a2      	mov	sl, r4
 8003402:	e7d2      	b.n	80033aa <_vfiprintf_r+0xc6>
 8003404:	9b03      	ldr	r3, [sp, #12]
 8003406:	1d19      	adds	r1, r3, #4
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	9103      	str	r1, [sp, #12]
 800340c:	2b00      	cmp	r3, #0
 800340e:	bfbb      	ittet	lt
 8003410:	425b      	neglt	r3, r3
 8003412:	f042 0202 	orrlt.w	r2, r2, #2
 8003416:	9307      	strge	r3, [sp, #28]
 8003418:	9307      	strlt	r3, [sp, #28]
 800341a:	bfb8      	it	lt
 800341c:	9204      	strlt	r2, [sp, #16]
 800341e:	7823      	ldrb	r3, [r4, #0]
 8003420:	2b2e      	cmp	r3, #46	; 0x2e
 8003422:	d10c      	bne.n	800343e <_vfiprintf_r+0x15a>
 8003424:	7863      	ldrb	r3, [r4, #1]
 8003426:	2b2a      	cmp	r3, #42	; 0x2a
 8003428:	d134      	bne.n	8003494 <_vfiprintf_r+0x1b0>
 800342a:	9b03      	ldr	r3, [sp, #12]
 800342c:	1d1a      	adds	r2, r3, #4
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	9203      	str	r2, [sp, #12]
 8003432:	2b00      	cmp	r3, #0
 8003434:	bfb8      	it	lt
 8003436:	f04f 33ff 	movlt.w	r3, #4294967295
 800343a:	3402      	adds	r4, #2
 800343c:	9305      	str	r3, [sp, #20]
 800343e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8003514 <_vfiprintf_r+0x230>
 8003442:	7821      	ldrb	r1, [r4, #0]
 8003444:	2203      	movs	r2, #3
 8003446:	4650      	mov	r0, sl
 8003448:	f7fc feea 	bl	8000220 <memchr>
 800344c:	b138      	cbz	r0, 800345e <_vfiprintf_r+0x17a>
 800344e:	9b04      	ldr	r3, [sp, #16]
 8003450:	eba0 000a 	sub.w	r0, r0, sl
 8003454:	2240      	movs	r2, #64	; 0x40
 8003456:	4082      	lsls	r2, r0
 8003458:	4313      	orrs	r3, r2
 800345a:	3401      	adds	r4, #1
 800345c:	9304      	str	r3, [sp, #16]
 800345e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003462:	4829      	ldr	r0, [pc, #164]	; (8003508 <_vfiprintf_r+0x224>)
 8003464:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003468:	2206      	movs	r2, #6
 800346a:	f7fc fed9 	bl	8000220 <memchr>
 800346e:	2800      	cmp	r0, #0
 8003470:	d03f      	beq.n	80034f2 <_vfiprintf_r+0x20e>
 8003472:	4b26      	ldr	r3, [pc, #152]	; (800350c <_vfiprintf_r+0x228>)
 8003474:	bb1b      	cbnz	r3, 80034be <_vfiprintf_r+0x1da>
 8003476:	9b03      	ldr	r3, [sp, #12]
 8003478:	3307      	adds	r3, #7
 800347a:	f023 0307 	bic.w	r3, r3, #7
 800347e:	3308      	adds	r3, #8
 8003480:	9303      	str	r3, [sp, #12]
 8003482:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003484:	443b      	add	r3, r7
 8003486:	9309      	str	r3, [sp, #36]	; 0x24
 8003488:	e768      	b.n	800335c <_vfiprintf_r+0x78>
 800348a:	fb0c 3202 	mla	r2, ip, r2, r3
 800348e:	460c      	mov	r4, r1
 8003490:	2001      	movs	r0, #1
 8003492:	e7a6      	b.n	80033e2 <_vfiprintf_r+0xfe>
 8003494:	2300      	movs	r3, #0
 8003496:	3401      	adds	r4, #1
 8003498:	9305      	str	r3, [sp, #20]
 800349a:	4619      	mov	r1, r3
 800349c:	f04f 0c0a 	mov.w	ip, #10
 80034a0:	4620      	mov	r0, r4
 80034a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80034a6:	3a30      	subs	r2, #48	; 0x30
 80034a8:	2a09      	cmp	r2, #9
 80034aa:	d903      	bls.n	80034b4 <_vfiprintf_r+0x1d0>
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d0c6      	beq.n	800343e <_vfiprintf_r+0x15a>
 80034b0:	9105      	str	r1, [sp, #20]
 80034b2:	e7c4      	b.n	800343e <_vfiprintf_r+0x15a>
 80034b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80034b8:	4604      	mov	r4, r0
 80034ba:	2301      	movs	r3, #1
 80034bc:	e7f0      	b.n	80034a0 <_vfiprintf_r+0x1bc>
 80034be:	ab03      	add	r3, sp, #12
 80034c0:	9300      	str	r3, [sp, #0]
 80034c2:	462a      	mov	r2, r5
 80034c4:	4b12      	ldr	r3, [pc, #72]	; (8003510 <_vfiprintf_r+0x22c>)
 80034c6:	a904      	add	r1, sp, #16
 80034c8:	4630      	mov	r0, r6
 80034ca:	f3af 8000 	nop.w
 80034ce:	4607      	mov	r7, r0
 80034d0:	1c78      	adds	r0, r7, #1
 80034d2:	d1d6      	bne.n	8003482 <_vfiprintf_r+0x19e>
 80034d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80034d6:	07d9      	lsls	r1, r3, #31
 80034d8:	d405      	bmi.n	80034e6 <_vfiprintf_r+0x202>
 80034da:	89ab      	ldrh	r3, [r5, #12]
 80034dc:	059a      	lsls	r2, r3, #22
 80034de:	d402      	bmi.n	80034e6 <_vfiprintf_r+0x202>
 80034e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80034e2:	f7ff fddb 	bl	800309c <__retarget_lock_release_recursive>
 80034e6:	89ab      	ldrh	r3, [r5, #12]
 80034e8:	065b      	lsls	r3, r3, #25
 80034ea:	f53f af1d 	bmi.w	8003328 <_vfiprintf_r+0x44>
 80034ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 80034f0:	e71c      	b.n	800332c <_vfiprintf_r+0x48>
 80034f2:	ab03      	add	r3, sp, #12
 80034f4:	9300      	str	r3, [sp, #0]
 80034f6:	462a      	mov	r2, r5
 80034f8:	4b05      	ldr	r3, [pc, #20]	; (8003510 <_vfiprintf_r+0x22c>)
 80034fa:	a904      	add	r1, sp, #16
 80034fc:	4630      	mov	r0, r6
 80034fe:	f000 f879 	bl	80035f4 <_printf_i>
 8003502:	e7e4      	b.n	80034ce <_vfiprintf_r+0x1ea>
 8003504:	08003c28 	.word	0x08003c28
 8003508:	08003c32 	.word	0x08003c32
 800350c:	00000000 	.word	0x00000000
 8003510:	080032bf 	.word	0x080032bf
 8003514:	08003c2e 	.word	0x08003c2e

08003518 <_printf_common>:
 8003518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800351c:	4616      	mov	r6, r2
 800351e:	4699      	mov	r9, r3
 8003520:	688a      	ldr	r2, [r1, #8]
 8003522:	690b      	ldr	r3, [r1, #16]
 8003524:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003528:	4293      	cmp	r3, r2
 800352a:	bfb8      	it	lt
 800352c:	4613      	movlt	r3, r2
 800352e:	6033      	str	r3, [r6, #0]
 8003530:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003534:	4607      	mov	r7, r0
 8003536:	460c      	mov	r4, r1
 8003538:	b10a      	cbz	r2, 800353e <_printf_common+0x26>
 800353a:	3301      	adds	r3, #1
 800353c:	6033      	str	r3, [r6, #0]
 800353e:	6823      	ldr	r3, [r4, #0]
 8003540:	0699      	lsls	r1, r3, #26
 8003542:	bf42      	ittt	mi
 8003544:	6833      	ldrmi	r3, [r6, #0]
 8003546:	3302      	addmi	r3, #2
 8003548:	6033      	strmi	r3, [r6, #0]
 800354a:	6825      	ldr	r5, [r4, #0]
 800354c:	f015 0506 	ands.w	r5, r5, #6
 8003550:	d106      	bne.n	8003560 <_printf_common+0x48>
 8003552:	f104 0a19 	add.w	sl, r4, #25
 8003556:	68e3      	ldr	r3, [r4, #12]
 8003558:	6832      	ldr	r2, [r6, #0]
 800355a:	1a9b      	subs	r3, r3, r2
 800355c:	42ab      	cmp	r3, r5
 800355e:	dc26      	bgt.n	80035ae <_printf_common+0x96>
 8003560:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003564:	1e13      	subs	r3, r2, #0
 8003566:	6822      	ldr	r2, [r4, #0]
 8003568:	bf18      	it	ne
 800356a:	2301      	movne	r3, #1
 800356c:	0692      	lsls	r2, r2, #26
 800356e:	d42b      	bmi.n	80035c8 <_printf_common+0xb0>
 8003570:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003574:	4649      	mov	r1, r9
 8003576:	4638      	mov	r0, r7
 8003578:	47c0      	blx	r8
 800357a:	3001      	adds	r0, #1
 800357c:	d01e      	beq.n	80035bc <_printf_common+0xa4>
 800357e:	6823      	ldr	r3, [r4, #0]
 8003580:	6922      	ldr	r2, [r4, #16]
 8003582:	f003 0306 	and.w	r3, r3, #6
 8003586:	2b04      	cmp	r3, #4
 8003588:	bf02      	ittt	eq
 800358a:	68e5      	ldreq	r5, [r4, #12]
 800358c:	6833      	ldreq	r3, [r6, #0]
 800358e:	1aed      	subeq	r5, r5, r3
 8003590:	68a3      	ldr	r3, [r4, #8]
 8003592:	bf0c      	ite	eq
 8003594:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003598:	2500      	movne	r5, #0
 800359a:	4293      	cmp	r3, r2
 800359c:	bfc4      	itt	gt
 800359e:	1a9b      	subgt	r3, r3, r2
 80035a0:	18ed      	addgt	r5, r5, r3
 80035a2:	2600      	movs	r6, #0
 80035a4:	341a      	adds	r4, #26
 80035a6:	42b5      	cmp	r5, r6
 80035a8:	d11a      	bne.n	80035e0 <_printf_common+0xc8>
 80035aa:	2000      	movs	r0, #0
 80035ac:	e008      	b.n	80035c0 <_printf_common+0xa8>
 80035ae:	2301      	movs	r3, #1
 80035b0:	4652      	mov	r2, sl
 80035b2:	4649      	mov	r1, r9
 80035b4:	4638      	mov	r0, r7
 80035b6:	47c0      	blx	r8
 80035b8:	3001      	adds	r0, #1
 80035ba:	d103      	bne.n	80035c4 <_printf_common+0xac>
 80035bc:	f04f 30ff 	mov.w	r0, #4294967295
 80035c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035c4:	3501      	adds	r5, #1
 80035c6:	e7c6      	b.n	8003556 <_printf_common+0x3e>
 80035c8:	18e1      	adds	r1, r4, r3
 80035ca:	1c5a      	adds	r2, r3, #1
 80035cc:	2030      	movs	r0, #48	; 0x30
 80035ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80035d2:	4422      	add	r2, r4
 80035d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80035d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80035dc:	3302      	adds	r3, #2
 80035de:	e7c7      	b.n	8003570 <_printf_common+0x58>
 80035e0:	2301      	movs	r3, #1
 80035e2:	4622      	mov	r2, r4
 80035e4:	4649      	mov	r1, r9
 80035e6:	4638      	mov	r0, r7
 80035e8:	47c0      	blx	r8
 80035ea:	3001      	adds	r0, #1
 80035ec:	d0e6      	beq.n	80035bc <_printf_common+0xa4>
 80035ee:	3601      	adds	r6, #1
 80035f0:	e7d9      	b.n	80035a6 <_printf_common+0x8e>
	...

080035f4 <_printf_i>:
 80035f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80035f8:	7e0f      	ldrb	r7, [r1, #24]
 80035fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80035fc:	2f78      	cmp	r7, #120	; 0x78
 80035fe:	4691      	mov	r9, r2
 8003600:	4680      	mov	r8, r0
 8003602:	460c      	mov	r4, r1
 8003604:	469a      	mov	sl, r3
 8003606:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800360a:	d807      	bhi.n	800361c <_printf_i+0x28>
 800360c:	2f62      	cmp	r7, #98	; 0x62
 800360e:	d80a      	bhi.n	8003626 <_printf_i+0x32>
 8003610:	2f00      	cmp	r7, #0
 8003612:	f000 80d4 	beq.w	80037be <_printf_i+0x1ca>
 8003616:	2f58      	cmp	r7, #88	; 0x58
 8003618:	f000 80c0 	beq.w	800379c <_printf_i+0x1a8>
 800361c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003620:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003624:	e03a      	b.n	800369c <_printf_i+0xa8>
 8003626:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800362a:	2b15      	cmp	r3, #21
 800362c:	d8f6      	bhi.n	800361c <_printf_i+0x28>
 800362e:	a101      	add	r1, pc, #4	; (adr r1, 8003634 <_printf_i+0x40>)
 8003630:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003634:	0800368d 	.word	0x0800368d
 8003638:	080036a1 	.word	0x080036a1
 800363c:	0800361d 	.word	0x0800361d
 8003640:	0800361d 	.word	0x0800361d
 8003644:	0800361d 	.word	0x0800361d
 8003648:	0800361d 	.word	0x0800361d
 800364c:	080036a1 	.word	0x080036a1
 8003650:	0800361d 	.word	0x0800361d
 8003654:	0800361d 	.word	0x0800361d
 8003658:	0800361d 	.word	0x0800361d
 800365c:	0800361d 	.word	0x0800361d
 8003660:	080037a5 	.word	0x080037a5
 8003664:	080036cd 	.word	0x080036cd
 8003668:	0800375f 	.word	0x0800375f
 800366c:	0800361d 	.word	0x0800361d
 8003670:	0800361d 	.word	0x0800361d
 8003674:	080037c7 	.word	0x080037c7
 8003678:	0800361d 	.word	0x0800361d
 800367c:	080036cd 	.word	0x080036cd
 8003680:	0800361d 	.word	0x0800361d
 8003684:	0800361d 	.word	0x0800361d
 8003688:	08003767 	.word	0x08003767
 800368c:	682b      	ldr	r3, [r5, #0]
 800368e:	1d1a      	adds	r2, r3, #4
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	602a      	str	r2, [r5, #0]
 8003694:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003698:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800369c:	2301      	movs	r3, #1
 800369e:	e09f      	b.n	80037e0 <_printf_i+0x1ec>
 80036a0:	6820      	ldr	r0, [r4, #0]
 80036a2:	682b      	ldr	r3, [r5, #0]
 80036a4:	0607      	lsls	r7, r0, #24
 80036a6:	f103 0104 	add.w	r1, r3, #4
 80036aa:	6029      	str	r1, [r5, #0]
 80036ac:	d501      	bpl.n	80036b2 <_printf_i+0xbe>
 80036ae:	681e      	ldr	r6, [r3, #0]
 80036b0:	e003      	b.n	80036ba <_printf_i+0xc6>
 80036b2:	0646      	lsls	r6, r0, #25
 80036b4:	d5fb      	bpl.n	80036ae <_printf_i+0xba>
 80036b6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80036ba:	2e00      	cmp	r6, #0
 80036bc:	da03      	bge.n	80036c6 <_printf_i+0xd2>
 80036be:	232d      	movs	r3, #45	; 0x2d
 80036c0:	4276      	negs	r6, r6
 80036c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036c6:	485a      	ldr	r0, [pc, #360]	; (8003830 <_printf_i+0x23c>)
 80036c8:	230a      	movs	r3, #10
 80036ca:	e012      	b.n	80036f2 <_printf_i+0xfe>
 80036cc:	682b      	ldr	r3, [r5, #0]
 80036ce:	6820      	ldr	r0, [r4, #0]
 80036d0:	1d19      	adds	r1, r3, #4
 80036d2:	6029      	str	r1, [r5, #0]
 80036d4:	0605      	lsls	r5, r0, #24
 80036d6:	d501      	bpl.n	80036dc <_printf_i+0xe8>
 80036d8:	681e      	ldr	r6, [r3, #0]
 80036da:	e002      	b.n	80036e2 <_printf_i+0xee>
 80036dc:	0641      	lsls	r1, r0, #25
 80036de:	d5fb      	bpl.n	80036d8 <_printf_i+0xe4>
 80036e0:	881e      	ldrh	r6, [r3, #0]
 80036e2:	4853      	ldr	r0, [pc, #332]	; (8003830 <_printf_i+0x23c>)
 80036e4:	2f6f      	cmp	r7, #111	; 0x6f
 80036e6:	bf0c      	ite	eq
 80036e8:	2308      	moveq	r3, #8
 80036ea:	230a      	movne	r3, #10
 80036ec:	2100      	movs	r1, #0
 80036ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80036f2:	6865      	ldr	r5, [r4, #4]
 80036f4:	60a5      	str	r5, [r4, #8]
 80036f6:	2d00      	cmp	r5, #0
 80036f8:	bfa2      	ittt	ge
 80036fa:	6821      	ldrge	r1, [r4, #0]
 80036fc:	f021 0104 	bicge.w	r1, r1, #4
 8003700:	6021      	strge	r1, [r4, #0]
 8003702:	b90e      	cbnz	r6, 8003708 <_printf_i+0x114>
 8003704:	2d00      	cmp	r5, #0
 8003706:	d04b      	beq.n	80037a0 <_printf_i+0x1ac>
 8003708:	4615      	mov	r5, r2
 800370a:	fbb6 f1f3 	udiv	r1, r6, r3
 800370e:	fb03 6711 	mls	r7, r3, r1, r6
 8003712:	5dc7      	ldrb	r7, [r0, r7]
 8003714:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003718:	4637      	mov	r7, r6
 800371a:	42bb      	cmp	r3, r7
 800371c:	460e      	mov	r6, r1
 800371e:	d9f4      	bls.n	800370a <_printf_i+0x116>
 8003720:	2b08      	cmp	r3, #8
 8003722:	d10b      	bne.n	800373c <_printf_i+0x148>
 8003724:	6823      	ldr	r3, [r4, #0]
 8003726:	07de      	lsls	r6, r3, #31
 8003728:	d508      	bpl.n	800373c <_printf_i+0x148>
 800372a:	6923      	ldr	r3, [r4, #16]
 800372c:	6861      	ldr	r1, [r4, #4]
 800372e:	4299      	cmp	r1, r3
 8003730:	bfde      	ittt	le
 8003732:	2330      	movle	r3, #48	; 0x30
 8003734:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003738:	f105 35ff 	addle.w	r5, r5, #4294967295
 800373c:	1b52      	subs	r2, r2, r5
 800373e:	6122      	str	r2, [r4, #16]
 8003740:	f8cd a000 	str.w	sl, [sp]
 8003744:	464b      	mov	r3, r9
 8003746:	aa03      	add	r2, sp, #12
 8003748:	4621      	mov	r1, r4
 800374a:	4640      	mov	r0, r8
 800374c:	f7ff fee4 	bl	8003518 <_printf_common>
 8003750:	3001      	adds	r0, #1
 8003752:	d14a      	bne.n	80037ea <_printf_i+0x1f6>
 8003754:	f04f 30ff 	mov.w	r0, #4294967295
 8003758:	b004      	add	sp, #16
 800375a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800375e:	6823      	ldr	r3, [r4, #0]
 8003760:	f043 0320 	orr.w	r3, r3, #32
 8003764:	6023      	str	r3, [r4, #0]
 8003766:	4833      	ldr	r0, [pc, #204]	; (8003834 <_printf_i+0x240>)
 8003768:	2778      	movs	r7, #120	; 0x78
 800376a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800376e:	6823      	ldr	r3, [r4, #0]
 8003770:	6829      	ldr	r1, [r5, #0]
 8003772:	061f      	lsls	r7, r3, #24
 8003774:	f851 6b04 	ldr.w	r6, [r1], #4
 8003778:	d402      	bmi.n	8003780 <_printf_i+0x18c>
 800377a:	065f      	lsls	r7, r3, #25
 800377c:	bf48      	it	mi
 800377e:	b2b6      	uxthmi	r6, r6
 8003780:	07df      	lsls	r7, r3, #31
 8003782:	bf48      	it	mi
 8003784:	f043 0320 	orrmi.w	r3, r3, #32
 8003788:	6029      	str	r1, [r5, #0]
 800378a:	bf48      	it	mi
 800378c:	6023      	strmi	r3, [r4, #0]
 800378e:	b91e      	cbnz	r6, 8003798 <_printf_i+0x1a4>
 8003790:	6823      	ldr	r3, [r4, #0]
 8003792:	f023 0320 	bic.w	r3, r3, #32
 8003796:	6023      	str	r3, [r4, #0]
 8003798:	2310      	movs	r3, #16
 800379a:	e7a7      	b.n	80036ec <_printf_i+0xf8>
 800379c:	4824      	ldr	r0, [pc, #144]	; (8003830 <_printf_i+0x23c>)
 800379e:	e7e4      	b.n	800376a <_printf_i+0x176>
 80037a0:	4615      	mov	r5, r2
 80037a2:	e7bd      	b.n	8003720 <_printf_i+0x12c>
 80037a4:	682b      	ldr	r3, [r5, #0]
 80037a6:	6826      	ldr	r6, [r4, #0]
 80037a8:	6961      	ldr	r1, [r4, #20]
 80037aa:	1d18      	adds	r0, r3, #4
 80037ac:	6028      	str	r0, [r5, #0]
 80037ae:	0635      	lsls	r5, r6, #24
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	d501      	bpl.n	80037b8 <_printf_i+0x1c4>
 80037b4:	6019      	str	r1, [r3, #0]
 80037b6:	e002      	b.n	80037be <_printf_i+0x1ca>
 80037b8:	0670      	lsls	r0, r6, #25
 80037ba:	d5fb      	bpl.n	80037b4 <_printf_i+0x1c0>
 80037bc:	8019      	strh	r1, [r3, #0]
 80037be:	2300      	movs	r3, #0
 80037c0:	6123      	str	r3, [r4, #16]
 80037c2:	4615      	mov	r5, r2
 80037c4:	e7bc      	b.n	8003740 <_printf_i+0x14c>
 80037c6:	682b      	ldr	r3, [r5, #0]
 80037c8:	1d1a      	adds	r2, r3, #4
 80037ca:	602a      	str	r2, [r5, #0]
 80037cc:	681d      	ldr	r5, [r3, #0]
 80037ce:	6862      	ldr	r2, [r4, #4]
 80037d0:	2100      	movs	r1, #0
 80037d2:	4628      	mov	r0, r5
 80037d4:	f7fc fd24 	bl	8000220 <memchr>
 80037d8:	b108      	cbz	r0, 80037de <_printf_i+0x1ea>
 80037da:	1b40      	subs	r0, r0, r5
 80037dc:	6060      	str	r0, [r4, #4]
 80037de:	6863      	ldr	r3, [r4, #4]
 80037e0:	6123      	str	r3, [r4, #16]
 80037e2:	2300      	movs	r3, #0
 80037e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037e8:	e7aa      	b.n	8003740 <_printf_i+0x14c>
 80037ea:	6923      	ldr	r3, [r4, #16]
 80037ec:	462a      	mov	r2, r5
 80037ee:	4649      	mov	r1, r9
 80037f0:	4640      	mov	r0, r8
 80037f2:	47d0      	blx	sl
 80037f4:	3001      	adds	r0, #1
 80037f6:	d0ad      	beq.n	8003754 <_printf_i+0x160>
 80037f8:	6823      	ldr	r3, [r4, #0]
 80037fa:	079b      	lsls	r3, r3, #30
 80037fc:	d413      	bmi.n	8003826 <_printf_i+0x232>
 80037fe:	68e0      	ldr	r0, [r4, #12]
 8003800:	9b03      	ldr	r3, [sp, #12]
 8003802:	4298      	cmp	r0, r3
 8003804:	bfb8      	it	lt
 8003806:	4618      	movlt	r0, r3
 8003808:	e7a6      	b.n	8003758 <_printf_i+0x164>
 800380a:	2301      	movs	r3, #1
 800380c:	4632      	mov	r2, r6
 800380e:	4649      	mov	r1, r9
 8003810:	4640      	mov	r0, r8
 8003812:	47d0      	blx	sl
 8003814:	3001      	adds	r0, #1
 8003816:	d09d      	beq.n	8003754 <_printf_i+0x160>
 8003818:	3501      	adds	r5, #1
 800381a:	68e3      	ldr	r3, [r4, #12]
 800381c:	9903      	ldr	r1, [sp, #12]
 800381e:	1a5b      	subs	r3, r3, r1
 8003820:	42ab      	cmp	r3, r5
 8003822:	dcf2      	bgt.n	800380a <_printf_i+0x216>
 8003824:	e7eb      	b.n	80037fe <_printf_i+0x20a>
 8003826:	2500      	movs	r5, #0
 8003828:	f104 0619 	add.w	r6, r4, #25
 800382c:	e7f5      	b.n	800381a <_printf_i+0x226>
 800382e:	bf00      	nop
 8003830:	08003c39 	.word	0x08003c39
 8003834:	08003c4a 	.word	0x08003c4a

08003838 <__sflush_r>:
 8003838:	898a      	ldrh	r2, [r1, #12]
 800383a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800383e:	4605      	mov	r5, r0
 8003840:	0710      	lsls	r0, r2, #28
 8003842:	460c      	mov	r4, r1
 8003844:	d458      	bmi.n	80038f8 <__sflush_r+0xc0>
 8003846:	684b      	ldr	r3, [r1, #4]
 8003848:	2b00      	cmp	r3, #0
 800384a:	dc05      	bgt.n	8003858 <__sflush_r+0x20>
 800384c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800384e:	2b00      	cmp	r3, #0
 8003850:	dc02      	bgt.n	8003858 <__sflush_r+0x20>
 8003852:	2000      	movs	r0, #0
 8003854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003858:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800385a:	2e00      	cmp	r6, #0
 800385c:	d0f9      	beq.n	8003852 <__sflush_r+0x1a>
 800385e:	2300      	movs	r3, #0
 8003860:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003864:	682f      	ldr	r7, [r5, #0]
 8003866:	6a21      	ldr	r1, [r4, #32]
 8003868:	602b      	str	r3, [r5, #0]
 800386a:	d032      	beq.n	80038d2 <__sflush_r+0x9a>
 800386c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800386e:	89a3      	ldrh	r3, [r4, #12]
 8003870:	075a      	lsls	r2, r3, #29
 8003872:	d505      	bpl.n	8003880 <__sflush_r+0x48>
 8003874:	6863      	ldr	r3, [r4, #4]
 8003876:	1ac0      	subs	r0, r0, r3
 8003878:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800387a:	b10b      	cbz	r3, 8003880 <__sflush_r+0x48>
 800387c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800387e:	1ac0      	subs	r0, r0, r3
 8003880:	2300      	movs	r3, #0
 8003882:	4602      	mov	r2, r0
 8003884:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003886:	6a21      	ldr	r1, [r4, #32]
 8003888:	4628      	mov	r0, r5
 800388a:	47b0      	blx	r6
 800388c:	1c43      	adds	r3, r0, #1
 800388e:	89a3      	ldrh	r3, [r4, #12]
 8003890:	d106      	bne.n	80038a0 <__sflush_r+0x68>
 8003892:	6829      	ldr	r1, [r5, #0]
 8003894:	291d      	cmp	r1, #29
 8003896:	d82b      	bhi.n	80038f0 <__sflush_r+0xb8>
 8003898:	4a29      	ldr	r2, [pc, #164]	; (8003940 <__sflush_r+0x108>)
 800389a:	410a      	asrs	r2, r1
 800389c:	07d6      	lsls	r6, r2, #31
 800389e:	d427      	bmi.n	80038f0 <__sflush_r+0xb8>
 80038a0:	2200      	movs	r2, #0
 80038a2:	6062      	str	r2, [r4, #4]
 80038a4:	04d9      	lsls	r1, r3, #19
 80038a6:	6922      	ldr	r2, [r4, #16]
 80038a8:	6022      	str	r2, [r4, #0]
 80038aa:	d504      	bpl.n	80038b6 <__sflush_r+0x7e>
 80038ac:	1c42      	adds	r2, r0, #1
 80038ae:	d101      	bne.n	80038b4 <__sflush_r+0x7c>
 80038b0:	682b      	ldr	r3, [r5, #0]
 80038b2:	b903      	cbnz	r3, 80038b6 <__sflush_r+0x7e>
 80038b4:	6560      	str	r0, [r4, #84]	; 0x54
 80038b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80038b8:	602f      	str	r7, [r5, #0]
 80038ba:	2900      	cmp	r1, #0
 80038bc:	d0c9      	beq.n	8003852 <__sflush_r+0x1a>
 80038be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80038c2:	4299      	cmp	r1, r3
 80038c4:	d002      	beq.n	80038cc <__sflush_r+0x94>
 80038c6:	4628      	mov	r0, r5
 80038c8:	f7ff fbea 	bl	80030a0 <_free_r>
 80038cc:	2000      	movs	r0, #0
 80038ce:	6360      	str	r0, [r4, #52]	; 0x34
 80038d0:	e7c0      	b.n	8003854 <__sflush_r+0x1c>
 80038d2:	2301      	movs	r3, #1
 80038d4:	4628      	mov	r0, r5
 80038d6:	47b0      	blx	r6
 80038d8:	1c41      	adds	r1, r0, #1
 80038da:	d1c8      	bne.n	800386e <__sflush_r+0x36>
 80038dc:	682b      	ldr	r3, [r5, #0]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d0c5      	beq.n	800386e <__sflush_r+0x36>
 80038e2:	2b1d      	cmp	r3, #29
 80038e4:	d001      	beq.n	80038ea <__sflush_r+0xb2>
 80038e6:	2b16      	cmp	r3, #22
 80038e8:	d101      	bne.n	80038ee <__sflush_r+0xb6>
 80038ea:	602f      	str	r7, [r5, #0]
 80038ec:	e7b1      	b.n	8003852 <__sflush_r+0x1a>
 80038ee:	89a3      	ldrh	r3, [r4, #12]
 80038f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038f4:	81a3      	strh	r3, [r4, #12]
 80038f6:	e7ad      	b.n	8003854 <__sflush_r+0x1c>
 80038f8:	690f      	ldr	r7, [r1, #16]
 80038fa:	2f00      	cmp	r7, #0
 80038fc:	d0a9      	beq.n	8003852 <__sflush_r+0x1a>
 80038fe:	0793      	lsls	r3, r2, #30
 8003900:	680e      	ldr	r6, [r1, #0]
 8003902:	bf08      	it	eq
 8003904:	694b      	ldreq	r3, [r1, #20]
 8003906:	600f      	str	r7, [r1, #0]
 8003908:	bf18      	it	ne
 800390a:	2300      	movne	r3, #0
 800390c:	eba6 0807 	sub.w	r8, r6, r7
 8003910:	608b      	str	r3, [r1, #8]
 8003912:	f1b8 0f00 	cmp.w	r8, #0
 8003916:	dd9c      	ble.n	8003852 <__sflush_r+0x1a>
 8003918:	6a21      	ldr	r1, [r4, #32]
 800391a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800391c:	4643      	mov	r3, r8
 800391e:	463a      	mov	r2, r7
 8003920:	4628      	mov	r0, r5
 8003922:	47b0      	blx	r6
 8003924:	2800      	cmp	r0, #0
 8003926:	dc06      	bgt.n	8003936 <__sflush_r+0xfe>
 8003928:	89a3      	ldrh	r3, [r4, #12]
 800392a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800392e:	81a3      	strh	r3, [r4, #12]
 8003930:	f04f 30ff 	mov.w	r0, #4294967295
 8003934:	e78e      	b.n	8003854 <__sflush_r+0x1c>
 8003936:	4407      	add	r7, r0
 8003938:	eba8 0800 	sub.w	r8, r8, r0
 800393c:	e7e9      	b.n	8003912 <__sflush_r+0xda>
 800393e:	bf00      	nop
 8003940:	dfbffffe 	.word	0xdfbffffe

08003944 <_fflush_r>:
 8003944:	b538      	push	{r3, r4, r5, lr}
 8003946:	690b      	ldr	r3, [r1, #16]
 8003948:	4605      	mov	r5, r0
 800394a:	460c      	mov	r4, r1
 800394c:	b913      	cbnz	r3, 8003954 <_fflush_r+0x10>
 800394e:	2500      	movs	r5, #0
 8003950:	4628      	mov	r0, r5
 8003952:	bd38      	pop	{r3, r4, r5, pc}
 8003954:	b118      	cbz	r0, 800395e <_fflush_r+0x1a>
 8003956:	6a03      	ldr	r3, [r0, #32]
 8003958:	b90b      	cbnz	r3, 800395e <_fflush_r+0x1a>
 800395a:	f7ff fa99 	bl	8002e90 <__sinit>
 800395e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d0f3      	beq.n	800394e <_fflush_r+0xa>
 8003966:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003968:	07d0      	lsls	r0, r2, #31
 800396a:	d404      	bmi.n	8003976 <_fflush_r+0x32>
 800396c:	0599      	lsls	r1, r3, #22
 800396e:	d402      	bmi.n	8003976 <_fflush_r+0x32>
 8003970:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003972:	f7ff fb92 	bl	800309a <__retarget_lock_acquire_recursive>
 8003976:	4628      	mov	r0, r5
 8003978:	4621      	mov	r1, r4
 800397a:	f7ff ff5d 	bl	8003838 <__sflush_r>
 800397e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003980:	07da      	lsls	r2, r3, #31
 8003982:	4605      	mov	r5, r0
 8003984:	d4e4      	bmi.n	8003950 <_fflush_r+0xc>
 8003986:	89a3      	ldrh	r3, [r4, #12]
 8003988:	059b      	lsls	r3, r3, #22
 800398a:	d4e1      	bmi.n	8003950 <_fflush_r+0xc>
 800398c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800398e:	f7ff fb85 	bl	800309c <__retarget_lock_release_recursive>
 8003992:	e7dd      	b.n	8003950 <_fflush_r+0xc>

08003994 <__swbuf_r>:
 8003994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003996:	460e      	mov	r6, r1
 8003998:	4614      	mov	r4, r2
 800399a:	4605      	mov	r5, r0
 800399c:	b118      	cbz	r0, 80039a6 <__swbuf_r+0x12>
 800399e:	6a03      	ldr	r3, [r0, #32]
 80039a0:	b90b      	cbnz	r3, 80039a6 <__swbuf_r+0x12>
 80039a2:	f7ff fa75 	bl	8002e90 <__sinit>
 80039a6:	69a3      	ldr	r3, [r4, #24]
 80039a8:	60a3      	str	r3, [r4, #8]
 80039aa:	89a3      	ldrh	r3, [r4, #12]
 80039ac:	071a      	lsls	r2, r3, #28
 80039ae:	d525      	bpl.n	80039fc <__swbuf_r+0x68>
 80039b0:	6923      	ldr	r3, [r4, #16]
 80039b2:	b31b      	cbz	r3, 80039fc <__swbuf_r+0x68>
 80039b4:	6823      	ldr	r3, [r4, #0]
 80039b6:	6922      	ldr	r2, [r4, #16]
 80039b8:	1a98      	subs	r0, r3, r2
 80039ba:	6963      	ldr	r3, [r4, #20]
 80039bc:	b2f6      	uxtb	r6, r6
 80039be:	4283      	cmp	r3, r0
 80039c0:	4637      	mov	r7, r6
 80039c2:	dc04      	bgt.n	80039ce <__swbuf_r+0x3a>
 80039c4:	4621      	mov	r1, r4
 80039c6:	4628      	mov	r0, r5
 80039c8:	f7ff ffbc 	bl	8003944 <_fflush_r>
 80039cc:	b9e0      	cbnz	r0, 8003a08 <__swbuf_r+0x74>
 80039ce:	68a3      	ldr	r3, [r4, #8]
 80039d0:	3b01      	subs	r3, #1
 80039d2:	60a3      	str	r3, [r4, #8]
 80039d4:	6823      	ldr	r3, [r4, #0]
 80039d6:	1c5a      	adds	r2, r3, #1
 80039d8:	6022      	str	r2, [r4, #0]
 80039da:	701e      	strb	r6, [r3, #0]
 80039dc:	6962      	ldr	r2, [r4, #20]
 80039de:	1c43      	adds	r3, r0, #1
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d004      	beq.n	80039ee <__swbuf_r+0x5a>
 80039e4:	89a3      	ldrh	r3, [r4, #12]
 80039e6:	07db      	lsls	r3, r3, #31
 80039e8:	d506      	bpl.n	80039f8 <__swbuf_r+0x64>
 80039ea:	2e0a      	cmp	r6, #10
 80039ec:	d104      	bne.n	80039f8 <__swbuf_r+0x64>
 80039ee:	4621      	mov	r1, r4
 80039f0:	4628      	mov	r0, r5
 80039f2:	f7ff ffa7 	bl	8003944 <_fflush_r>
 80039f6:	b938      	cbnz	r0, 8003a08 <__swbuf_r+0x74>
 80039f8:	4638      	mov	r0, r7
 80039fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039fc:	4621      	mov	r1, r4
 80039fe:	4628      	mov	r0, r5
 8003a00:	f000 f806 	bl	8003a10 <__swsetup_r>
 8003a04:	2800      	cmp	r0, #0
 8003a06:	d0d5      	beq.n	80039b4 <__swbuf_r+0x20>
 8003a08:	f04f 37ff 	mov.w	r7, #4294967295
 8003a0c:	e7f4      	b.n	80039f8 <__swbuf_r+0x64>
	...

08003a10 <__swsetup_r>:
 8003a10:	b538      	push	{r3, r4, r5, lr}
 8003a12:	4b2a      	ldr	r3, [pc, #168]	; (8003abc <__swsetup_r+0xac>)
 8003a14:	4605      	mov	r5, r0
 8003a16:	6818      	ldr	r0, [r3, #0]
 8003a18:	460c      	mov	r4, r1
 8003a1a:	b118      	cbz	r0, 8003a24 <__swsetup_r+0x14>
 8003a1c:	6a03      	ldr	r3, [r0, #32]
 8003a1e:	b90b      	cbnz	r3, 8003a24 <__swsetup_r+0x14>
 8003a20:	f7ff fa36 	bl	8002e90 <__sinit>
 8003a24:	89a3      	ldrh	r3, [r4, #12]
 8003a26:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003a2a:	0718      	lsls	r0, r3, #28
 8003a2c:	d422      	bmi.n	8003a74 <__swsetup_r+0x64>
 8003a2e:	06d9      	lsls	r1, r3, #27
 8003a30:	d407      	bmi.n	8003a42 <__swsetup_r+0x32>
 8003a32:	2309      	movs	r3, #9
 8003a34:	602b      	str	r3, [r5, #0]
 8003a36:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003a3a:	81a3      	strh	r3, [r4, #12]
 8003a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a40:	e034      	b.n	8003aac <__swsetup_r+0x9c>
 8003a42:	0758      	lsls	r0, r3, #29
 8003a44:	d512      	bpl.n	8003a6c <__swsetup_r+0x5c>
 8003a46:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003a48:	b141      	cbz	r1, 8003a5c <__swsetup_r+0x4c>
 8003a4a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003a4e:	4299      	cmp	r1, r3
 8003a50:	d002      	beq.n	8003a58 <__swsetup_r+0x48>
 8003a52:	4628      	mov	r0, r5
 8003a54:	f7ff fb24 	bl	80030a0 <_free_r>
 8003a58:	2300      	movs	r3, #0
 8003a5a:	6363      	str	r3, [r4, #52]	; 0x34
 8003a5c:	89a3      	ldrh	r3, [r4, #12]
 8003a5e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003a62:	81a3      	strh	r3, [r4, #12]
 8003a64:	2300      	movs	r3, #0
 8003a66:	6063      	str	r3, [r4, #4]
 8003a68:	6923      	ldr	r3, [r4, #16]
 8003a6a:	6023      	str	r3, [r4, #0]
 8003a6c:	89a3      	ldrh	r3, [r4, #12]
 8003a6e:	f043 0308 	orr.w	r3, r3, #8
 8003a72:	81a3      	strh	r3, [r4, #12]
 8003a74:	6923      	ldr	r3, [r4, #16]
 8003a76:	b94b      	cbnz	r3, 8003a8c <__swsetup_r+0x7c>
 8003a78:	89a3      	ldrh	r3, [r4, #12]
 8003a7a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003a7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a82:	d003      	beq.n	8003a8c <__swsetup_r+0x7c>
 8003a84:	4621      	mov	r1, r4
 8003a86:	4628      	mov	r0, r5
 8003a88:	f000 f850 	bl	8003b2c <__smakebuf_r>
 8003a8c:	89a0      	ldrh	r0, [r4, #12]
 8003a8e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003a92:	f010 0301 	ands.w	r3, r0, #1
 8003a96:	d00a      	beq.n	8003aae <__swsetup_r+0x9e>
 8003a98:	2300      	movs	r3, #0
 8003a9a:	60a3      	str	r3, [r4, #8]
 8003a9c:	6963      	ldr	r3, [r4, #20]
 8003a9e:	425b      	negs	r3, r3
 8003aa0:	61a3      	str	r3, [r4, #24]
 8003aa2:	6923      	ldr	r3, [r4, #16]
 8003aa4:	b943      	cbnz	r3, 8003ab8 <__swsetup_r+0xa8>
 8003aa6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003aaa:	d1c4      	bne.n	8003a36 <__swsetup_r+0x26>
 8003aac:	bd38      	pop	{r3, r4, r5, pc}
 8003aae:	0781      	lsls	r1, r0, #30
 8003ab0:	bf58      	it	pl
 8003ab2:	6963      	ldrpl	r3, [r4, #20]
 8003ab4:	60a3      	str	r3, [r4, #8]
 8003ab6:	e7f4      	b.n	8003aa2 <__swsetup_r+0x92>
 8003ab8:	2000      	movs	r0, #0
 8003aba:	e7f7      	b.n	8003aac <__swsetup_r+0x9c>
 8003abc:	20000064 	.word	0x20000064

08003ac0 <_sbrk_r>:
 8003ac0:	b538      	push	{r3, r4, r5, lr}
 8003ac2:	4d06      	ldr	r5, [pc, #24]	; (8003adc <_sbrk_r+0x1c>)
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	4604      	mov	r4, r0
 8003ac8:	4608      	mov	r0, r1
 8003aca:	602b      	str	r3, [r5, #0]
 8003acc:	f7fc ff2c 	bl	8000928 <_sbrk>
 8003ad0:	1c43      	adds	r3, r0, #1
 8003ad2:	d102      	bne.n	8003ada <_sbrk_r+0x1a>
 8003ad4:	682b      	ldr	r3, [r5, #0]
 8003ad6:	b103      	cbz	r3, 8003ada <_sbrk_r+0x1a>
 8003ad8:	6023      	str	r3, [r4, #0]
 8003ada:	bd38      	pop	{r3, r4, r5, pc}
 8003adc:	20000260 	.word	0x20000260

08003ae0 <__swhatbuf_r>:
 8003ae0:	b570      	push	{r4, r5, r6, lr}
 8003ae2:	460c      	mov	r4, r1
 8003ae4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ae8:	2900      	cmp	r1, #0
 8003aea:	b096      	sub	sp, #88	; 0x58
 8003aec:	4615      	mov	r5, r2
 8003aee:	461e      	mov	r6, r3
 8003af0:	da0d      	bge.n	8003b0e <__swhatbuf_r+0x2e>
 8003af2:	89a3      	ldrh	r3, [r4, #12]
 8003af4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003af8:	f04f 0100 	mov.w	r1, #0
 8003afc:	bf0c      	ite	eq
 8003afe:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8003b02:	2340      	movne	r3, #64	; 0x40
 8003b04:	2000      	movs	r0, #0
 8003b06:	6031      	str	r1, [r6, #0]
 8003b08:	602b      	str	r3, [r5, #0]
 8003b0a:	b016      	add	sp, #88	; 0x58
 8003b0c:	bd70      	pop	{r4, r5, r6, pc}
 8003b0e:	466a      	mov	r2, sp
 8003b10:	f000 f848 	bl	8003ba4 <_fstat_r>
 8003b14:	2800      	cmp	r0, #0
 8003b16:	dbec      	blt.n	8003af2 <__swhatbuf_r+0x12>
 8003b18:	9901      	ldr	r1, [sp, #4]
 8003b1a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8003b1e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8003b22:	4259      	negs	r1, r3
 8003b24:	4159      	adcs	r1, r3
 8003b26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b2a:	e7eb      	b.n	8003b04 <__swhatbuf_r+0x24>

08003b2c <__smakebuf_r>:
 8003b2c:	898b      	ldrh	r3, [r1, #12]
 8003b2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003b30:	079d      	lsls	r5, r3, #30
 8003b32:	4606      	mov	r6, r0
 8003b34:	460c      	mov	r4, r1
 8003b36:	d507      	bpl.n	8003b48 <__smakebuf_r+0x1c>
 8003b38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003b3c:	6023      	str	r3, [r4, #0]
 8003b3e:	6123      	str	r3, [r4, #16]
 8003b40:	2301      	movs	r3, #1
 8003b42:	6163      	str	r3, [r4, #20]
 8003b44:	b002      	add	sp, #8
 8003b46:	bd70      	pop	{r4, r5, r6, pc}
 8003b48:	ab01      	add	r3, sp, #4
 8003b4a:	466a      	mov	r2, sp
 8003b4c:	f7ff ffc8 	bl	8003ae0 <__swhatbuf_r>
 8003b50:	9900      	ldr	r1, [sp, #0]
 8003b52:	4605      	mov	r5, r0
 8003b54:	4630      	mov	r0, r6
 8003b56:	f7ff fb0f 	bl	8003178 <_malloc_r>
 8003b5a:	b948      	cbnz	r0, 8003b70 <__smakebuf_r+0x44>
 8003b5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b60:	059a      	lsls	r2, r3, #22
 8003b62:	d4ef      	bmi.n	8003b44 <__smakebuf_r+0x18>
 8003b64:	f023 0303 	bic.w	r3, r3, #3
 8003b68:	f043 0302 	orr.w	r3, r3, #2
 8003b6c:	81a3      	strh	r3, [r4, #12]
 8003b6e:	e7e3      	b.n	8003b38 <__smakebuf_r+0xc>
 8003b70:	89a3      	ldrh	r3, [r4, #12]
 8003b72:	6020      	str	r0, [r4, #0]
 8003b74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b78:	81a3      	strh	r3, [r4, #12]
 8003b7a:	9b00      	ldr	r3, [sp, #0]
 8003b7c:	6163      	str	r3, [r4, #20]
 8003b7e:	9b01      	ldr	r3, [sp, #4]
 8003b80:	6120      	str	r0, [r4, #16]
 8003b82:	b15b      	cbz	r3, 8003b9c <__smakebuf_r+0x70>
 8003b84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b88:	4630      	mov	r0, r6
 8003b8a:	f000 f81d 	bl	8003bc8 <_isatty_r>
 8003b8e:	b128      	cbz	r0, 8003b9c <__smakebuf_r+0x70>
 8003b90:	89a3      	ldrh	r3, [r4, #12]
 8003b92:	f023 0303 	bic.w	r3, r3, #3
 8003b96:	f043 0301 	orr.w	r3, r3, #1
 8003b9a:	81a3      	strh	r3, [r4, #12]
 8003b9c:	89a3      	ldrh	r3, [r4, #12]
 8003b9e:	431d      	orrs	r5, r3
 8003ba0:	81a5      	strh	r5, [r4, #12]
 8003ba2:	e7cf      	b.n	8003b44 <__smakebuf_r+0x18>

08003ba4 <_fstat_r>:
 8003ba4:	b538      	push	{r3, r4, r5, lr}
 8003ba6:	4d07      	ldr	r5, [pc, #28]	; (8003bc4 <_fstat_r+0x20>)
 8003ba8:	2300      	movs	r3, #0
 8003baa:	4604      	mov	r4, r0
 8003bac:	4608      	mov	r0, r1
 8003bae:	4611      	mov	r1, r2
 8003bb0:	602b      	str	r3, [r5, #0]
 8003bb2:	f7fc fe90 	bl	80008d6 <_fstat>
 8003bb6:	1c43      	adds	r3, r0, #1
 8003bb8:	d102      	bne.n	8003bc0 <_fstat_r+0x1c>
 8003bba:	682b      	ldr	r3, [r5, #0]
 8003bbc:	b103      	cbz	r3, 8003bc0 <_fstat_r+0x1c>
 8003bbe:	6023      	str	r3, [r4, #0]
 8003bc0:	bd38      	pop	{r3, r4, r5, pc}
 8003bc2:	bf00      	nop
 8003bc4:	20000260 	.word	0x20000260

08003bc8 <_isatty_r>:
 8003bc8:	b538      	push	{r3, r4, r5, lr}
 8003bca:	4d06      	ldr	r5, [pc, #24]	; (8003be4 <_isatty_r+0x1c>)
 8003bcc:	2300      	movs	r3, #0
 8003bce:	4604      	mov	r4, r0
 8003bd0:	4608      	mov	r0, r1
 8003bd2:	602b      	str	r3, [r5, #0]
 8003bd4:	f7fc fe8f 	bl	80008f6 <_isatty>
 8003bd8:	1c43      	adds	r3, r0, #1
 8003bda:	d102      	bne.n	8003be2 <_isatty_r+0x1a>
 8003bdc:	682b      	ldr	r3, [r5, #0]
 8003bde:	b103      	cbz	r3, 8003be2 <_isatty_r+0x1a>
 8003be0:	6023      	str	r3, [r4, #0]
 8003be2:	bd38      	pop	{r3, r4, r5, pc}
 8003be4:	20000260 	.word	0x20000260

08003be8 <_init>:
 8003be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bea:	bf00      	nop
 8003bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bee:	bc08      	pop	{r3}
 8003bf0:	469e      	mov	lr, r3
 8003bf2:	4770      	bx	lr

08003bf4 <_fini>:
 8003bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bf6:	bf00      	nop
 8003bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bfa:	bc08      	pop	{r3}
 8003bfc:	469e      	mov	lr, r3
 8003bfe:	4770      	bx	lr
